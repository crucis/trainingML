('Y_rgb.shape=', (5000, 3, 32, 32))
('Y_yuv.shape=', (5000, 3, 32, 32))
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
('Y_rgb.shape=', (5000, 3, 32, 32))
('Y_yuv.shape=', (5000, 3, 32, 32))
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
('Y_rgb.shape=', (5000, 3, 32, 32))
('Y_yuv.shape=', (5000, 3, 32, 32))
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
transposed
('rgb.shape=', (32, 32, 3))
('yuv.shape=', (32, 32, 3))
vixi
----------------------------------
('Training with dataset based on class - ', 'horse', 'with', 5000, 'samples')
----------------------------------
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_2 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_1 (Sequential)        (None, 1)             0           lambda_1[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_1 (Convolution2D)  (None, 32, 16, 16)    608         convolution2d_input_1[0][0]      
____________________________________________________________________________________________________
leakyrelu_1 (LeakyReLU)          (None, 32, 16, 16)    0           convolution2d_1[0][0]            
____________________________________________________________________________________________________
dropout_1 (Dropout)              (None, 32, 16, 16)    0           leakyrelu_1[0][0]                
____________________________________________________________________________________________________
convolution2d_2 (Convolution2D)  (None, 64, 8, 8)      18496       dropout_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_2 (LeakyReLU)          (None, 64, 8, 8)      0           convolution2d_2[0][0]            
____________________________________________________________________________________________________
dropout_2 (Dropout)              (None, 64, 8, 8)      0           leakyrelu_2[0][0]                
____________________________________________________________________________________________________
convolution2d_3 (Convolution2D)  (None, 128, 4, 4)     73856       dropout_2[0][0]                  
____________________________________________________________________________________________________
leakyrelu_3 (LeakyReLU)          (None, 128, 4, 4)     0           convolution2d_3[0][0]            
____________________________________________________________________________________________________
dropout_3 (Dropout)              (None, 128, 4, 4)     0           leakyrelu_3[0][0]                
____________________________________________________________________________________________________
convolution2d_4 (Convolution2D)  (None, 256, 2, 2)     295168      dropout_3[0][0]                  
____________________________________________________________________________________________________
leakyrelu_4 (LeakyReLU)          (None, 256, 2, 2)     0           convolution2d_4[0][0]            
____________________________________________________________________________________________________
dropout_4 (Dropout)              (None, 256, 2, 2)     0           leakyrelu_4[0][0]                
____________________________________________________________________________________________________
flatten_1 (Flatten)              (None, 1024)          0           dropout_4[0][0]                  
____________________________________________________________________________________________________
dense_1 (Dense)                  (None, 1024)          1049600     flatten_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_5 (LeakyReLU)          (None, 1024)          0           dense_1[0][0]                    
____________________________________________________________________________________________________
dropout_5 (Dropout)              (None, 1024)          0           leakyrelu_5[0][0]                
____________________________________________________________________________________________________
dense_2 (Dense)                  (None, 1)             1025        dropout_5[0][0]                  
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
('Epoch', 1, 'of', 50)
('Number of batches', 19)
('Y_rgb.shape=', (5000, 3, 32, 32))
('Y_yuv.shape=', (5000, 3, 32, 32))
----------------------------------
('Training with dataset based on class - ', 'horse', 'with', 5000, 'samples')
----------------------------------
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_2 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_1 (Sequential)        (None, 1)             0           lambda_1[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_1 (Convolution2D)  (None, 32, 16, 16)    608         convolution2d_input_1[0][0]      
____________________________________________________________________________________________________
leakyrelu_1 (LeakyReLU)          (None, 32, 16, 16)    0           convolution2d_1[0][0]            
____________________________________________________________________________________________________
dropout_1 (Dropout)              (None, 32, 16, 16)    0           leakyrelu_1[0][0]                
____________________________________________________________________________________________________
convolution2d_2 (Convolution2D)  (None, 64, 8, 8)      18496       dropout_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_2 (LeakyReLU)          (None, 64, 8, 8)      0           convolution2d_2[0][0]            
____________________________________________________________________________________________________
dropout_2 (Dropout)              (None, 64, 8, 8)      0           leakyrelu_2[0][0]                
____________________________________________________________________________________________________
convolution2d_3 (Convolution2D)  (None, 128, 4, 4)     73856       dropout_2[0][0]                  
____________________________________________________________________________________________________
leakyrelu_3 (LeakyReLU)          (None, 128, 4, 4)     0           convolution2d_3[0][0]            
____________________________________________________________________________________________________
dropout_3 (Dropout)              (None, 128, 4, 4)     0           leakyrelu_3[0][0]                
____________________________________________________________________________________________________
convolution2d_4 (Convolution2D)  (None, 256, 2, 2)     295168      dropout_3[0][0]                  
____________________________________________________________________________________________________
leakyrelu_4 (LeakyReLU)          (None, 256, 2, 2)     0           convolution2d_4[0][0]            
____________________________________________________________________________________________________
dropout_4 (Dropout)              (None, 256, 2, 2)     0           leakyrelu_4[0][0]                
____________________________________________________________________________________________________
flatten_1 (Flatten)              (None, 1024)          0           dropout_4[0][0]                  
____________________________________________________________________________________________________
dense_1 (Dense)                  (None, 1024)          1049600     flatten_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_5 (LeakyReLU)          (None, 1024)          0           dense_1[0][0]                    
____________________________________________________________________________________________________
dropout_5 (Dropout)              (None, 1024)          0           leakyrelu_5[0][0]                
____________________________________________________________________________________________________
dense_2 (Dense)                  (None, 1)             1025        dropout_5[0][0]                  
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
('Epoch', 1, 'of', 50)
('Number of batches', 19)
----------------------------------
('Training with dataset based on class - ', 'horse', 'with', 5000, 'samples')
----------------------------------
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_2 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_1 (Sequential)        (None, 1)             0           lambda_1[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_1 (Convolution2D)  (None, 32, 16, 16)    608         convolution2d_input_1[0][0]      
____________________________________________________________________________________________________
leakyrelu_1 (LeakyReLU)          (None, 32, 16, 16)    0           convolution2d_1[0][0]            
____________________________________________________________________________________________________
dropout_1 (Dropout)              (None, 32, 16, 16)    0           leakyrelu_1[0][0]                
____________________________________________________________________________________________________
convolution2d_2 (Convolution2D)  (None, 64, 8, 8)      18496       dropout_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_2 (LeakyReLU)          (None, 64, 8, 8)      0           convolution2d_2[0][0]            
____________________________________________________________________________________________________
dropout_2 (Dropout)              (None, 64, 8, 8)      0           leakyrelu_2[0][0]                
____________________________________________________________________________________________________
convolution2d_3 (Convolution2D)  (None, 128, 4, 4)     73856       dropout_2[0][0]                  
____________________________________________________________________________________________________
leakyrelu_3 (LeakyReLU)          (None, 128, 4, 4)     0           convolution2d_3[0][0]            
____________________________________________________________________________________________________
dropout_3 (Dropout)              (None, 128, 4, 4)     0           leakyrelu_3[0][0]                
____________________________________________________________________________________________________
convolution2d_4 (Convolution2D)  (None, 256, 2, 2)     295168      dropout_3[0][0]                  
____________________________________________________________________________________________________
leakyrelu_4 (LeakyReLU)          (None, 256, 2, 2)     0           convolution2d_4[0][0]            
____________________________________________________________________________________________________
dropout_4 (Dropout)              (None, 256, 2, 2)     0           leakyrelu_4[0][0]                
____________________________________________________________________________________________________
flatten_1 (Flatten)              (None, 1024)          0           dropout_4[0][0]                  
____________________________________________________________________________________________________
dense_1 (Dense)                  (None, 1024)          1049600     flatten_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_5 (LeakyReLU)          (None, 1024)          0           dense_1[0][0]                    
____________________________________________________________________________________________________
dropout_5 (Dropout)              (None, 1024)          0           leakyrelu_5[0][0]                
____________________________________________________________________________________________________
dense_2 (Dense)                  (None, 1)             1025        dropout_5[0][0]                  
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
('Epoch', 1, 'of', 50)
('Number of batches', 19)
('BW_image_batch=', (256, 32, 32))
----------------------------------
('Training with dataset based on class - ', 'horse', 'with', 5000, 'samples')
----------------------------------
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_2 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_1 (Sequential)        (None, 1)             0           lambda_1[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_1 (Convolution2D)  (None, 32, 16, 16)    608         convolution2d_input_1[0][0]      
____________________________________________________________________________________________________
leakyrelu_1 (LeakyReLU)          (None, 32, 16, 16)    0           convolution2d_1[0][0]            
____________________________________________________________________________________________________
dropout_1 (Dropout)              (None, 32, 16, 16)    0           leakyrelu_1[0][0]                
____________________________________________________________________________________________________
convolution2d_2 (Convolution2D)  (None, 64, 8, 8)      18496       dropout_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_2 (LeakyReLU)          (None, 64, 8, 8)      0           convolution2d_2[0][0]            
____________________________________________________________________________________________________
dropout_2 (Dropout)              (None, 64, 8, 8)      0           leakyrelu_2[0][0]                
____________________________________________________________________________________________________
convolution2d_3 (Convolution2D)  (None, 128, 4, 4)     73856       dropout_2[0][0]                  
____________________________________________________________________________________________________
leakyrelu_3 (LeakyReLU)          (None, 128, 4, 4)     0           convolution2d_3[0][0]            
____________________________________________________________________________________________________
dropout_3 (Dropout)              (None, 128, 4, 4)     0           leakyrelu_3[0][0]                
____________________________________________________________________________________________________
convolution2d_4 (Convolution2D)  (None, 256, 2, 2)     295168      dropout_3[0][0]                  
____________________________________________________________________________________________________
leakyrelu_4 (LeakyReLU)          (None, 256, 2, 2)     0           convolution2d_4[0][0]            
____________________________________________________________________________________________________
dropout_4 (Dropout)              (None, 256, 2, 2)     0           leakyrelu_4[0][0]                
____________________________________________________________________________________________________
flatten_1 (Flatten)              (None, 1024)          0           dropout_4[0][0]                  
____________________________________________________________________________________________________
dense_1 (Dense)                  (None, 1024)          1049600     flatten_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_5 (LeakyReLU)          (None, 1024)          0           dense_1[0][0]                    
____________________________________________________________________________________________________
dropout_5 (Dropout)              (None, 1024)          0           leakyrelu_5[0][0]                
____________________________________________________________________________________________________
dense_2 (Dense)                  (None, 1)             1025        dropout_5[0][0]                  
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
('Epoch', 1, 'of', 50)
('Number of batches', 19)
('BW_image_batch=', (256, 32, 32))
('Y_gray=', (5000, 32, 32))
('Y_uv', (5000, 2, 32, 32))
----------------------------------
('Training with dataset based on class - ', 'horse', 'with', 5000, 'samples')
----------------------------------
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_2 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_1 (Sequential)        (None, 1)             0           lambda_1[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_1 (Convolution2D)  (None, 32, 16, 16)    608         convolution2d_input_1[0][0]      
____________________________________________________________________________________________________
leakyrelu_1 (LeakyReLU)          (None, 32, 16, 16)    0           convolution2d_1[0][0]            
____________________________________________________________________________________________________
dropout_1 (Dropout)              (None, 32, 16, 16)    0           leakyrelu_1[0][0]                
____________________________________________________________________________________________________
convolution2d_2 (Convolution2D)  (None, 64, 8, 8)      18496       dropout_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_2 (LeakyReLU)          (None, 64, 8, 8)      0           convolution2d_2[0][0]            
____________________________________________________________________________________________________
dropout_2 (Dropout)              (None, 64, 8, 8)      0           leakyrelu_2[0][0]                
____________________________________________________________________________________________________
convolution2d_3 (Convolution2D)  (None, 128, 4, 4)     73856       dropout_2[0][0]                  
____________________________________________________________________________________________________
leakyrelu_3 (LeakyReLU)          (None, 128, 4, 4)     0           convolution2d_3[0][0]            
____________________________________________________________________________________________________
dropout_3 (Dropout)              (None, 128, 4, 4)     0           leakyrelu_3[0][0]                
____________________________________________________________________________________________________
convolution2d_4 (Convolution2D)  (None, 256, 2, 2)     295168      dropout_3[0][0]                  
____________________________________________________________________________________________________
leakyrelu_4 (LeakyReLU)          (None, 256, 2, 2)     0           convolution2d_4[0][0]            
____________________________________________________________________________________________________
dropout_4 (Dropout)              (None, 256, 2, 2)     0           leakyrelu_4[0][0]                
____________________________________________________________________________________________________
flatten_1 (Flatten)              (None, 1024)          0           dropout_4[0][0]                  
____________________________________________________________________________________________________
dense_1 (Dense)                  (None, 1024)          1049600     flatten_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_5 (LeakyReLU)          (None, 1024)          0           dense_1[0][0]                    
____________________________________________________________________________________________________
dropout_5 (Dropout)              (None, 1024)          0           leakyrelu_5[0][0]                
____________________________________________________________________________________________________
dense_2 (Dense)                  (None, 1)             1025        dropout_5[0][0]                  
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
('Epoch', 1, 'of', 50)
('Number of batches', 19)
('BW_image_batch=', (256, 32, 32))
('Y_gray_antes=', (5000, 1, 32, 32))
('Y_gray=', (5000, 32, 32))
('Y_uv', (5000, 2, 32, 32))
----------------------------------
('Training with dataset based on class - ', 'horse', 'with', 5000, 'samples')
----------------------------------
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_2 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_1 (Sequential)        (None, 1)             0           lambda_1[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_1 (Convolution2D)  (None, 32, 16, 16)    608         convolution2d_input_1[0][0]      
____________________________________________________________________________________________________
leakyrelu_1 (LeakyReLU)          (None, 32, 16, 16)    0           convolution2d_1[0][0]            
____________________________________________________________________________________________________
dropout_1 (Dropout)              (None, 32, 16, 16)    0           leakyrelu_1[0][0]                
____________________________________________________________________________________________________
convolution2d_2 (Convolution2D)  (None, 64, 8, 8)      18496       dropout_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_2 (LeakyReLU)          (None, 64, 8, 8)      0           convolution2d_2[0][0]            
____________________________________________________________________________________________________
dropout_2 (Dropout)              (None, 64, 8, 8)      0           leakyrelu_2[0][0]                
____________________________________________________________________________________________________
convolution2d_3 (Convolution2D)  (None, 128, 4, 4)     73856       dropout_2[0][0]                  
____________________________________________________________________________________________________
leakyrelu_3 (LeakyReLU)          (None, 128, 4, 4)     0           convolution2d_3[0][0]            
____________________________________________________________________________________________________
dropout_3 (Dropout)              (None, 128, 4, 4)     0           leakyrelu_3[0][0]                
____________________________________________________________________________________________________
convolution2d_4 (Convolution2D)  (None, 256, 2, 2)     295168      dropout_3[0][0]                  
____________________________________________________________________________________________________
leakyrelu_4 (LeakyReLU)          (None, 256, 2, 2)     0           convolution2d_4[0][0]            
____________________________________________________________________________________________________
dropout_4 (Dropout)              (None, 256, 2, 2)     0           leakyrelu_4[0][0]                
____________________________________________________________________________________________________
flatten_1 (Flatten)              (None, 1024)          0           dropout_4[0][0]                  
____________________________________________________________________________________________________
dense_1 (Dense)                  (None, 1024)          1049600     flatten_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_5 (LeakyReLU)          (None, 1024)          0           dense_1[0][0]                    
____________________________________________________________________________________________________
dropout_5 (Dropout)              (None, 1024)          0           leakyrelu_5[0][0]                
____________________________________________________________________________________________________
dense_2 (Dense)                  (None, 1)             1025        dropout_5[0][0]                  
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
('Epoch', 1, 'of', 50)
('Number of batches', 19)
('BW_image_batch=', (256, 32, 32))
('Y_gray_antes=', (5000, 1, 32, 32))
('Y_gray=', (5000, 1, 32, 32))
('Y_uv', (5000, 2, 32, 32))
----------------------------------
('Training with dataset based on class - ', 'horse', 'with', 5000, 'samples')
----------------------------------
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_2 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_1 (Sequential)        (None, 1)             0           lambda_1[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_1 (Convolution2D)  (None, 32, 16, 16)    608         convolution2d_input_1[0][0]      
____________________________________________________________________________________________________
leakyrelu_1 (LeakyReLU)          (None, 32, 16, 16)    0           convolution2d_1[0][0]            
____________________________________________________________________________________________________
dropout_1 (Dropout)              (None, 32, 16, 16)    0           leakyrelu_1[0][0]                
____________________________________________________________________________________________________
convolution2d_2 (Convolution2D)  (None, 64, 8, 8)      18496       dropout_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_2 (LeakyReLU)          (None, 64, 8, 8)      0           convolution2d_2[0][0]            
____________________________________________________________________________________________________
dropout_2 (Dropout)              (None, 64, 8, 8)      0           leakyrelu_2[0][0]                
____________________________________________________________________________________________________
convolution2d_3 (Convolution2D)  (None, 128, 4, 4)     73856       dropout_2[0][0]                  
____________________________________________________________________________________________________
leakyrelu_3 (LeakyReLU)          (None, 128, 4, 4)     0           convolution2d_3[0][0]            
____________________________________________________________________________________________________
dropout_3 (Dropout)              (None, 128, 4, 4)     0           leakyrelu_3[0][0]                
____________________________________________________________________________________________________
convolution2d_4 (Convolution2D)  (None, 256, 2, 2)     295168      dropout_3[0][0]                  
____________________________________________________________________________________________________
leakyrelu_4 (LeakyReLU)          (None, 256, 2, 2)     0           convolution2d_4[0][0]            
____________________________________________________________________________________________________
dropout_4 (Dropout)              (None, 256, 2, 2)     0           leakyrelu_4[0][0]                
____________________________________________________________________________________________________
flatten_1 (Flatten)              (None, 1024)          0           dropout_4[0][0]                  
____________________________________________________________________________________________________
dense_1 (Dense)                  (None, 1024)          1049600     flatten_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_5 (LeakyReLU)          (None, 1024)          0           dense_1[0][0]                    
____________________________________________________________________________________________________
dropout_5 (Dropout)              (None, 1024)          0           leakyrelu_5[0][0]                
____________________________________________________________________________________________________
dense_2 (Dense)                  (None, 1)             1025        dropout_5[0][0]                  
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
('Epoch', 1, 'of', 50)
('Number of batches', 19)
('BW_image_batch=', (256, 1, 32, 32))
('GAN loss 1.7907 ', 'GAN acc 0.0039', 'Discriminator loss 0.6959', 'Discriminator accuracy 0.4512', 'Total loss: 2.4866', 'for batch', 0)
('BW_image_batch=', (256, 1, 32, 32))
('GAN loss 2.4968 ', 'GAN acc 0.0000', 'Discriminator loss 0.5411', 'Discriminator accuracy 0.5039', 'Total loss: 3.0378', 'for batch', 1)
('BW_image_batch=', (256, 1, 32, 32))
('GAN loss 2.8437 ', 'GAN acc 0.0000', 'Discriminator loss 0.5048', 'Discriminator accuracy 0.5000', 'Total loss: 3.3484', 'for batch', 2)
('BW_image_batch=', (256, 1, 32, 32))
('Y_gray_antes=', (5000, 1, 32, 32))
('Y_gray=', (5000, 1, 32, 32))
('Y_uv', (5000, 2, 32, 32))
----------------------------------
('Training with dataset based on class - ', 'horse', 'with', 5000, 'samples')
----------------------------------
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_2 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_1 (Sequential)        (None, 1)             0           lambda_1[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_1 (Convolution2D)  (None, 32, 16, 16)    608         convolution2d_input_1[0][0]      
____________________________________________________________________________________________________
leakyrelu_1 (LeakyReLU)          (None, 32, 16, 16)    0           convolution2d_1[0][0]            
____________________________________________________________________________________________________
dropout_1 (Dropout)              (None, 32, 16, 16)    0           leakyrelu_1[0][0]                
____________________________________________________________________________________________________
convolution2d_2 (Convolution2D)  (None, 64, 8, 8)      18496       dropout_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_2 (LeakyReLU)          (None, 64, 8, 8)      0           convolution2d_2[0][0]            
____________________________________________________________________________________________________
dropout_2 (Dropout)              (None, 64, 8, 8)      0           leakyrelu_2[0][0]                
____________________________________________________________________________________________________
convolution2d_3 (Convolution2D)  (None, 128, 4, 4)     73856       dropout_2[0][0]                  
____________________________________________________________________________________________________
leakyrelu_3 (LeakyReLU)          (None, 128, 4, 4)     0           convolution2d_3[0][0]            
____________________________________________________________________________________________________
dropout_3 (Dropout)              (None, 128, 4, 4)     0           leakyrelu_3[0][0]                
____________________________________________________________________________________________________
convolution2d_4 (Convolution2D)  (None, 256, 2, 2)     295168      dropout_3[0][0]                  
____________________________________________________________________________________________________
leakyrelu_4 (LeakyReLU)          (None, 256, 2, 2)     0           convolution2d_4[0][0]            
____________________________________________________________________________________________________
dropout_4 (Dropout)              (None, 256, 2, 2)     0           leakyrelu_4[0][0]                
____________________________________________________________________________________________________
flatten_1 (Flatten)              (None, 1024)          0           dropout_4[0][0]                  
____________________________________________________________________________________________________
dense_1 (Dense)                  (None, 1024)          1049600     flatten_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_5 (LeakyReLU)          (None, 1024)          0           dense_1[0][0]                    
____________________________________________________________________________________________________
dropout_5 (Dropout)              (None, 1024)          0           leakyrelu_5[0][0]                
____________________________________________________________________________________________________
dense_2 (Dense)                  (None, 1)             1025        dropout_5[0][0]                  
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
('Epoch', 1, 'of', 50)
('Number of batches', 19)
('BW_image_batch=', (256, 1, 32, 32))
----------------------------------
('Training with dataset based on class - ', 'horse', 'with', 5000, 'samples')
----------------------------------
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_2 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_1 (Sequential)        (None, 1)             0           lambda_1[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_1 (Convolution2D)  (None, 32, 16, 16)    608         convolution2d_input_1[0][0]      
____________________________________________________________________________________________________
leakyrelu_1 (LeakyReLU)          (None, 32, 16, 16)    0           convolution2d_1[0][0]            
____________________________________________________________________________________________________
dropout_1 (Dropout)              (None, 32, 16, 16)    0           leakyrelu_1[0][0]                
____________________________________________________________________________________________________
convolution2d_2 (Convolution2D)  (None, 64, 8, 8)      18496       dropout_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_2 (LeakyReLU)          (None, 64, 8, 8)      0           convolution2d_2[0][0]            
____________________________________________________________________________________________________
dropout_2 (Dropout)              (None, 64, 8, 8)      0           leakyrelu_2[0][0]                
____________________________________________________________________________________________________
convolution2d_3 (Convolution2D)  (None, 128, 4, 4)     73856       dropout_2[0][0]                  
____________________________________________________________________________________________________
leakyrelu_3 (LeakyReLU)          (None, 128, 4, 4)     0           convolution2d_3[0][0]            
____________________________________________________________________________________________________
dropout_3 (Dropout)              (None, 128, 4, 4)     0           leakyrelu_3[0][0]                
____________________________________________________________________________________________________
convolution2d_4 (Convolution2D)  (None, 256, 2, 2)     295168      dropout_3[0][0]                  
____________________________________________________________________________________________________
leakyrelu_4 (LeakyReLU)          (None, 256, 2, 2)     0           convolution2d_4[0][0]            
____________________________________________________________________________________________________
dropout_4 (Dropout)              (None, 256, 2, 2)     0           leakyrelu_4[0][0]                
____________________________________________________________________________________________________
flatten_1 (Flatten)              (None, 1024)          0           dropout_4[0][0]                  
____________________________________________________________________________________________________
dense_1 (Dense)                  (None, 1024)          1049600     flatten_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_5 (LeakyReLU)          (None, 1024)          0           dense_1[0][0]                    
____________________________________________________________________________________________________
dropout_5 (Dropout)              (None, 1024)          0           leakyrelu_5[0][0]                
____________________________________________________________________________________________________
dense_2 (Dense)                  (None, 1)             1025        dropout_5[0][0]                  
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
('Epoch', 1, 'of', 50)
('Number of batches', 19)
('GAN loss 1.7907 ', 'GAN acc 0.0039', 'Discriminator loss 0.6959', 'Discriminator accuracy 0.4512', 'Total loss: 2.4867', 'for batch', 0)
('GAN loss 2.4971 ', 'GAN acc 0.0000', 'Discriminator loss 0.5411', 'Discriminator accuracy 0.5039', 'Total loss: 3.0381', 'for batch', 1)
('GAN loss 2.8356 ', 'GAN acc 0.0000', 'Discriminator loss 0.5051', 'Discriminator accuracy 0.5000', 'Total loss: 3.3408', 'for batch', 2)
('GAN loss 2.9165 ', 'GAN acc 0.0000', 'Discriminator loss 0.4784', 'Discriminator accuracy 0.5059', 'Total loss: 3.3949', 'for batch', 3)
('GAN loss 2.7208 ', 'GAN acc 0.0000', 'Discriminator loss 0.4856', 'Discriminator accuracy 0.5059', 'Total loss: 3.2064', 'for batch', 4)
('GAN loss 2.4343 ', 'GAN acc 0.0000', 'Discriminator loss 0.4676', 'Discriminator accuracy 0.5820', 'Total loss: 2.9019', 'for batch', 5)
('GAN loss 2.1460 ', 'GAN acc 0.0000', 'Discriminator loss 0.4460', 'Discriminator accuracy 0.7324', 'Total loss: 2.5919', 'for batch', 6)
('GAN loss 2.0600 ', 'GAN acc 0.0000', 'Discriminator loss 0.4371', 'Discriminator accuracy 0.8477', 'Total loss: 2.4971', 'for batch', 7)
('GAN loss 2.1461 ', 'GAN acc 0.0000', 'Discriminator loss 0.3938', 'Discriminator accuracy 0.9453', 'Total loss: 2.5400', 'for batch', 8)
('GAN loss 2.3543 ', 'GAN acc 0.0000', 'Discriminator loss 0.3344', 'Discriminator accuracy 0.9707', 'Total loss: 2.6887', 'for batch', 9)
('GAN loss 2.5905 ', 'GAN acc 0.0000', 'Discriminator loss 0.2936', 'Discriminator accuracy 0.9727', 'Total loss: 2.8841', 'for batch', 10)
('GAN loss 2.7068 ', 'GAN acc 0.0000', 'Discriminator loss 0.2507', 'Discriminator accuracy 0.9902', 'Total loss: 2.9576', 'for batch', 11)
('GAN loss 2.9839 ', 'GAN acc 0.0039', 'Discriminator loss 0.1905', 'Discriminator accuracy 0.9883', 'Total loss: 3.1744', 'for batch', 12)
('GAN loss 3.1318 ', 'GAN acc 0.0039', 'Discriminator loss 0.1766', 'Discriminator accuracy 0.9883', 'Total loss: 3.3083', 'for batch', 13)
('GAN loss 3.8473 ', 'GAN acc 0.0156', 'Discriminator loss 0.2023', 'Discriminator accuracy 0.9590', 'Total loss: 4.0497', 'for batch', 14)
('GAN loss 4.8145 ', 'GAN acc 0.0000', 'Discriminator loss 0.1737', 'Discriminator accuracy 0.9824', 'Total loss: 4.9883', 'for batch', 15)
('GAN loss 4.7863 ', 'GAN acc 0.0000', 'Discriminator loss 0.1370', 'Discriminator accuracy 0.9961', 'Total loss: 4.9233', 'for batch', 16)
('GAN loss 4.9403 ', 'GAN acc 0.0078', 'Discriminator loss 0.1251', 'Discriminator accuracy 0.9824', 'Total loss: 5.0654', 'for batch', 17)
('GAN loss 3.2605 ', 'GAN acc 0.0547', 'Discriminator loss 0.1394', 'Discriminator accuracy 0.9746', 'Total loss: 3.3998', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9033848)
('DISCRIMINATOR_Imagem FAKE=', 0.18568394)
('Discriminator trained', 10, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:36.215874')
----------------------------------
('Epoch', 2, 'of', 50)
('Number of batches', 19)
('GAN loss 2.8816 ', 'GAN acc 0.1250', 'Discriminator loss 0.1713', 'Discriminator accuracy 0.9297', 'Total loss: 3.0528', 'for batch', 0)
('GAN loss 2.5517 ', 'GAN acc 0.2578', 'Discriminator loss 0.2492', 'Discriminator accuracy 0.8379', 'Total loss: 2.8008', 'for batch', 1)
('GAN loss 1.8616 ', 'GAN acc 0.4805', 'Discriminator loss 0.3530', 'Discriminator accuracy 0.7363', 'Total loss: 2.2146', 'for batch', 2)
('GAN loss 0.8039 ', 'GAN acc 0.5508', 'Discriminator loss 0.4878', 'Discriminator accuracy 0.5977', 'Total loss: 1.2917', 'for batch', 3)
('GAN loss 0.7119 ', 'GAN acc 0.5117', 'Discriminator loss 0.4860', 'Discriminator accuracy 0.5762', 'Total loss: 1.1979', 'for batch', 4)
('GAN loss 0.6948 ', 'GAN acc 0.5938', 'Discriminator loss 0.5048', 'Discriminator accuracy 0.5508', 'Total loss: 1.1996', 'for batch', 5)
('GAN loss 0.7464 ', 'GAN acc 0.1562', 'Discriminator loss 0.4811', 'Discriminator accuracy 0.5879', 'Total loss: 1.2275', 'for batch', 6)
('GAN loss 0.8124 ', 'GAN acc 0.0000', 'Discriminator loss 0.4443', 'Discriminator accuracy 0.8359', 'Total loss: 1.2567', 'for batch', 7)
('GAN loss 0.8942 ', 'GAN acc 0.0000', 'Discriminator loss 0.3840', 'Discriminator accuracy 0.9746', 'Total loss: 1.2782', 'for batch', 8)
('GAN loss 0.9959 ', 'GAN acc 0.0000', 'Discriminator loss 0.3409', 'Discriminator accuracy 0.9707', 'Total loss: 1.3367', 'for batch', 9)
('GAN loss 1.1240 ', 'GAN acc 0.0000', 'Discriminator loss 0.3183', 'Discriminator accuracy 0.9629', 'Total loss: 1.4423', 'for batch', 10)
('GAN loss 1.2710 ', 'GAN acc 0.0000', 'Discriminator loss 0.2744', 'Discriminator accuracy 0.9629', 'Total loss: 1.5454', 'for batch', 11)
('GAN loss 1.4631 ', 'GAN acc 0.0000', 'Discriminator loss 0.2201', 'Discriminator accuracy 0.9824', 'Total loss: 1.6832', 'for batch', 12)
('GAN loss 1.7047 ', 'GAN acc 0.0000', 'Discriminator loss 0.1902', 'Discriminator accuracy 0.9766', 'Total loss: 1.8948', 'for batch', 13)
('GAN loss 1.9002 ', 'GAN acc 0.0000', 'Discriminator loss 0.1783', 'Discriminator accuracy 0.9648', 'Total loss: 2.0785', 'for batch', 14)
('GAN loss 2.9520 ', 'GAN acc 0.0039', 'Discriminator loss 0.3924', 'Discriminator accuracy 0.8555', 'Total loss: 3.3444', 'for batch', 15)
('GAN loss 2.7984 ', 'GAN acc 0.0000', 'Discriminator loss 0.1585', 'Discriminator accuracy 0.9355', 'Total loss: 2.9568', 'for batch', 16)
('GAN loss 2.6945 ', 'GAN acc 0.0000', 'Discriminator loss 0.2213', 'Discriminator accuracy 0.9102', 'Total loss: 2.9159', 'for batch', 17)
('GAN loss 2.5115 ', 'GAN acc 0.0000', 'Discriminator loss 0.1705', 'Discriminator accuracy 0.9355', 'Total loss: 2.6819', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.90154296)
('DISCRIMINATOR_Imagem FAKE=', 0.080515958)
('Discriminator trained', 11, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.567654')
----------------------------------
('Epoch', 3, 'of', 50)
('Number of batches', 19)
('GAN loss 2.4397 ', 'GAN acc 0.0000', 'Discriminator loss 0.1319', 'Discriminator accuracy 0.9648', 'Total loss: 2.5716', 'for batch', 0)
('GAN loss 2.2515 ', 'GAN acc 0.0000', 'Discriminator loss 0.1680', 'Discriminator accuracy 0.9395', 'Total loss: 2.4194', 'for batch', 1)
('GAN loss 2.4197 ', 'GAN acc 0.0000', 'Discriminator loss 0.0990', 'Discriminator accuracy 0.9902', 'Total loss: 2.5187', 'for batch', 2)
('GAN loss 2.5174 ', 'GAN acc 0.0000', 'Discriminator loss 0.1489', 'Discriminator accuracy 0.9512', 'Total loss: 2.6663', 'for batch', 3)
('GAN loss 2.6422 ', 'GAN acc 0.0000', 'Discriminator loss 0.1040', 'Discriminator accuracy 0.9805', 'Total loss: 2.7462', 'for batch', 4)
('GAN loss 2.7411 ', 'GAN acc 0.0000', 'Discriminator loss 0.1421', 'Discriminator accuracy 0.9590', 'Total loss: 2.8832', 'for batch', 5)
('GAN loss 2.8036 ', 'GAN acc 0.0000', 'Discriminator loss 0.1114', 'Discriminator accuracy 0.9727', 'Total loss: 2.9150', 'for batch', 6)
('GAN loss 2.9557 ', 'GAN acc 0.0000', 'Discriminator loss 0.1117', 'Discriminator accuracy 0.9785', 'Total loss: 3.0674', 'for batch', 7)
('GAN loss 3.4703 ', 'GAN acc 0.0000', 'Discriminator loss 0.1192', 'Discriminator accuracy 0.9727', 'Total loss: 3.5894', 'for batch', 8)
('GAN loss 3.3475 ', 'GAN acc 0.0000', 'Discriminator loss 0.1048', 'Discriminator accuracy 0.9609', 'Total loss: 3.4523', 'for batch', 9)
('GAN loss 3.0179 ', 'GAN acc 0.0000', 'Discriminator loss 0.1383', 'Discriminator accuracy 0.9551', 'Total loss: 3.1562', 'for batch', 10)
('GAN loss 2.6894 ', 'GAN acc 0.0000', 'Discriminator loss 0.1167', 'Discriminator accuracy 0.9629', 'Total loss: 2.8060', 'for batch', 11)
('GAN loss 3.1878 ', 'GAN acc 0.0000', 'Discriminator loss 0.0863', 'Discriminator accuracy 0.9844', 'Total loss: 3.2741', 'for batch', 12)
('GAN loss 3.1929 ', 'GAN acc 0.0000', 'Discriminator loss 0.0762', 'Discriminator accuracy 0.9824', 'Total loss: 3.2691', 'for batch', 13)
('GAN loss 3.1824 ', 'GAN acc 0.0000', 'Discriminator loss 0.1122', 'Discriminator accuracy 0.9688', 'Total loss: 3.2947', 'for batch', 14)
('GAN loss 2.9960 ', 'GAN acc 0.0000', 'Discriminator loss 0.1403', 'Discriminator accuracy 0.9668', 'Total loss: 3.1363', 'for batch', 15)
('GAN loss 2.9086 ', 'GAN acc 0.0000', 'Discriminator loss 0.0769', 'Discriminator accuracy 0.9824', 'Total loss: 2.9855', 'for batch', 16)
('GAN loss 2.9609 ', 'GAN acc 0.0000', 'Discriminator loss 0.0980', 'Discriminator accuracy 0.9746', 'Total loss: 3.0589', 'for batch', 17)
('GAN loss 3.1212 ', 'GAN acc 0.0000', 'Discriminator loss 0.0819', 'Discriminator accuracy 0.9824', 'Total loss: 3.2031', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.95597982)
('DISCRIMINATOR_Imagem FAKE=', 0.064622954)
('Discriminator trained', 2, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.175697')
----------------------------------
('Epoch', 4, 'of', 50)
('Number of batches', 19)
('GAN loss 3.3054 ', 'GAN acc 0.0000', 'Discriminator loss 0.0961', 'Discriminator accuracy 0.9805', 'Total loss: 3.4014', 'for batch', 0)
('GAN loss 2.9980 ', 'GAN acc 0.0000', 'Discriminator loss 0.1119', 'Discriminator accuracy 0.9629', 'Total loss: 3.1099', 'for batch', 1)
('GAN loss 5.3167 ', 'GAN acc 0.0000', 'Discriminator loss 0.0701', 'Discriminator accuracy 0.9844', 'Total loss: 5.3868', 'for batch', 2)
('GAN loss 3.8233 ', 'GAN acc 0.0000', 'Discriminator loss 0.1072', 'Discriminator accuracy 0.9629', 'Total loss: 3.9305', 'for batch', 3)
('GAN loss 3.3405 ', 'GAN acc 0.0000', 'Discriminator loss 0.0749', 'Discriminator accuracy 0.9707', 'Total loss: 3.4154', 'for batch', 4)
('GAN loss 2.8587 ', 'GAN acc 0.0000', 'Discriminator loss 0.0989', 'Discriminator accuracy 0.9668', 'Total loss: 2.9576', 'for batch', 5)
('GAN loss 3.1727 ', 'GAN acc 0.0000', 'Discriminator loss 0.0695', 'Discriminator accuracy 0.9941', 'Total loss: 3.2422', 'for batch', 6)
('GAN loss 3.4395 ', 'GAN acc 0.0000', 'Discriminator loss 0.0669', 'Discriminator accuracy 0.9863', 'Total loss: 3.5064', 'for batch', 7)
('GAN loss 3.4782 ', 'GAN acc 0.0000', 'Discriminator loss 0.0727', 'Discriminator accuracy 0.9824', 'Total loss: 3.5509', 'for batch', 8)
('GAN loss 3.4627 ', 'GAN acc 0.0000', 'Discriminator loss 0.0640', 'Discriminator accuracy 0.9844', 'Total loss: 3.5267', 'for batch', 9)
('GAN loss 3.3582 ', 'GAN acc 0.0000', 'Discriminator loss 0.0975', 'Discriminator accuracy 0.9785', 'Total loss: 3.4557', 'for batch', 10)
('GAN loss 3.2405 ', 'GAN acc 0.0000', 'Discriminator loss 0.0967', 'Discriminator accuracy 0.9785', 'Total loss: 3.3372', 'for batch', 11)
('GAN loss 3.6013 ', 'GAN acc 0.0000', 'Discriminator loss 0.0635', 'Discriminator accuracy 0.9922', 'Total loss: 3.6649', 'for batch', 12)
('GAN loss 3.7385 ', 'GAN acc 0.0000', 'Discriminator loss 0.0481', 'Discriminator accuracy 0.9883', 'Total loss: 3.7865', 'for batch', 13)
('GAN loss 3.6393 ', 'GAN acc 0.0000', 'Discriminator loss 0.0944', 'Discriminator accuracy 0.9766', 'Total loss: 3.7337', 'for batch', 14)
('GAN loss 3.2564 ', 'GAN acc 0.0000', 'Discriminator loss 0.1268', 'Discriminator accuracy 0.9727', 'Total loss: 3.3832', 'for batch', 15)
('GAN loss 3.2619 ', 'GAN acc 0.0000', 'Discriminator loss 0.0718', 'Discriminator accuracy 0.9844', 'Total loss: 3.3337', 'for batch', 16)
('GAN loss 3.3066 ', 'GAN acc 0.0000', 'Discriminator loss 0.0849', 'Discriminator accuracy 0.9824', 'Total loss: 3.3915', 'for batch', 17)
('GAN loss 3.4190 ', 'GAN acc 0.0000', 'Discriminator loss 0.0619', 'Discriminator accuracy 0.9863', 'Total loss: 3.4809', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96853042)
('DISCRIMINATOR_Imagem FAKE=', 0.043241501)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.753569')
----------------------------------
('Epoch', 5, 'of', 50)
('Number of batches', 19)
('GAN loss 3.4181 ', 'GAN acc 0.0000', 'Discriminator loss 0.0702', 'Discriminator accuracy 0.9844', 'Total loss: 3.4882', 'for batch', 0)
('GAN loss 3.2290 ', 'GAN acc 0.0000', 'Discriminator loss 0.0847', 'Discriminator accuracy 0.9766', 'Total loss: 3.3138', 'for batch', 1)
('GAN loss 3.5637 ', 'GAN acc 0.0000', 'Discriminator loss 0.0419', 'Discriminator accuracy 0.9922', 'Total loss: 3.6055', 'for batch', 2)
('GAN loss 3.7330 ', 'GAN acc 0.0000', 'Discriminator loss 0.0876', 'Discriminator accuracy 0.9746', 'Total loss: 3.8206', 'for batch', 3)
('GAN loss 3.5728 ', 'GAN acc 0.0000', 'Discriminator loss 0.0501', 'Discriminator accuracy 0.9785', 'Total loss: 3.6229', 'for batch', 4)
('GAN loss 3.1806 ', 'GAN acc 0.0000', 'Discriminator loss 0.0843', 'Discriminator accuracy 0.9805', 'Total loss: 3.2649', 'for batch', 5)
('GAN loss 3.4599 ', 'GAN acc 0.0000', 'Discriminator loss 0.0565', 'Discriminator accuracy 0.9941', 'Total loss: 3.5164', 'for batch', 6)
('GAN loss 4.0225 ', 'GAN acc 0.0000', 'Discriminator loss 0.0625', 'Discriminator accuracy 0.9863', 'Total loss: 4.0850', 'for batch', 7)
('GAN loss 3.9675 ', 'GAN acc 0.0000', 'Discriminator loss 0.0677', 'Discriminator accuracy 0.9805', 'Total loss: 4.0352', 'for batch', 8)
('GAN loss 4.0159 ', 'GAN acc 0.0000', 'Discriminator loss 0.0592', 'Discriminator accuracy 0.9863', 'Total loss: 4.0751', 'for batch', 9)
('GAN loss 3.3210 ', 'GAN acc 0.0000', 'Discriminator loss 0.0974', 'Discriminator accuracy 0.9766', 'Total loss: 3.4184', 'for batch', 10)
('GAN loss 3.3537 ', 'GAN acc 0.0000', 'Discriminator loss 0.0798', 'Discriminator accuracy 0.9785', 'Total loss: 3.4334', 'for batch', 11)
('GAN loss 3.7034 ', 'GAN acc 0.0000', 'Discriminator loss 0.0564', 'Discriminator accuracy 0.9922', 'Total loss: 3.7598', 'for batch', 12)
('GAN loss 3.9993 ', 'GAN acc 0.0000', 'Discriminator loss 0.0414', 'Discriminator accuracy 0.9922', 'Total loss: 4.0407', 'for batch', 13)
('GAN loss 3.6518 ', 'GAN acc 0.0000', 'Discriminator loss 0.0947', 'Discriminator accuracy 0.9766', 'Total loss: 3.7465', 'for batch', 14)
('GAN loss 3.2216 ', 'GAN acc 0.0000', 'Discriminator loss 0.1164', 'Discriminator accuracy 0.9746', 'Total loss: 3.3379', 'for batch', 15)
('GAN loss 3.2019 ', 'GAN acc 0.0000', 'Discriminator loss 0.0620', 'Discriminator accuracy 0.9863', 'Total loss: 3.2639', 'for batch', 16)
('GAN loss 3.4879 ', 'GAN acc 0.0000', 'Discriminator loss 0.0738', 'Discriminator accuracy 0.9863', 'Total loss: 3.5618', 'for batch', 17)
('GAN loss 3.8116 ', 'GAN acc 0.0000', 'Discriminator loss 0.0579', 'Discriminator accuracy 0.9863', 'Total loss: 3.8695', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97356158)
('DISCRIMINATOR_Imagem FAKE=', 0.020289069)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.328736')
----------------------------------
('Epoch', 6, 'of', 50)
('Number of batches', 19)
('GAN loss 3.8792 ', 'GAN acc 0.0000', 'Discriminator loss 0.0718', 'Discriminator accuracy 0.9824', 'Total loss: 3.9510', 'for batch', 0)
('GAN loss 3.2674 ', 'GAN acc 0.0000', 'Discriminator loss 0.0734', 'Discriminator accuracy 0.9785', 'Total loss: 3.3407', 'for batch', 1)
('GAN loss 4.8382 ', 'GAN acc 0.0000', 'Discriminator loss 0.0452', 'Discriminator accuracy 0.9941', 'Total loss: 4.8834', 'for batch', 2)
('GAN loss 3.9675 ', 'GAN acc 0.0000', 'Discriminator loss 0.0819', 'Discriminator accuracy 0.9746', 'Total loss: 4.0494', 'for batch', 3)
('GAN loss 3.6837 ', 'GAN acc 0.0000', 'Discriminator loss 0.0451', 'Discriminator accuracy 0.9863', 'Total loss: 3.7288', 'for batch', 4)
('GAN loss 3.2453 ', 'GAN acc 0.0000', 'Discriminator loss 0.0790', 'Discriminator accuracy 0.9824', 'Total loss: 3.3243', 'for batch', 5)
('GAN loss 3.8135 ', 'GAN acc 0.0000', 'Discriminator loss 0.0498', 'Discriminator accuracy 0.9941', 'Total loss: 3.8633', 'for batch', 6)
('GAN loss 4.1661 ', 'GAN acc 0.0000', 'Discriminator loss 0.0481', 'Discriminator accuracy 0.9922', 'Total loss: 4.2142', 'for batch', 7)
('GAN loss 4.0279 ', 'GAN acc 0.0000', 'Discriminator loss 0.0568', 'Discriminator accuracy 0.9863', 'Total loss: 4.0847', 'for batch', 8)
('GAN loss 3.9290 ', 'GAN acc 0.0000', 'Discriminator loss 0.0477', 'Discriminator accuracy 0.9922', 'Total loss: 3.9767', 'for batch', 9)
('GAN loss 3.8153 ', 'GAN acc 0.0000', 'Discriminator loss 0.0836', 'Discriminator accuracy 0.9863', 'Total loss: 3.8989', 'for batch', 10)
('GAN loss 3.8367 ', 'GAN acc 0.0000', 'Discriminator loss 0.0664', 'Discriminator accuracy 0.9785', 'Total loss: 3.9031', 'for batch', 11)
('GAN loss 3.8995 ', 'GAN acc 0.0000', 'Discriminator loss 0.0441', 'Discriminator accuracy 0.9922', 'Total loss: 3.9436', 'for batch', 12)
('GAN loss 4.1345 ', 'GAN acc 0.0000', 'Discriminator loss 0.0297', 'Discriminator accuracy 0.9941', 'Total loss: 4.1642', 'for batch', 13)
('GAN loss 3.9812 ', 'GAN acc 0.0000', 'Discriminator loss 0.0754', 'Discriminator accuracy 0.9824', 'Total loss: 4.0566', 'for batch', 14)
('GAN loss 3.4422 ', 'GAN acc 0.0000', 'Discriminator loss 0.1110', 'Discriminator accuracy 0.9785', 'Total loss: 3.5533', 'for batch', 15)
('GAN loss 3.7352 ', 'GAN acc 0.0000', 'Discriminator loss 0.0562', 'Discriminator accuracy 0.9902', 'Total loss: 3.7914', 'for batch', 16)
('GAN loss 3.8641 ', 'GAN acc 0.0000', 'Discriminator loss 0.0515', 'Discriminator accuracy 0.9902', 'Total loss: 3.9156', 'for batch', 17)
('GAN loss 4.1930 ', 'GAN acc 0.0000', 'Discriminator loss 0.0549', 'Discriminator accuracy 0.9883', 'Total loss: 4.2479', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97809547)
('DISCRIMINATOR_Imagem FAKE=', 0.030208608)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.882614')
----------------------------------
('Epoch', 7, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1928 ', 'GAN acc 0.0000', 'Discriminator loss 0.0613', 'Discriminator accuracy 0.9844', 'Total loss: 4.2541', 'for batch', 0)
('GAN loss 3.5903 ', 'GAN acc 0.0000', 'Discriminator loss 0.0685', 'Discriminator accuracy 0.9785', 'Total loss: 3.6588', 'for batch', 1)
('GAN loss 4.6384 ', 'GAN acc 0.0000', 'Discriminator loss 0.0215', 'Discriminator accuracy 0.9922', 'Total loss: 4.6600', 'for batch', 2)
('GAN loss 4.4654 ', 'GAN acc 0.0000', 'Discriminator loss 0.0535', 'Discriminator accuracy 0.9863', 'Total loss: 4.5188', 'for batch', 3)
('GAN loss 3.8557 ', 'GAN acc 0.0000', 'Discriminator loss 0.0300', 'Discriminator accuracy 0.9922', 'Total loss: 3.8856', 'for batch', 4)
('GAN loss 3.9608 ', 'GAN acc 0.0000', 'Discriminator loss 0.0709', 'Discriminator accuracy 0.9824', 'Total loss: 4.0317', 'for batch', 5)
('GAN loss 3.9568 ', 'GAN acc 0.0000', 'Discriminator loss 0.0431', 'Discriminator accuracy 0.9941', 'Total loss: 3.9999', 'for batch', 6)
('GAN loss 4.1689 ', 'GAN acc 0.0000', 'Discriminator loss 0.0427', 'Discriminator accuracy 0.9922', 'Total loss: 4.2116', 'for batch', 7)
('GAN loss 3.9772 ', 'GAN acc 0.0000', 'Discriminator loss 0.0551', 'Discriminator accuracy 0.9883', 'Total loss: 4.0323', 'for batch', 8)
('GAN loss 4.8307 ', 'GAN acc 0.0000', 'Discriminator loss 0.0449', 'Discriminator accuracy 0.9941', 'Total loss: 4.8756', 'for batch', 9)
('GAN loss 4.0306 ', 'GAN acc 0.0000', 'Discriminator loss 0.0785', 'Discriminator accuracy 0.9844', 'Total loss: 4.1091', 'for batch', 10)
('GAN loss 3.4783 ', 'GAN acc 0.0000', 'Discriminator loss 0.0559', 'Discriminator accuracy 0.9824', 'Total loss: 3.5341', 'for batch', 11)
('GAN loss 3.8851 ', 'GAN acc 0.0000', 'Discriminator loss 0.0397', 'Discriminator accuracy 0.9922', 'Total loss: 3.9248', 'for batch', 12)
('GAN loss 4.3578 ', 'GAN acc 0.0000', 'Discriminator loss 0.0249', 'Discriminator accuracy 0.9961', 'Total loss: 4.3827', 'for batch', 13)
('GAN loss 4.2069 ', 'GAN acc 0.0000', 'Discriminator loss 0.0687', 'Discriminator accuracy 0.9824', 'Total loss: 4.2756', 'for batch', 14)
('GAN loss 4.0295 ', 'GAN acc 0.0000', 'Discriminator loss 0.1004', 'Discriminator accuracy 0.9824', 'Total loss: 4.1299', 'for batch', 15)
('GAN loss 3.7990 ', 'GAN acc 0.0000', 'Discriminator loss 0.0525', 'Discriminator accuracy 0.9922', 'Total loss: 3.8515', 'for batch', 16)
('GAN loss 4.5407 ', 'GAN acc 0.0000', 'Discriminator loss 0.0537', 'Discriminator accuracy 0.9883', 'Total loss: 4.5943', 'for batch', 17)
('GAN loss 4.5402 ', 'GAN acc 0.0000', 'Discriminator loss 0.0454', 'Discriminator accuracy 0.9883', 'Total loss: 4.5856', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98128706)
('DISCRIMINATOR_Imagem FAKE=', 0.015032627)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.863672')
----------------------------------
('Epoch', 8, 'of', 50)
('Number of batches', 19)
('GAN loss 4.7026 ', 'GAN acc 0.0000', 'Discriminator loss 0.0564', 'Discriminator accuracy 0.9883', 'Total loss: 4.7590', 'for batch', 0)
('GAN loss 5.1586 ', 'GAN acc 0.0000', 'Discriminator loss 0.0590', 'Discriminator accuracy 0.9863', 'Total loss: 5.2176', 'for batch', 1)
('GAN loss 5.0708 ', 'GAN acc 0.0000', 'Discriminator loss 0.0187', 'Discriminator accuracy 0.9941', 'Total loss: 5.0895', 'for batch', 2)
('GAN loss 7.7663 ', 'GAN acc 0.0000', 'Discriminator loss 0.1381', 'Discriminator accuracy 0.9609', 'Total loss: 7.9043', 'for batch', 3)
('GAN loss 5.6081 ', 'GAN acc 0.0000', 'Discriminator loss 0.0560', 'Discriminator accuracy 0.9805', 'Total loss: 5.6641', 'for batch', 4)
('GAN loss 4.9308 ', 'GAN acc 0.0000', 'Discriminator loss 0.1232', 'Discriminator accuracy 0.9648', 'Total loss: 5.0540', 'for batch', 5)
('GAN loss 3.4550 ', 'GAN acc 0.0000', 'Discriminator loss 0.0491', 'Discriminator accuracy 0.9922', 'Total loss: 3.5041', 'for batch', 6)
('GAN loss 3.7153 ', 'GAN acc 0.0000', 'Discriminator loss 0.0581', 'Discriminator accuracy 0.9922', 'Total loss: 3.7734', 'for batch', 7)
('GAN loss 3.7117 ', 'GAN acc 0.0000', 'Discriminator loss 0.0525', 'Discriminator accuracy 0.9883', 'Total loss: 3.7642', 'for batch', 8)
('GAN loss 4.0712 ', 'GAN acc 0.0000', 'Discriminator loss 0.0771', 'Discriminator accuracy 0.9922', 'Total loss: 4.1483', 'for batch', 9)
('GAN loss 4.2341 ', 'GAN acc 0.0000', 'Discriminator loss 0.0997', 'Discriminator accuracy 0.9785', 'Total loss: 4.3338', 'for batch', 10)
('GAN loss 6.8279 ', 'GAN acc 0.0000', 'Discriminator loss 0.0718', 'Discriminator accuracy 0.9766', 'Total loss: 6.8997', 'for batch', 11)
('GAN loss 3.5649 ', 'GAN acc 0.0000', 'Discriminator loss 0.0496', 'Discriminator accuracy 0.9922', 'Total loss: 3.6145', 'for batch', 12)
('GAN loss 3.8454 ', 'GAN acc 0.0000', 'Discriminator loss 0.0346', 'Discriminator accuracy 0.9922', 'Total loss: 3.8799', 'for batch', 13)
('GAN loss 3.6162 ', 'GAN acc 0.0000', 'Discriminator loss 0.0781', 'Discriminator accuracy 0.9805', 'Total loss: 3.6944', 'for batch', 14)
('GAN loss 3.3692 ', 'GAN acc 0.0000', 'Discriminator loss 0.0929', 'Discriminator accuracy 0.9844', 'Total loss: 3.4621', 'for batch', 15)
('GAN loss 3.6260 ', 'GAN acc 0.0000', 'Discriminator loss 0.0489', 'Discriminator accuracy 0.9902', 'Total loss: 3.6750', 'for batch', 16)
('GAN loss 3.8949 ', 'GAN acc 0.0000', 'Discriminator loss 0.0446', 'Discriminator accuracy 0.9883', 'Total loss: 3.9395', 'for batch', 17)
('GAN loss 4.0473 ', 'GAN acc 0.0000', 'Discriminator loss 0.0378', 'Discriminator accuracy 0.9922', 'Total loss: 4.0851', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98629063)
('DISCRIMINATOR_Imagem FAKE=', 0.016082408)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.433603')
----------------------------------
('Epoch', 9, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2513 ', 'GAN acc 0.0000', 'Discriminator loss 0.0368', 'Discriminator accuracy 0.9922', 'Total loss: 4.2882', 'for batch', 0)
('GAN loss 4.1894 ', 'GAN acc 0.0000', 'Discriminator loss 0.0408', 'Discriminator accuracy 0.9922', 'Total loss: 4.2301', 'for batch', 1)
('GAN loss 4.3552 ', 'GAN acc 0.0000', 'Discriminator loss 0.0120', 'Discriminator accuracy 0.9980', 'Total loss: 4.3671', 'for batch', 2)
('GAN loss 4.1418 ', 'GAN acc 0.0000', 'Discriminator loss 0.0352', 'Discriminator accuracy 0.9883', 'Total loss: 4.1770', 'for batch', 3)
('GAN loss 4.3073 ', 'GAN acc 0.0000', 'Discriminator loss 0.0142', 'Discriminator accuracy 0.9980', 'Total loss: 4.3215', 'for batch', 4)
('GAN loss 3.8810 ', 'GAN acc 0.0000', 'Discriminator loss 0.0560', 'Discriminator accuracy 0.9844', 'Total loss: 3.9371', 'for batch', 5)
('GAN loss 4.3656 ', 'GAN acc 0.0000', 'Discriminator loss 0.0245', 'Discriminator accuracy 0.9961', 'Total loss: 4.3902', 'for batch', 6)
('GAN loss 4.7083 ', 'GAN acc 0.0000', 'Discriminator loss 0.0228', 'Discriminator accuracy 0.9961', 'Total loss: 4.7311', 'for batch', 7)
('GAN loss 4.5802 ', 'GAN acc 0.0000', 'Discriminator loss 0.0485', 'Discriminator accuracy 0.9902', 'Total loss: 4.6287', 'for batch', 8)
('GAN loss 4.5492 ', 'GAN acc 0.0000', 'Discriminator loss 0.0284', 'Discriminator accuracy 0.9941', 'Total loss: 4.5776', 'for batch', 9)
('GAN loss 4.2550 ', 'GAN acc 0.0000', 'Discriminator loss 0.0579', 'Discriminator accuracy 0.9883', 'Total loss: 4.3129', 'for batch', 10)
('GAN loss 3.9275 ', 'GAN acc 0.0000', 'Discriminator loss 0.0468', 'Discriminator accuracy 0.9883', 'Total loss: 3.9742', 'for batch', 11)
('GAN loss 4.1053 ', 'GAN acc 0.0000', 'Discriminator loss 0.0337', 'Discriminator accuracy 0.9941', 'Total loss: 4.1390', 'for batch', 12)
('GAN loss 4.5479 ', 'GAN acc 0.0000', 'Discriminator loss 0.0188', 'Discriminator accuracy 0.9980', 'Total loss: 4.5667', 'for batch', 13)
('GAN loss 4.5284 ', 'GAN acc 0.0000', 'Discriminator loss 0.0614', 'Discriminator accuracy 0.9883', 'Total loss: 4.5898', 'for batch', 14)
('GAN loss 4.1653 ', 'GAN acc 0.0000', 'Discriminator loss 0.0832', 'Discriminator accuracy 0.9844', 'Total loss: 4.2484', 'for batch', 15)
('GAN loss 4.0769 ', 'GAN acc 0.0000', 'Discriminator loss 0.0475', 'Discriminator accuracy 0.9922', 'Total loss: 4.1244', 'for batch', 16)
('GAN loss 4.3539 ', 'GAN acc 0.0000', 'Discriminator loss 0.0429', 'Discriminator accuracy 0.9922', 'Total loss: 4.3968', 'for batch', 17)
('GAN loss 4.6742 ', 'GAN acc 0.0000', 'Discriminator loss 0.0387', 'Discriminator accuracy 0.9941', 'Total loss: 4.7128', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9884299)
('DISCRIMINATOR_Imagem FAKE=', 0.011967604)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.935376')
----------------------------------
('Epoch', 10, 'of', 50)
('Number of batches', 19)
('GAN loss 4.6725 ', 'GAN acc 0.0000', 'Discriminator loss 0.0262', 'Discriminator accuracy 0.9941', 'Total loss: 4.6987', 'for batch', 0)
('GAN loss 4.3303 ', 'GAN acc 0.0000', 'Discriminator loss 0.0419', 'Discriminator accuracy 0.9883', 'Total loss: 4.3722', 'for batch', 1)
('GAN loss 4.5528 ', 'GAN acc 0.0000', 'Discriminator loss 0.0128', 'Discriminator accuracy 0.9980', 'Total loss: 4.5655', 'for batch', 2)
('GAN loss 4.2321 ', 'GAN acc 0.0000', 'Discriminator loss 0.0404', 'Discriminator accuracy 0.9902', 'Total loss: 4.2725', 'for batch', 3)
('GAN loss 5.4526 ', 'GAN acc 0.0000', 'Discriminator loss 0.0288', 'Discriminator accuracy 0.9941', 'Total loss: 5.4814', 'for batch', 4)
('GAN loss 4.7625 ', 'GAN acc 0.0000', 'Discriminator loss 0.0836', 'Discriminator accuracy 0.9805', 'Total loss: 4.8460', 'for batch', 5)
('GAN loss 4.7471 ', 'GAN acc 0.0000', 'Discriminator loss 0.0234', 'Discriminator accuracy 0.9961', 'Total loss: 4.7705', 'for batch', 6)
('GAN loss 5.2882 ', 'GAN acc 0.0000', 'Discriminator loss 0.0186', 'Discriminator accuracy 0.9941', 'Total loss: 5.3069', 'for batch', 7)
('GAN loss 3.9965 ', 'GAN acc 0.0000', 'Discriminator loss 0.0597', 'Discriminator accuracy 0.9902', 'Total loss: 4.0562', 'for batch', 8)
('GAN loss 4.1370 ', 'GAN acc 0.0000', 'Discriminator loss 0.0436', 'Discriminator accuracy 0.9941', 'Total loss: 4.1806', 'for batch', 9)
('GAN loss 4.1173 ', 'GAN acc 0.0000', 'Discriminator loss 0.0692', 'Discriminator accuracy 0.9883', 'Total loss: 4.1865', 'for batch', 10)
('GAN loss 4.3287 ', 'GAN acc 0.0000', 'Discriminator loss 0.0501', 'Discriminator accuracy 0.9844', 'Total loss: 4.3788', 'for batch', 11)
('GAN loss 4.9781 ', 'GAN acc 0.0000', 'Discriminator loss 0.0801', 'Discriminator accuracy 0.9902', 'Total loss: 5.0582', 'for batch', 12)
('GAN loss 5.8038 ', 'GAN acc 0.0000', 'Discriminator loss 0.0285', 'Discriminator accuracy 0.9922', 'Total loss: 5.8323', 'for batch', 13)
('GAN loss 6.3368 ', 'GAN acc 0.0000', 'Discriminator loss 0.1167', 'Discriminator accuracy 0.9766', 'Total loss: 6.4534', 'for batch', 14)
('GAN loss 3.5991 ', 'GAN acc 0.0000', 'Discriminator loss 0.1121', 'Discriminator accuracy 0.9746', 'Total loss: 3.7113', 'for batch', 15)
('GAN loss 3.4152 ', 'GAN acc 0.0000', 'Discriminator loss 0.0479', 'Discriminator accuracy 0.9883', 'Total loss: 3.4632', 'for batch', 16)
('GAN loss 3.3656 ', 'GAN acc 0.0000', 'Discriminator loss 0.0414', 'Discriminator accuracy 0.9902', 'Total loss: 3.4069', 'for batch', 17)
('GAN loss 3.7862 ', 'GAN acc 0.0000', 'Discriminator loss 0.0405', 'Discriminator accuracy 0.9941', 'Total loss: 3.8266', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98938221)
('DISCRIMINATOR_Imagem FAKE=', 0.022783309)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.495681')
----------------------------------
('Epoch', 11, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2797 ', 'GAN acc 0.0000', 'Discriminator loss 0.0373', 'Discriminator accuracy 0.9941', 'Total loss: 4.3170', 'for batch', 0)
('GAN loss 4.2083 ', 'GAN acc 0.0000', 'Discriminator loss 0.0394', 'Discriminator accuracy 0.9863', 'Total loss: 4.2478', 'for batch', 1)
('GAN loss 4.1821 ', 'GAN acc 0.0000', 'Discriminator loss 0.0147', 'Discriminator accuracy 0.9980', 'Total loss: 4.1969', 'for batch', 2)
('GAN loss 6.5782 ', 'GAN acc 0.0000', 'Discriminator loss 0.0724', 'Discriminator accuracy 0.9805', 'Total loss: 6.6506', 'for batch', 3)
('GAN loss 5.0521 ', 'GAN acc 0.0000', 'Discriminator loss 0.0218', 'Discriminator accuracy 0.9941', 'Total loss: 5.0740', 'for batch', 4)
('GAN loss 4.3169 ', 'GAN acc 0.0000', 'Discriminator loss 0.0871', 'Discriminator accuracy 0.9785', 'Total loss: 4.4040', 'for batch', 5)
('GAN loss 4.0254 ', 'GAN acc 0.0000', 'Discriminator loss 0.0352', 'Discriminator accuracy 0.9922', 'Total loss: 4.0606', 'for batch', 6)
('GAN loss 11.6258 ', 'GAN acc 0.0000', 'Discriminator loss 0.5696', 'Discriminator accuracy 0.8926', 'Total loss: 12.1955', 'for batch', 7)
('GAN loss 10.7543 ', 'GAN acc 0.0000', 'Discriminator loss 0.1527', 'Discriminator accuracy 0.9590', 'Total loss: 10.9070', 'for batch', 8)
('GAN loss 6.0168 ', 'GAN acc 0.0000', 'Discriminator loss 0.1378', 'Discriminator accuracy 0.9629', 'Total loss: 6.1546', 'for batch', 9)
('GAN loss 4.3168 ', 'GAN acc 0.0000', 'Discriminator loss 0.1695', 'Discriminator accuracy 0.9629', 'Total loss: 4.4864', 'for batch', 10)
('GAN loss 2.9747 ', 'GAN acc 0.0000', 'Discriminator loss 0.0809', 'Discriminator accuracy 0.9785', 'Total loss: 3.0556', 'for batch', 11)
('GAN loss 3.0324 ', 'GAN acc 0.0000', 'Discriminator loss 0.0646', 'Discriminator accuracy 0.9902', 'Total loss: 3.0970', 'for batch', 12)
('GAN loss 3.6608 ', 'GAN acc 0.0000', 'Discriminator loss 0.0619', 'Discriminator accuracy 0.9883', 'Total loss: 3.7227', 'for batch', 13)
('GAN loss 3.8003 ', 'GAN acc 0.0000', 'Discriminator loss 0.0895', 'Discriminator accuracy 0.9785', 'Total loss: 3.8898', 'for batch', 14)
('GAN loss 3.6261 ', 'GAN acc 0.0000', 'Discriminator loss 0.1126', 'Discriminator accuracy 0.9785', 'Total loss: 3.7387', 'for batch', 15)
('GAN loss 3.6642 ', 'GAN acc 0.0000', 'Discriminator loss 0.0483', 'Discriminator accuracy 0.9883', 'Total loss: 3.7125', 'for batch', 16)
('GAN loss 3.6753 ', 'GAN acc 0.0000', 'Discriminator loss 0.0627', 'Discriminator accuracy 0.9844', 'Total loss: 3.7380', 'for batch', 17)
('GAN loss 3.7786 ', 'GAN acc 0.0000', 'Discriminator loss 0.0459', 'Discriminator accuracy 0.9902', 'Total loss: 3.8245', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98226088)
('DISCRIMINATOR_Imagem FAKE=', 0.024462257)
('Discriminator trained', 1, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.006500')
----------------------------------
('Epoch', 12, 'of', 50)
('Number of batches', 19)
('GAN loss 3.8937 ', 'GAN acc 0.0000', 'Discriminator loss 0.0648', 'Discriminator accuracy 0.9883', 'Total loss: 3.9585', 'for batch', 0)
('GAN loss 3.7830 ', 'GAN acc 0.0000', 'Discriminator loss 0.0644', 'Discriminator accuracy 0.9824', 'Total loss: 3.8474', 'for batch', 1)
('GAN loss 3.9572 ', 'GAN acc 0.0000', 'Discriminator loss 0.0262', 'Discriminator accuracy 0.9961', 'Total loss: 3.9834', 'for batch', 2)
('GAN loss 3.8719 ', 'GAN acc 0.0000', 'Discriminator loss 0.0515', 'Discriminator accuracy 0.9863', 'Total loss: 3.9234', 'for batch', 3)
('GAN loss 3.9938 ', 'GAN acc 0.0000', 'Discriminator loss 0.0284', 'Discriminator accuracy 0.9922', 'Total loss: 4.0222', 'for batch', 4)
('GAN loss 4.2221 ', 'GAN acc 0.0000', 'Discriminator loss 0.0770', 'Discriminator accuracy 0.9824', 'Total loss: 4.2991', 'for batch', 5)
('GAN loss 4.6767 ', 'GAN acc 0.0000', 'Discriminator loss 0.0490', 'Discriminator accuracy 0.9941', 'Total loss: 4.7257', 'for batch', 6)
('GAN loss 4.7071 ', 'GAN acc 0.0000', 'Discriminator loss 0.0481', 'Discriminator accuracy 0.9902', 'Total loss: 4.7552', 'for batch', 7)
('GAN loss 4.4256 ', 'GAN acc 0.0000', 'Discriminator loss 0.0600', 'Discriminator accuracy 0.9863', 'Total loss: 4.4856', 'for batch', 8)
('GAN loss 4.3719 ', 'GAN acc 0.0000', 'Discriminator loss 0.0416', 'Discriminator accuracy 0.9922', 'Total loss: 4.4134', 'for batch', 9)
('GAN loss 4.0940 ', 'GAN acc 0.0000', 'Discriminator loss 0.0790', 'Discriminator accuracy 0.9863', 'Total loss: 4.1730', 'for batch', 10)
('GAN loss 3.9178 ', 'GAN acc 0.0000', 'Discriminator loss 0.0558', 'Discriminator accuracy 0.9883', 'Total loss: 3.9736', 'for batch', 11)
('GAN loss 4.0000 ', 'GAN acc 0.0000', 'Discriminator loss 0.0513', 'Discriminator accuracy 0.9902', 'Total loss: 4.0513', 'for batch', 12)
('GAN loss 4.3710 ', 'GAN acc 0.0000', 'Discriminator loss 0.0352', 'Discriminator accuracy 0.9941', 'Total loss: 4.4061', 'for batch', 13)
('GAN loss 4.1945 ', 'GAN acc 0.0000', 'Discriminator loss 0.0912', 'Discriminator accuracy 0.9824', 'Total loss: 4.2857', 'for batch', 14)
('GAN loss 3.7961 ', 'GAN acc 0.0000', 'Discriminator loss 0.1212', 'Discriminator accuracy 0.9805', 'Total loss: 3.9173', 'for batch', 15)
('GAN loss 3.8697 ', 'GAN acc 0.0000', 'Discriminator loss 0.0674', 'Discriminator accuracy 0.9883', 'Total loss: 3.9371', 'for batch', 16)
('GAN loss 3.9250 ', 'GAN acc 0.0000', 'Discriminator loss 0.0619', 'Discriminator accuracy 0.9863', 'Total loss: 3.9869', 'for batch', 17)
('GAN loss 4.0253 ', 'GAN acc 0.0000', 'Discriminator loss 0.0572', 'Discriminator accuracy 0.9883', 'Total loss: 4.0825', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97967541)
('DISCRIMINATOR_Imagem FAKE=', 0.011404277)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.557764')
----------------------------------
('Epoch', 13, 'of', 50)
('Number of batches', 19)
('GAN loss 4.4006 ', 'GAN acc 0.0000', 'Discriminator loss 0.0616', 'Discriminator accuracy 0.9844', 'Total loss: 4.4623', 'for batch', 0)
('GAN loss 3.5028 ', 'GAN acc 0.0000', 'Discriminator loss 0.0694', 'Discriminator accuracy 0.9805', 'Total loss: 3.5722', 'for batch', 1)
('GAN loss 4.9879 ', 'GAN acc 0.0000', 'Discriminator loss 0.0150', 'Discriminator accuracy 0.9961', 'Total loss: 5.0029', 'for batch', 2)
('GAN loss 3.3250 ', 'GAN acc 0.0000', 'Discriminator loss 0.0719', 'Discriminator accuracy 0.9844', 'Total loss: 3.3969', 'for batch', 3)
('GAN loss 4.3113 ', 'GAN acc 0.0000', 'Discriminator loss 0.0253', 'Discriminator accuracy 0.9922', 'Total loss: 4.3366', 'for batch', 4)
('GAN loss 3.9680 ', 'GAN acc 0.0000', 'Discriminator loss 0.0708', 'Discriminator accuracy 0.9824', 'Total loss: 4.0388', 'for batch', 5)
('GAN loss 4.0138 ', 'GAN acc 0.0000', 'Discriminator loss 0.0442', 'Discriminator accuracy 0.9941', 'Total loss: 4.0581', 'for batch', 6)
('GAN loss 4.0816 ', 'GAN acc 0.0000', 'Discriminator loss 0.0423', 'Discriminator accuracy 0.9922', 'Total loss: 4.1239', 'for batch', 7)
('GAN loss 3.9365 ', 'GAN acc 0.0000', 'Discriminator loss 0.0527', 'Discriminator accuracy 0.9883', 'Total loss: 3.9892', 'for batch', 8)
('GAN loss 3.9131 ', 'GAN acc 0.0000', 'Discriminator loss 0.0507', 'Discriminator accuracy 0.9941', 'Total loss: 3.9637', 'for batch', 9)
('GAN loss 4.1543 ', 'GAN acc 0.0000', 'Discriminator loss 0.0822', 'Discriminator accuracy 0.9844', 'Total loss: 4.2365', 'for batch', 10)
('GAN loss 3.6402 ', 'GAN acc 0.0000', 'Discriminator loss 0.0628', 'Discriminator accuracy 0.9863', 'Total loss: 3.7030', 'for batch', 11)
('GAN loss 3.7433 ', 'GAN acc 0.0000', 'Discriminator loss 0.0539', 'Discriminator accuracy 0.9922', 'Total loss: 3.7972', 'for batch', 12)
('GAN loss 4.0384 ', 'GAN acc 0.0000', 'Discriminator loss 0.0370', 'Discriminator accuracy 0.9941', 'Total loss: 4.0754', 'for batch', 13)
('GAN loss 3.9157 ', 'GAN acc 0.0000', 'Discriminator loss 0.0965', 'Discriminator accuracy 0.9785', 'Total loss: 4.0123', 'for batch', 14)
('GAN loss 3.7127 ', 'GAN acc 0.0000', 'Discriminator loss 0.1011', 'Discriminator accuracy 0.9824', 'Total loss: 3.8138', 'for batch', 15)
('GAN loss 3.5509 ', 'GAN acc 0.0000', 'Discriminator loss 0.0496', 'Discriminator accuracy 0.9902', 'Total loss: 3.6005', 'for batch', 16)
('GAN loss 3.4186 ', 'GAN acc 0.0000', 'Discriminator loss 0.0556', 'Discriminator accuracy 0.9863', 'Total loss: 3.4741', 'for batch', 17)
('GAN loss 3.6091 ', 'GAN acc 0.0000', 'Discriminator loss 0.0459', 'Discriminator accuracy 0.9922', 'Total loss: 3.6550', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98466039)
('DISCRIMINATOR_Imagem FAKE=', 0.027311035)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.040384')
----------------------------------
('Epoch', 14, 'of', 50)
('Number of batches', 19)
('GAN loss 3.8749 ', 'GAN acc 0.0000', 'Discriminator loss 0.0560', 'Discriminator accuracy 0.9902', 'Total loss: 3.9309', 'for batch', 0)
('GAN loss 3.7865 ', 'GAN acc 0.0000', 'Discriminator loss 0.0505', 'Discriminator accuracy 0.9844', 'Total loss: 3.8370', 'for batch', 1)
('GAN loss 3.9823 ', 'GAN acc 0.0000', 'Discriminator loss 0.0170', 'Discriminator accuracy 0.9980', 'Total loss: 3.9993', 'for batch', 2)
('GAN loss 3.9100 ', 'GAN acc 0.0000', 'Discriminator loss 0.0574', 'Discriminator accuracy 0.9844', 'Total loss: 3.9674', 'for batch', 3)
('GAN loss 3.8866 ', 'GAN acc 0.0000', 'Discriminator loss 0.0324', 'Discriminator accuracy 0.9941', 'Total loss: 3.9190', 'for batch', 4)
('GAN loss 3.7731 ', 'GAN acc 0.0000', 'Discriminator loss 0.0706', 'Discriminator accuracy 0.9824', 'Total loss: 3.8437', 'for batch', 5)
('GAN loss 3.9088 ', 'GAN acc 0.0000', 'Discriminator loss 0.0421', 'Discriminator accuracy 0.9941', 'Total loss: 3.9509', 'for batch', 6)
('GAN loss 4.1749 ', 'GAN acc 0.0000', 'Discriminator loss 0.0449', 'Discriminator accuracy 0.9941', 'Total loss: 4.2198', 'for batch', 7)
('GAN loss 4.2067 ', 'GAN acc 0.0000', 'Discriminator loss 0.0503', 'Discriminator accuracy 0.9883', 'Total loss: 4.2570', 'for batch', 8)
('GAN loss 4.2750 ', 'GAN acc 0.0000', 'Discriminator loss 0.0363', 'Discriminator accuracy 0.9941', 'Total loss: 4.3113', 'for batch', 9)
('GAN loss 4.0368 ', 'GAN acc 0.0000', 'Discriminator loss 0.0731', 'Discriminator accuracy 0.9863', 'Total loss: 4.1099', 'for batch', 10)
('GAN loss 3.5459 ', 'GAN acc 0.0000', 'Discriminator loss 0.0473', 'Discriminator accuracy 0.9883', 'Total loss: 3.5932', 'for batch', 11)
('GAN loss 3.8671 ', 'GAN acc 0.0000', 'Discriminator loss 0.0508', 'Discriminator accuracy 0.9922', 'Total loss: 3.9179', 'for batch', 12)
('GAN loss 4.3993 ', 'GAN acc 0.0000', 'Discriminator loss 0.0253', 'Discriminator accuracy 0.9961', 'Total loss: 4.4246', 'for batch', 13)
('GAN loss 3.8919 ', 'GAN acc 0.0000', 'Discriminator loss 0.0817', 'Discriminator accuracy 0.9785', 'Total loss: 3.9736', 'for batch', 14)
('GAN loss 3.1900 ', 'GAN acc 0.0000', 'Discriminator loss 0.0812', 'Discriminator accuracy 0.9824', 'Total loss: 3.2713', 'for batch', 15)
('GAN loss 4.1204 ', 'GAN acc 0.0000', 'Discriminator loss 0.0545', 'Discriminator accuracy 0.9883', 'Total loss: 4.1749', 'for batch', 16)
('GAN loss 4.5338 ', 'GAN acc 0.0000', 'Discriminator loss 0.0457', 'Discriminator accuracy 0.9883', 'Total loss: 4.5795', 'for batch', 17)
('GAN loss 4.6450 ', 'GAN acc 0.0000', 'Discriminator loss 0.0417', 'Discriminator accuracy 0.9922', 'Total loss: 4.6868', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98443496)
('DISCRIMINATOR_Imagem FAKE=', 0.011141096)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.541968')
----------------------------------
('Epoch', 15, 'of', 50)
('Number of batches', 19)
('GAN loss 4.4620 ', 'GAN acc 0.0000', 'Discriminator loss 0.0493', 'Discriminator accuracy 0.9883', 'Total loss: 4.5113', 'for batch', 0)
('GAN loss 4.2116 ', 'GAN acc 0.0000', 'Discriminator loss 0.0411', 'Discriminator accuracy 0.9883', 'Total loss: 4.2527', 'for batch', 1)
('GAN loss 4.5549 ', 'GAN acc 0.0039', 'Discriminator loss 0.0162', 'Discriminator accuracy 0.9980', 'Total loss: 4.5711', 'for batch', 2)
('GAN loss 4.2134 ', 'GAN acc 0.0000', 'Discriminator loss 0.0563', 'Discriminator accuracy 0.9844', 'Total loss: 4.2697', 'for batch', 3)
('GAN loss 4.5804 ', 'GAN acc 0.0000', 'Discriminator loss 0.0291', 'Discriminator accuracy 0.9902', 'Total loss: 4.6096', 'for batch', 4)
('GAN loss 4.2352 ', 'GAN acc 0.0000', 'Discriminator loss 0.0859', 'Discriminator accuracy 0.9824', 'Total loss: 4.3210', 'for batch', 5)
('GAN loss 4.5316 ', 'GAN acc 0.0000', 'Discriminator loss 0.0548', 'Discriminator accuracy 0.9902', 'Total loss: 4.5864', 'for batch', 6)
('GAN loss 4.5102 ', 'GAN acc 0.0000', 'Discriminator loss 0.0396', 'Discriminator accuracy 0.9902', 'Total loss: 4.5499', 'for batch', 7)
('GAN loss 4.6524 ', 'GAN acc 0.0000', 'Discriminator loss 0.0787', 'Discriminator accuracy 0.9863', 'Total loss: 4.7311', 'for batch', 8)
('GAN loss 6.7082 ', 'GAN acc 0.0000', 'Discriminator loss 0.0404', 'Discriminator accuracy 0.9922', 'Total loss: 6.7487', 'for batch', 9)
('GAN loss 3.6178 ', 'GAN acc 0.0000', 'Discriminator loss 0.0929', 'Discriminator accuracy 0.9863', 'Total loss: 3.7108', 'for batch', 10)
('GAN loss 3.6951 ', 'GAN acc 0.0000', 'Discriminator loss 0.0584', 'Discriminator accuracy 0.9824', 'Total loss: 3.7536', 'for batch', 11)
('GAN loss 4.1769 ', 'GAN acc 0.0000', 'Discriminator loss 0.0447', 'Discriminator accuracy 0.9922', 'Total loss: 4.2215', 'for batch', 12)
('GAN loss 3.7134 ', 'GAN acc 0.0000', 'Discriminator loss 0.0386', 'Discriminator accuracy 0.9941', 'Total loss: 3.7520', 'for batch', 13)
('GAN loss 3.7590 ', 'GAN acc 0.0000', 'Discriminator loss 0.0998', 'Discriminator accuracy 0.9824', 'Total loss: 3.8588', 'for batch', 14)
('GAN loss 4.2175 ', 'GAN acc 0.0000', 'Discriminator loss 0.1058', 'Discriminator accuracy 0.9805', 'Total loss: 4.3233', 'for batch', 15)
('GAN loss 3.3992 ', 'GAN acc 0.0000', 'Discriminator loss 0.0724', 'Discriminator accuracy 0.9902', 'Total loss: 3.4715', 'for batch', 16)
('GAN loss 4.1308 ', 'GAN acc 0.0000', 'Discriminator loss 0.0472', 'Discriminator accuracy 0.9902', 'Total loss: 4.1780', 'for batch', 17)
('GAN loss 6.4024 ', 'GAN acc 0.0000', 'Discriminator loss 0.0401', 'Discriminator accuracy 0.9902', 'Total loss: 6.4426', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98481238)
('DISCRIMINATOR_Imagem FAKE=', 0.021668645)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.041550')
----------------------------------
('Epoch', 16, 'of', 50)
('Number of batches', 19)
('GAN loss 4.6241 ', 'GAN acc 0.0000', 'Discriminator loss 0.0461', 'Discriminator accuracy 0.9902', 'Total loss: 4.6702', 'for batch', 0)
('GAN loss 3.6093 ', 'GAN acc 0.0000', 'Discriminator loss 0.0497', 'Discriminator accuracy 0.9941', 'Total loss: 3.6589', 'for batch', 1)
('GAN loss 3.5911 ', 'GAN acc 0.0000', 'Discriminator loss 0.0294', 'Discriminator accuracy 0.9961', 'Total loss: 3.6205', 'for batch', 2)
('GAN loss 3.6270 ', 'GAN acc 0.0000', 'Discriminator loss 0.0525', 'Discriminator accuracy 0.9922', 'Total loss: 3.6795', 'for batch', 3)
('GAN loss 3.8783 ', 'GAN acc 0.0000', 'Discriminator loss 0.0310', 'Discriminator accuracy 0.9941', 'Total loss: 3.9093', 'for batch', 4)
('GAN loss 3.6512 ', 'GAN acc 0.0000', 'Discriminator loss 0.0912', 'Discriminator accuracy 0.9824', 'Total loss: 3.7424', 'for batch', 5)
('GAN loss 4.2470 ', 'GAN acc 0.0000', 'Discriminator loss 0.0389', 'Discriminator accuracy 0.9941', 'Total loss: 4.2858', 'for batch', 6)
('GAN loss 5.6803 ', 'GAN acc 0.0000', 'Discriminator loss 0.0293', 'Discriminator accuracy 0.9922', 'Total loss: 5.7096', 'for batch', 7)
('GAN loss 3.9417 ', 'GAN acc 0.0000', 'Discriminator loss 0.0568', 'Discriminator accuracy 0.9883', 'Total loss: 3.9985', 'for batch', 8)
('GAN loss 4.0436 ', 'GAN acc 0.0000', 'Discriminator loss 0.0345', 'Discriminator accuracy 0.9941', 'Total loss: 4.0781', 'for batch', 9)
('GAN loss 4.5421 ', 'GAN acc 0.0000', 'Discriminator loss 0.0623', 'Discriminator accuracy 0.9863', 'Total loss: 4.6045', 'for batch', 10)
('GAN loss 3.8857 ', 'GAN acc 0.0000', 'Discriminator loss 0.0450', 'Discriminator accuracy 0.9902', 'Total loss: 3.9307', 'for batch', 11)
('GAN loss 4.2925 ', 'GAN acc 0.0000', 'Discriminator loss 0.0417', 'Discriminator accuracy 0.9922', 'Total loss: 4.3342', 'for batch', 12)
('GAN loss 4.6415 ', 'GAN acc 0.0000', 'Discriminator loss 0.0218', 'Discriminator accuracy 0.9961', 'Total loss: 4.6633', 'for batch', 13)
('GAN loss 4.5015 ', 'GAN acc 0.0000', 'Discriminator loss 0.0670', 'Discriminator accuracy 0.9863', 'Total loss: 4.5685', 'for batch', 14)
('GAN loss 3.9188 ', 'GAN acc 0.0000', 'Discriminator loss 0.0964', 'Discriminator accuracy 0.9824', 'Total loss: 4.0152', 'for batch', 15)
('GAN loss 3.8877 ', 'GAN acc 0.0000', 'Discriminator loss 0.0441', 'Discriminator accuracy 0.9922', 'Total loss: 3.9318', 'for batch', 16)
('GAN loss 4.0086 ', 'GAN acc 0.0000', 'Discriminator loss 0.0388', 'Discriminator accuracy 0.9922', 'Total loss: 4.0474', 'for batch', 17)
('GAN loss 4.1146 ', 'GAN acc 0.0000', 'Discriminator loss 0.0426', 'Discriminator accuracy 0.9922', 'Total loss: 4.1572', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9869892)
('DISCRIMINATOR_Imagem FAKE=', 0.032063078)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.550894')
----------------------------------
('Epoch', 17, 'of', 50)
('Number of batches', 19)
('GAN loss 3.9073 ', 'GAN acc 0.0000', 'Discriminator loss 0.0438', 'Discriminator accuracy 0.9922', 'Total loss: 3.9511', 'for batch', 0)
('GAN loss 3.8639 ', 'GAN acc 0.0000', 'Discriminator loss 0.0446', 'Discriminator accuracy 0.9902', 'Total loss: 3.9084', 'for batch', 1)
('GAN loss 3.8684 ', 'GAN acc 0.0000', 'Discriminator loss 0.0221', 'Discriminator accuracy 0.9961', 'Total loss: 3.8905', 'for batch', 2)
('GAN loss 4.0154 ', 'GAN acc 0.0000', 'Discriminator loss 0.0417', 'Discriminator accuracy 0.9902', 'Total loss: 4.0572', 'for batch', 3)
('GAN loss 4.4908 ', 'GAN acc 0.0000', 'Discriminator loss 0.0164', 'Discriminator accuracy 0.9961', 'Total loss: 4.5072', 'for batch', 4)
('GAN loss 3.5252 ', 'GAN acc 0.0000', 'Discriminator loss 0.0809', 'Discriminator accuracy 0.9844', 'Total loss: 3.6061', 'for batch', 5)
('GAN loss 4.4097 ', 'GAN acc 0.0000', 'Discriminator loss 0.0335', 'Discriminator accuracy 0.9941', 'Total loss: 4.4432', 'for batch', 6)
('GAN loss 4.4385 ', 'GAN acc 0.0000', 'Discriminator loss 0.0271', 'Discriminator accuracy 0.9961', 'Total loss: 4.4656', 'for batch', 7)
('GAN loss 5.2100 ', 'GAN acc 0.0000', 'Discriminator loss 0.0528', 'Discriminator accuracy 0.9883', 'Total loss: 5.2629', 'for batch', 8)
('GAN loss 4.1883 ', 'GAN acc 0.0000', 'Discriminator loss 0.0309', 'Discriminator accuracy 0.9941', 'Total loss: 4.2192', 'for batch', 9)
('GAN loss 4.4858 ', 'GAN acc 0.0000', 'Discriminator loss 0.0660', 'Discriminator accuracy 0.9902', 'Total loss: 4.5518', 'for batch', 10)
('GAN loss 6.1372 ', 'GAN acc 0.0000', 'Discriminator loss 0.0906', 'Discriminator accuracy 0.9805', 'Total loss: 6.2278', 'for batch', 11)
('GAN loss 6.0752 ', 'GAN acc 0.0000', 'Discriminator loss 0.0502', 'Discriminator accuracy 0.9902', 'Total loss: 6.1254', 'for batch', 12)
('GAN loss 5.3547 ', 'GAN acc 0.0000', 'Discriminator loss 0.0381', 'Discriminator accuracy 0.9883', 'Total loss: 5.3928', 'for batch', 13)
('GAN loss 4.8752 ', 'GAN acc 0.0000', 'Discriminator loss 0.0974', 'Discriminator accuracy 0.9824', 'Total loss: 4.9726', 'for batch', 14)
('GAN loss 3.9458 ', 'GAN acc 0.0000', 'Discriminator loss 0.1224', 'Discriminator accuracy 0.9785', 'Total loss: 4.0682', 'for batch', 15)
('GAN loss 3.4298 ', 'GAN acc 0.0000', 'Discriminator loss 0.0535', 'Discriminator accuracy 0.9902', 'Total loss: 3.4832', 'for batch', 16)
('GAN loss 3.4253 ', 'GAN acc 0.0000', 'Discriminator loss 0.0449', 'Discriminator accuracy 0.9902', 'Total loss: 3.4701', 'for batch', 17)
('GAN loss 3.3846 ', 'GAN acc 0.0000', 'Discriminator loss 0.0494', 'Discriminator accuracy 0.9922', 'Total loss: 3.4341', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98619497)
('DISCRIMINATOR_Imagem FAKE=', 0.045398414)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.018325')
----------------------------------
('Epoch', 18, 'of', 50)
('Number of batches', 19)
('GAN loss 3.4968 ', 'GAN acc 0.0000', 'Discriminator loss 0.0523', 'Discriminator accuracy 0.9902', 'Total loss: 3.5491', 'for batch', 0)
('GAN loss 3.7490 ', 'GAN acc 0.0000', 'Discriminator loss 0.0485', 'Discriminator accuracy 0.9922', 'Total loss: 3.7975', 'for batch', 1)
('GAN loss 4.1022 ', 'GAN acc 0.0000', 'Discriminator loss 0.0238', 'Discriminator accuracy 0.9961', 'Total loss: 4.1260', 'for batch', 2)
('GAN loss 3.9931 ', 'GAN acc 0.0000', 'Discriminator loss 0.0412', 'Discriminator accuracy 0.9902', 'Total loss: 4.0343', 'for batch', 3)
('GAN loss 3.9219 ', 'GAN acc 0.0000', 'Discriminator loss 0.0234', 'Discriminator accuracy 0.9941', 'Total loss: 3.9453', 'for batch', 4)
('GAN loss 3.6534 ', 'GAN acc 0.0000', 'Discriminator loss 0.0722', 'Discriminator accuracy 0.9863', 'Total loss: 3.7256', 'for batch', 5)
('GAN loss 4.1059 ', 'GAN acc 0.0000', 'Discriminator loss 0.0392', 'Discriminator accuracy 0.9941', 'Total loss: 4.1452', 'for batch', 6)
('GAN loss 4.2033 ', 'GAN acc 0.0000', 'Discriminator loss 0.0284', 'Discriminator accuracy 0.9941', 'Total loss: 4.2317', 'for batch', 7)
('GAN loss 4.2060 ', 'GAN acc 0.0000', 'Discriminator loss 0.0609', 'Discriminator accuracy 0.9883', 'Total loss: 4.2669', 'for batch', 8)
('GAN loss 4.2945 ', 'GAN acc 0.0039', 'Discriminator loss 0.0379', 'Discriminator accuracy 0.9941', 'Total loss: 4.3324', 'for batch', 9)
('GAN loss 4.2258 ', 'GAN acc 0.0000', 'Discriminator loss 0.0779', 'Discriminator accuracy 0.9883', 'Total loss: 4.3036', 'for batch', 10)
('GAN loss 4.1039 ', 'GAN acc 0.0000', 'Discriminator loss 0.0602', 'Discriminator accuracy 0.9883', 'Total loss: 4.1641', 'for batch', 11)
('GAN loss 4.4414 ', 'GAN acc 0.0000', 'Discriminator loss 0.0514', 'Discriminator accuracy 0.9863', 'Total loss: 4.4928', 'for batch', 12)
('GAN loss 4.3438 ', 'GAN acc 0.0000', 'Discriminator loss 0.0304', 'Discriminator accuracy 0.9922', 'Total loss: 4.3742', 'for batch', 13)
('GAN loss 3.9714 ', 'GAN acc 0.0000', 'Discriminator loss 0.0737', 'Discriminator accuracy 0.9844', 'Total loss: 4.0451', 'for batch', 14)
('GAN loss 3.2986 ', 'GAN acc 0.0039', 'Discriminator loss 0.1089', 'Discriminator accuracy 0.9785', 'Total loss: 3.4075', 'for batch', 15)
('GAN loss 3.8312 ', 'GAN acc 0.0000', 'Discriminator loss 0.0527', 'Discriminator accuracy 0.9922', 'Total loss: 3.8839', 'for batch', 16)
('GAN loss 4.1005 ', 'GAN acc 0.0000', 'Discriminator loss 0.0420', 'Discriminator accuracy 0.9922', 'Total loss: 4.1426', 'for batch', 17)
('GAN loss 4.3337 ', 'GAN acc 0.0000', 'Discriminator loss 0.0447', 'Discriminator accuracy 0.9902', 'Total loss: 4.3784', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98382986)
('DISCRIMINATOR_Imagem FAKE=', 0.016563298)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.546944')
----------------------------------
('Epoch', 19, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0919 ', 'GAN acc 0.0000', 'Discriminator loss 0.0502', 'Discriminator accuracy 0.9883', 'Total loss: 4.1421', 'for batch', 0)
('GAN loss 4.0088 ', 'GAN acc 0.0000', 'Discriminator loss 0.0484', 'Discriminator accuracy 0.9902', 'Total loss: 4.0572', 'for batch', 1)
('GAN loss 4.0152 ', 'GAN acc 0.0000', 'Discriminator loss 0.0247', 'Discriminator accuracy 0.9941', 'Total loss: 4.0399', 'for batch', 2)
('GAN loss 4.0075 ', 'GAN acc 0.0000', 'Discriminator loss 0.0457', 'Discriminator accuracy 0.9902', 'Total loss: 4.0532', 'for batch', 3)
('GAN loss 4.0971 ', 'GAN acc 0.0000', 'Discriminator loss 0.0251', 'Discriminator accuracy 0.9941', 'Total loss: 4.1223', 'for batch', 4)
('GAN loss 3.7950 ', 'GAN acc 0.0000', 'Discriminator loss 0.0691', 'Discriminator accuracy 0.9844', 'Total loss: 3.8641', 'for batch', 5)
('GAN loss 4.2280 ', 'GAN acc 0.0000', 'Discriminator loss 0.0420', 'Discriminator accuracy 0.9941', 'Total loss: 4.2700', 'for batch', 6)
('GAN loss 4.6295 ', 'GAN acc 0.0000', 'Discriminator loss 0.0409', 'Discriminator accuracy 0.9922', 'Total loss: 4.6704', 'for batch', 7)
('GAN loss 4.4380 ', 'GAN acc 0.0000', 'Discriminator loss 0.0519', 'Discriminator accuracy 0.9883', 'Total loss: 4.4899', 'for batch', 8)
('GAN loss 4.4274 ', 'GAN acc 0.0000', 'Discriminator loss 0.0304', 'Discriminator accuracy 0.9941', 'Total loss: 4.4578', 'for batch', 9)
('GAN loss 4.2224 ', 'GAN acc 0.0000', 'Discriminator loss 0.0694', 'Discriminator accuracy 0.9883', 'Total loss: 4.2918', 'for batch', 10)
('GAN loss 3.8875 ', 'GAN acc 0.0000', 'Discriminator loss 0.0481', 'Discriminator accuracy 0.9902', 'Total loss: 3.9356', 'for batch', 11)
('GAN loss 4.1446 ', 'GAN acc 0.0000', 'Discriminator loss 0.0394', 'Discriminator accuracy 0.9922', 'Total loss: 4.1840', 'for batch', 12)
('GAN loss 4.5377 ', 'GAN acc 0.0000', 'Discriminator loss 0.0240', 'Discriminator accuracy 0.9961', 'Total loss: 4.5617', 'for batch', 13)
('GAN loss 4.4010 ', 'GAN acc 0.0000', 'Discriminator loss 0.0686', 'Discriminator accuracy 0.9863', 'Total loss: 4.4696', 'for batch', 14)
('GAN loss 3.8585 ', 'GAN acc 0.0000', 'Discriminator loss 0.0932', 'Discriminator accuracy 0.9805', 'Total loss: 3.9517', 'for batch', 15)
('GAN loss 3.9054 ', 'GAN acc 0.0000', 'Discriminator loss 0.0470', 'Discriminator accuracy 0.9902', 'Total loss: 3.9524', 'for batch', 16)
('GAN loss 3.9924 ', 'GAN acc 0.0000', 'Discriminator loss 0.0450', 'Discriminator accuracy 0.9922', 'Total loss: 4.0374', 'for batch', 17)
('GAN loss 3.9630 ', 'GAN acc 0.0000', 'Discriminator loss 0.0457', 'Discriminator accuracy 0.9902', 'Total loss: 4.0087', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98599315)
('DISCRIMINATOR_Imagem FAKE=', 0.024953391)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.041062')
----------------------------------
('Epoch', 20, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0135 ', 'GAN acc 0.0000', 'Discriminator loss 0.0468', 'Discriminator accuracy 0.9883', 'Total loss: 4.0604', 'for batch', 0)
('GAN loss 3.9018 ', 'GAN acc 0.0000', 'Discriminator loss 0.0463', 'Discriminator accuracy 0.9902', 'Total loss: 3.9481', 'for batch', 1)
('GAN loss 4.1992 ', 'GAN acc 0.0000', 'Discriminator loss 0.0209', 'Discriminator accuracy 0.9961', 'Total loss: 4.2200', 'for batch', 2)
('GAN loss 4.1677 ', 'GAN acc 0.0000', 'Discriminator loss 0.0468', 'Discriminator accuracy 0.9883', 'Total loss: 4.2146', 'for batch', 3)
('GAN loss 4.4134 ', 'GAN acc 0.0000', 'Discriminator loss 0.0233', 'Discriminator accuracy 0.9941', 'Total loss: 4.4367', 'for batch', 4)
('GAN loss 4.0618 ', 'GAN acc 0.0000', 'Discriminator loss 0.0738', 'Discriminator accuracy 0.9844', 'Total loss: 4.1356', 'for batch', 5)
('GAN loss 4.0588 ', 'GAN acc 0.0000', 'Discriminator loss 0.0314', 'Discriminator accuracy 0.9941', 'Total loss: 4.0902', 'for batch', 6)
('GAN loss 4.0142 ', 'GAN acc 0.0000', 'Discriminator loss 0.0336', 'Discriminator accuracy 0.9941', 'Total loss: 4.0477', 'for batch', 7)
('GAN loss 3.8649 ', 'GAN acc 0.0000', 'Discriminator loss 0.0522', 'Discriminator accuracy 0.9883', 'Total loss: 3.9171', 'for batch', 8)
('GAN loss 3.9146 ', 'GAN acc 0.0000', 'Discriminator loss 0.0333', 'Discriminator accuracy 0.9941', 'Total loss: 3.9479', 'for batch', 9)
('GAN loss 3.9110 ', 'GAN acc 0.0000', 'Discriminator loss 0.0648', 'Discriminator accuracy 0.9883', 'Total loss: 3.9758', 'for batch', 10)
('GAN loss 3.8389 ', 'GAN acc 0.0000', 'Discriminator loss 0.0467', 'Discriminator accuracy 0.9883', 'Total loss: 3.8856', 'for batch', 11)
('GAN loss 4.0684 ', 'GAN acc 0.0000', 'Discriminator loss 0.0415', 'Discriminator accuracy 0.9922', 'Total loss: 4.1099', 'for batch', 12)
('GAN loss 4.4405 ', 'GAN acc 0.0000', 'Discriminator loss 0.0290', 'Discriminator accuracy 0.9961', 'Total loss: 4.4694', 'for batch', 13)
('GAN loss 4.2319 ', 'GAN acc 0.0000', 'Discriminator loss 0.0730', 'Discriminator accuracy 0.9844', 'Total loss: 4.3050', 'for batch', 14)
('GAN loss 3.4045 ', 'GAN acc 0.0039', 'Discriminator loss 0.0924', 'Discriminator accuracy 0.9824', 'Total loss: 3.4970', 'for batch', 15)
('GAN loss 5.3728 ', 'GAN acc 0.0000', 'Discriminator loss 0.0591', 'Discriminator accuracy 0.9902', 'Total loss: 5.4319', 'for batch', 16)
('GAN loss 5.7353 ', 'GAN acc 0.0000', 'Discriminator loss 0.0466', 'Discriminator accuracy 0.9883', 'Total loss: 5.7820', 'for batch', 17)
('GAN loss 5.4300 ', 'GAN acc 0.0000', 'Discriminator loss 0.0506', 'Discriminator accuracy 0.9883', 'Total loss: 5.4806', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9801448)
('DISCRIMINATOR_Imagem FAKE=', 0.0048123589)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.522077')
----------------------------------
('Epoch', 21, 'of', 50)
('Number of batches', 19)
('GAN loss 4.9537 ', 'GAN acc 0.0000', 'Discriminator loss 0.0548', 'Discriminator accuracy 0.9863', 'Total loss: 5.0084', 'for batch', 0)
('GAN loss 4.3621 ', 'GAN acc 0.0000', 'Discriminator loss 0.0470', 'Discriminator accuracy 0.9883', 'Total loss: 4.4091', 'for batch', 1)
('GAN loss 4.1539 ', 'GAN acc 0.0000', 'Discriminator loss 0.0144', 'Discriminator accuracy 0.9941', 'Total loss: 4.1683', 'for batch', 2)
('GAN loss 3.8496 ', 'GAN acc 0.0000', 'Discriminator loss 0.0415', 'Discriminator accuracy 0.9883', 'Total loss: 3.8911', 'for batch', 3)
('GAN loss 4.2202 ', 'GAN acc 0.0000', 'Discriminator loss 0.0280', 'Discriminator accuracy 0.9941', 'Total loss: 4.2481', 'for batch', 4)
('GAN loss 4.1847 ', 'GAN acc 0.0000', 'Discriminator loss 0.0750', 'Discriminator accuracy 0.9844', 'Total loss: 4.2597', 'for batch', 5)
('GAN loss 4.3253 ', 'GAN acc 0.0000', 'Discriminator loss 0.0297', 'Discriminator accuracy 0.9941', 'Total loss: 4.3549', 'for batch', 6)
('GAN loss 4.4934 ', 'GAN acc 0.0000', 'Discriminator loss 0.0253', 'Discriminator accuracy 0.9941', 'Total loss: 4.5187', 'for batch', 7)
('GAN loss 4.2691 ', 'GAN acc 0.0000', 'Discriminator loss 0.0546', 'Discriminator accuracy 0.9863', 'Total loss: 4.3237', 'for batch', 8)
('GAN loss 4.2394 ', 'GAN acc 0.0000', 'Discriminator loss 0.0326', 'Discriminator accuracy 0.9941', 'Total loss: 4.2720', 'for batch', 9)
('GAN loss 4.0642 ', 'GAN acc 0.0000', 'Discriminator loss 0.0632', 'Discriminator accuracy 0.9863', 'Total loss: 4.1273', 'for batch', 10)
('GAN loss 3.6481 ', 'GAN acc 0.0000', 'Discriminator loss 0.0514', 'Discriminator accuracy 0.9863', 'Total loss: 3.6995', 'for batch', 11)
('GAN loss 3.9286 ', 'GAN acc 0.0000', 'Discriminator loss 0.0432', 'Discriminator accuracy 0.9922', 'Total loss: 3.9718', 'for batch', 12)
('GAN loss 4.3327 ', 'GAN acc 0.0000', 'Discriminator loss 0.0296', 'Discriminator accuracy 0.9961', 'Total loss: 4.3623', 'for batch', 13)
('GAN loss 4.4440 ', 'GAN acc 0.0000', 'Discriminator loss 0.0711', 'Discriminator accuracy 0.9824', 'Total loss: 4.5151', 'for batch', 14)
('GAN loss 3.8633 ', 'GAN acc 0.0000', 'Discriminator loss 0.0873', 'Discriminator accuracy 0.9824', 'Total loss: 3.9507', 'for batch', 15)
('GAN loss 3.8053 ', 'GAN acc 0.0000', 'Discriminator loss 0.0465', 'Discriminator accuracy 0.9902', 'Total loss: 3.8518', 'for batch', 16)
('GAN loss 3.8423 ', 'GAN acc 0.0000', 'Discriminator loss 0.0370', 'Discriminator accuracy 0.9902', 'Total loss: 3.8793', 'for batch', 17)
('GAN loss 3.9890 ', 'GAN acc 0.0000', 'Discriminator loss 0.0404', 'Discriminator accuracy 0.9922', 'Total loss: 4.0293', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98755544)
('DISCRIMINATOR_Imagem FAKE=', 0.020761825)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.034282')
----------------------------------
('Epoch', 22, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1089 ', 'GAN acc 0.0000', 'Discriminator loss 0.0360', 'Discriminator accuracy 0.9902', 'Total loss: 4.1449', 'for batch', 0)
('GAN loss 4.1372 ', 'GAN acc 0.0000', 'Discriminator loss 0.0373', 'Discriminator accuracy 0.9922', 'Total loss: 4.1745', 'for batch', 1)
('GAN loss 4.3818 ', 'GAN acc 0.0000', 'Discriminator loss 0.0168', 'Discriminator accuracy 0.9980', 'Total loss: 4.3986', 'for batch', 2)
('GAN loss 4.2311 ', 'GAN acc 0.0000', 'Discriminator loss 0.0438', 'Discriminator accuracy 0.9883', 'Total loss: 4.2749', 'for batch', 3)
('GAN loss 4.2298 ', 'GAN acc 0.0000', 'Discriminator loss 0.0180', 'Discriminator accuracy 0.9961', 'Total loss: 4.2478', 'for batch', 4)
('GAN loss 3.8541 ', 'GAN acc 0.0000', 'Discriminator loss 0.0683', 'Discriminator accuracy 0.9844', 'Total loss: 3.9224', 'for batch', 5)
('GAN loss 4.2173 ', 'GAN acc 0.0000', 'Discriminator loss 0.0284', 'Discriminator accuracy 0.9961', 'Total loss: 4.2457', 'for batch', 6)
('GAN loss 4.4835 ', 'GAN acc 0.0000', 'Discriminator loss 0.0228', 'Discriminator accuracy 0.9961', 'Total loss: 4.5063', 'for batch', 7)
('GAN loss 4.4361 ', 'GAN acc 0.0000', 'Discriminator loss 0.0442', 'Discriminator accuracy 0.9922', 'Total loss: 4.4803', 'for batch', 8)
('GAN loss 4.4091 ', 'GAN acc 0.0000', 'Discriminator loss 0.0299', 'Discriminator accuracy 0.9941', 'Total loss: 4.4390', 'for batch', 9)
('GAN loss 4.1385 ', 'GAN acc 0.0000', 'Discriminator loss 0.0635', 'Discriminator accuracy 0.9863', 'Total loss: 4.2020', 'for batch', 10)
('GAN loss 3.8287 ', 'GAN acc 0.0000', 'Discriminator loss 0.0487', 'Discriminator accuracy 0.9863', 'Total loss: 3.8774', 'for batch', 11)
('GAN loss 3.9394 ', 'GAN acc 0.0000', 'Discriminator loss 0.0369', 'Discriminator accuracy 0.9922', 'Total loss: 3.9763', 'for batch', 12)
('GAN loss 4.3733 ', 'GAN acc 0.0000', 'Discriminator loss 0.0268', 'Discriminator accuracy 0.9961', 'Total loss: 4.4002', 'for batch', 13)
('GAN loss 4.1243 ', 'GAN acc 0.0000', 'Discriminator loss 0.0676', 'Discriminator accuracy 0.9844', 'Total loss: 4.1919', 'for batch', 14)
('GAN loss 3.5636 ', 'GAN acc 0.0000', 'Discriminator loss 0.0803', 'Discriminator accuracy 0.9844', 'Total loss: 3.6439', 'for batch', 15)
('GAN loss 3.5479 ', 'GAN acc 0.0000', 'Discriminator loss 0.0492', 'Discriminator accuracy 0.9902', 'Total loss: 3.5971', 'for batch', 16)
('GAN loss 3.7655 ', 'GAN acc 0.0000', 'Discriminator loss 0.0402', 'Discriminator accuracy 0.9922', 'Total loss: 3.8057', 'for batch', 17)
('GAN loss 3.8789 ', 'GAN acc 0.0000', 'Discriminator loss 0.0445', 'Discriminator accuracy 0.9922', 'Total loss: 3.9234', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98747092)
('DISCRIMINATOR_Imagem FAKE=', 0.029031022)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.560636')
----------------------------------
('Epoch', 23, 'of', 50)
('Number of batches', 19)
('GAN loss 3.9122 ', 'GAN acc 0.0000', 'Discriminator loss 0.0422', 'Discriminator accuracy 0.9902', 'Total loss: 3.9544', 'for batch', 0)
('GAN loss 3.9715 ', 'GAN acc 0.0000', 'Discriminator loss 0.0389', 'Discriminator accuracy 0.9941', 'Total loss: 4.0104', 'for batch', 1)
('GAN loss 4.2871 ', 'GAN acc 0.0000', 'Discriminator loss 0.0169', 'Discriminator accuracy 0.9980', 'Total loss: 4.3040', 'for batch', 2)
('GAN loss 4.2188 ', 'GAN acc 0.0000', 'Discriminator loss 0.0456', 'Discriminator accuracy 0.9902', 'Total loss: 4.2644', 'for batch', 3)
('GAN loss 4.2999 ', 'GAN acc 0.0000', 'Discriminator loss 0.0190', 'Discriminator accuracy 0.9961', 'Total loss: 4.3189', 'for batch', 4)
('GAN loss 3.7765 ', 'GAN acc 0.0000', 'Discriminator loss 0.0744', 'Discriminator accuracy 0.9844', 'Total loss: 3.8509', 'for batch', 5)
('GAN loss 4.5811 ', 'GAN acc 0.0000', 'Discriminator loss 0.0388', 'Discriminator accuracy 0.9941', 'Total loss: 4.6199', 'for batch', 6)
('GAN loss 5.0126 ', 'GAN acc 0.0000', 'Discriminator loss 0.0174', 'Discriminator accuracy 0.9980', 'Total loss: 5.0300', 'for batch', 7)
('GAN loss 4.6952 ', 'GAN acc 0.0000', 'Discriminator loss 0.0547', 'Discriminator accuracy 0.9883', 'Total loss: 4.7499', 'for batch', 8)
('GAN loss 4.5655 ', 'GAN acc 0.0000', 'Discriminator loss 0.0277', 'Discriminator accuracy 0.9941', 'Total loss: 4.5932', 'for batch', 9)
('GAN loss 4.0078 ', 'GAN acc 0.0000', 'Discriminator loss 0.0588', 'Discriminator accuracy 0.9863', 'Total loss: 4.0665', 'for batch', 10)
('GAN loss 3.5682 ', 'GAN acc 0.0000', 'Discriminator loss 0.0454', 'Discriminator accuracy 0.9902', 'Total loss: 3.6136', 'for batch', 11)
('GAN loss 5.2755 ', 'GAN acc 0.0000', 'Discriminator loss 0.0458', 'Discriminator accuracy 0.9922', 'Total loss: 5.3213', 'for batch', 12)
('GAN loss 5.9369 ', 'GAN acc 0.0000', 'Discriminator loss 0.0155', 'Discriminator accuracy 0.9980', 'Total loss: 5.9525', 'for batch', 13)
('GAN loss 5.4862 ', 'GAN acc 0.0000', 'Discriminator loss 0.0750', 'Discriminator accuracy 0.9863', 'Total loss: 5.5612', 'for batch', 14)
('GAN loss 4.5459 ', 'GAN acc 0.0000', 'Discriminator loss 0.0922', 'Discriminator accuracy 0.9805', 'Total loss: 4.6381', 'for batch', 15)
('GAN loss 3.8103 ', 'GAN acc 0.0000', 'Discriminator loss 0.0430', 'Discriminator accuracy 0.9902', 'Total loss: 3.8533', 'for batch', 16)
('GAN loss 3.7499 ', 'GAN acc 0.0000', 'Discriminator loss 0.0351', 'Discriminator accuracy 0.9922', 'Total loss: 3.7850', 'for batch', 17)
('GAN loss 4.1033 ', 'GAN acc 0.0000', 'Discriminator loss 0.0431', 'Discriminator accuracy 0.9922', 'Total loss: 4.1464', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98918861)
('DISCRIMINATOR_Imagem FAKE=', 0.016658623)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.981870')
----------------------------------
('Epoch', 24, 'of', 50)
('Number of batches', 19)
('GAN loss 4.3839 ', 'GAN acc 0.0000', 'Discriminator loss 0.0355', 'Discriminator accuracy 0.9922', 'Total loss: 4.4195', 'for batch', 0)
('GAN loss 4.5225 ', 'GAN acc 0.0000', 'Discriminator loss 0.0343', 'Discriminator accuracy 0.9922', 'Total loss: 4.5568', 'for batch', 1)
('GAN loss 4.7447 ', 'GAN acc 0.0000', 'Discriminator loss 0.0103', 'Discriminator accuracy 0.9980', 'Total loss: 4.7549', 'for batch', 2)
('GAN loss 4.5800 ', 'GAN acc 0.0000', 'Discriminator loss 0.0335', 'Discriminator accuracy 0.9902', 'Total loss: 4.6135', 'for batch', 3)
('GAN loss 4.4602 ', 'GAN acc 0.0000', 'Discriminator loss 0.0146', 'Discriminator accuracy 0.9961', 'Total loss: 4.4749', 'for batch', 4)
('GAN loss 4.3038 ', 'GAN acc 0.0039', 'Discriminator loss 0.0789', 'Discriminator accuracy 0.9785', 'Total loss: 4.3827', 'for batch', 5)
('GAN loss 5.2796 ', 'GAN acc 0.0000', 'Discriminator loss 0.0333', 'Discriminator accuracy 0.9922', 'Total loss: 5.3129', 'for batch', 6)
('GAN loss 5.3317 ', 'GAN acc 0.0039', 'Discriminator loss 0.0168', 'Discriminator accuracy 0.9980', 'Total loss: 5.3484', 'for batch', 7)
('GAN loss 4.6433 ', 'GAN acc 0.0000', 'Discriminator loss 0.0597', 'Discriminator accuracy 0.9883', 'Total loss: 4.7031', 'for batch', 8)
('GAN loss 4.4520 ', 'GAN acc 0.0000', 'Discriminator loss 0.0295', 'Discriminator accuracy 0.9941', 'Total loss: 4.4815', 'for batch', 9)
('GAN loss 4.2072 ', 'GAN acc 0.0000', 'Discriminator loss 0.0674', 'Discriminator accuracy 0.9863', 'Total loss: 4.2746', 'for batch', 10)
('GAN loss 3.9395 ', 'GAN acc 0.0000', 'Discriminator loss 0.0536', 'Discriminator accuracy 0.9863', 'Total loss: 3.9932', 'for batch', 11)
('GAN loss 3.7328 ', 'GAN acc 0.0000', 'Discriminator loss 0.0370', 'Discriminator accuracy 0.9922', 'Total loss: 3.7698', 'for batch', 12)
('GAN loss 3.8846 ', 'GAN acc 0.0000', 'Discriminator loss 0.0274', 'Discriminator accuracy 0.9961', 'Total loss: 3.9120', 'for batch', 13)
('GAN loss 3.9270 ', 'GAN acc 0.0000', 'Discriminator loss 0.0598', 'Discriminator accuracy 0.9883', 'Total loss: 3.9868', 'for batch', 14)
('GAN loss 3.4746 ', 'GAN acc 0.0000', 'Discriminator loss 0.0763', 'Discriminator accuracy 0.9844', 'Total loss: 3.5509', 'for batch', 15)
('GAN loss 4.2578 ', 'GAN acc 0.0000', 'Discriminator loss 0.0433', 'Discriminator accuracy 0.9902', 'Total loss: 4.3011', 'for batch', 16)
('GAN loss 4.6244 ', 'GAN acc 0.0000', 'Discriminator loss 0.0343', 'Discriminator accuracy 0.9922', 'Total loss: 4.6586', 'for batch', 17)
('GAN loss 4.7084 ', 'GAN acc 0.0000', 'Discriminator loss 0.0387', 'Discriminator accuracy 0.9902', 'Total loss: 4.7471', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9865889)
('DISCRIMINATOR_Imagem FAKE=', 0.0092522111)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.549019')
----------------------------------
('Epoch', 25, 'of', 50)
('Number of batches', 19)
('GAN loss 4.4893 ', 'GAN acc 0.0000', 'Discriminator loss 0.0491', 'Discriminator accuracy 0.9883', 'Total loss: 4.5384', 'for batch', 0)
('GAN loss 4.1764 ', 'GAN acc 0.0000', 'Discriminator loss 0.0416', 'Discriminator accuracy 0.9922', 'Total loss: 4.2180', 'for batch', 1)
('GAN loss 4.3610 ', 'GAN acc 0.0000', 'Discriminator loss 0.0146', 'Discriminator accuracy 0.9961', 'Total loss: 4.3756', 'for batch', 2)
('GAN loss 4.4382 ', 'GAN acc 0.0000', 'Discriminator loss 0.0331', 'Discriminator accuracy 0.9922', 'Total loss: 4.4714', 'for batch', 3)
('GAN loss 4.6367 ', 'GAN acc 0.0000', 'Discriminator loss 0.0131', 'Discriminator accuracy 0.9961', 'Total loss: 4.6498', 'for batch', 4)
('GAN loss 4.3423 ', 'GAN acc 0.0000', 'Discriminator loss 0.0614', 'Discriminator accuracy 0.9863', 'Total loss: 4.4037', 'for batch', 5)
('GAN loss 4.4288 ', 'GAN acc 0.0000', 'Discriminator loss 0.0237', 'Discriminator accuracy 0.9941', 'Total loss: 4.4525', 'for batch', 6)
('GAN loss 4.7539 ', 'GAN acc 0.0000', 'Discriminator loss 0.0176', 'Discriminator accuracy 0.9980', 'Total loss: 4.7715', 'for batch', 7)
('GAN loss 4.5498 ', 'GAN acc 0.0000', 'Discriminator loss 0.0474', 'Discriminator accuracy 0.9902', 'Total loss: 4.5972', 'for batch', 8)
('GAN loss 4.5346 ', 'GAN acc 0.0000', 'Discriminator loss 0.0291', 'Discriminator accuracy 0.9941', 'Total loss: 4.5637', 'for batch', 9)
('GAN loss 4.6268 ', 'GAN acc 0.0000', 'Discriminator loss 0.0623', 'Discriminator accuracy 0.9883', 'Total loss: 4.6891', 'for batch', 10)
('GAN loss 5.0481 ', 'GAN acc 0.0000', 'Discriminator loss 0.0594', 'Discriminator accuracy 0.9863', 'Total loss: 5.1075', 'for batch', 11)
('GAN loss 4.9329 ', 'GAN acc 0.0000', 'Discriminator loss 0.0339', 'Discriminator accuracy 0.9922', 'Total loss: 4.9668', 'for batch', 12)
('GAN loss 4.8091 ', 'GAN acc 0.0000', 'Discriminator loss 0.0223', 'Discriminator accuracy 0.9961', 'Total loss: 4.8315', 'for batch', 13)
('GAN loss 4.3695 ', 'GAN acc 0.0000', 'Discriminator loss 0.0676', 'Discriminator accuracy 0.9844', 'Total loss: 4.4370', 'for batch', 14)
('GAN loss 3.7580 ', 'GAN acc 0.0000', 'Discriminator loss 0.0788', 'Discriminator accuracy 0.9824', 'Total loss: 3.8368', 'for batch', 15)
('GAN loss 3.6980 ', 'GAN acc 0.0000', 'Discriminator loss 0.0471', 'Discriminator accuracy 0.9902', 'Total loss: 3.7451', 'for batch', 16)
('GAN loss 3.9175 ', 'GAN acc 0.0000', 'Discriminator loss 0.0349', 'Discriminator accuracy 0.9922', 'Total loss: 3.9523', 'for batch', 17)
('GAN loss 4.1749 ', 'GAN acc 0.0000', 'Discriminator loss 0.0378', 'Discriminator accuracy 0.9922', 'Total loss: 4.2127', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98847342)
('DISCRIMINATOR_Imagem FAKE=', 0.016007908)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.032873')
----------------------------------
('Epoch', 26, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2861 ', 'GAN acc 0.0000', 'Discriminator loss 0.0359', 'Discriminator accuracy 0.9902', 'Total loss: 4.3219', 'for batch', 0)
('GAN loss 4.3209 ', 'GAN acc 0.0000', 'Discriminator loss 0.0342', 'Discriminator accuracy 0.9941', 'Total loss: 4.3550', 'for batch', 1)
('GAN loss 4.5538 ', 'GAN acc 0.0000', 'Discriminator loss 0.0086', 'Discriminator accuracy 1.0000', 'Total loss: 4.5624', 'for batch', 2)
('GAN loss 4.5147 ', 'GAN acc 0.0000', 'Discriminator loss 0.0363', 'Discriminator accuracy 0.9902', 'Total loss: 4.5510', 'for batch', 3)
('GAN loss 4.4515 ', 'GAN acc 0.0000', 'Discriminator loss 0.0132', 'Discriminator accuracy 0.9961', 'Total loss: 4.4647', 'for batch', 4)
('GAN loss 4.0088 ', 'GAN acc 0.0000', 'Discriminator loss 0.0673', 'Discriminator accuracy 0.9844', 'Total loss: 4.0761', 'for batch', 5)
('GAN loss 4.1987 ', 'GAN acc 0.0000', 'Discriminator loss 0.0239', 'Discriminator accuracy 0.9961', 'Total loss: 4.2226', 'for batch', 6)
('GAN loss 4.4680 ', 'GAN acc 0.0000', 'Discriminator loss 0.0209', 'Discriminator accuracy 0.9980', 'Total loss: 4.4889', 'for batch', 7)
('GAN loss 4.1638 ', 'GAN acc 0.0000', 'Discriminator loss 0.0545', 'Discriminator accuracy 0.9883', 'Total loss: 4.2183', 'for batch', 8)
('GAN loss 4.2396 ', 'GAN acc 0.0000', 'Discriminator loss 0.0343', 'Discriminator accuracy 0.9941', 'Total loss: 4.2740', 'for batch', 9)
('GAN loss 4.1348 ', 'GAN acc 0.0000', 'Discriminator loss 0.0660', 'Discriminator accuracy 0.9863', 'Total loss: 4.2009', 'for batch', 10)
('GAN loss 5.3705 ', 'GAN acc 0.0000', 'Discriminator loss 0.0467', 'Discriminator accuracy 0.9883', 'Total loss: 5.4172', 'for batch', 11)
('GAN loss 3.6654 ', 'GAN acc 0.0000', 'Discriminator loss 0.0385', 'Discriminator accuracy 0.9922', 'Total loss: 3.7039', 'for batch', 12)
('GAN loss 4.2709 ', 'GAN acc 0.0000', 'Discriminator loss 0.0264', 'Discriminator accuracy 0.9961', 'Total loss: 4.2973', 'for batch', 13)
('GAN loss 4.1721 ', 'GAN acc 0.0000', 'Discriminator loss 0.0581', 'Discriminator accuracy 0.9863', 'Total loss: 4.2303', 'for batch', 14)
('GAN loss 3.5470 ', 'GAN acc 0.0000', 'Discriminator loss 0.0712', 'Discriminator accuracy 0.9844', 'Total loss: 3.6182', 'for batch', 15)
('GAN loss 5.0871 ', 'GAN acc 0.0000', 'Discriminator loss 0.0450', 'Discriminator accuracy 0.9902', 'Total loss: 5.1320', 'for batch', 16)
('GAN loss 5.3358 ', 'GAN acc 0.0000', 'Discriminator loss 0.0346', 'Discriminator accuracy 0.9922', 'Total loss: 5.3703', 'for batch', 17)
('GAN loss 5.1602 ', 'GAN acc 0.0000', 'Discriminator loss 0.0400', 'Discriminator accuracy 0.9922', 'Total loss: 5.2001', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98633415)
('DISCRIMINATOR_Imagem FAKE=', 0.0061564371)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.544812')
----------------------------------
('Epoch', 27, 'of', 50)
('Number of batches', 19)
('GAN loss 4.7034 ', 'GAN acc 0.0000', 'Discriminator loss 0.0437', 'Discriminator accuracy 0.9883', 'Total loss: 4.7471', 'for batch', 0)
('GAN loss 4.1836 ', 'GAN acc 0.0000', 'Discriminator loss 0.0359', 'Discriminator accuracy 0.9922', 'Total loss: 4.2195', 'for batch', 1)
('GAN loss 4.2999 ', 'GAN acc 0.0000', 'Discriminator loss 0.0126', 'Discriminator accuracy 0.9980', 'Total loss: 4.3125', 'for batch', 2)
('GAN loss 4.4185 ', 'GAN acc 0.0000', 'Discriminator loss 0.0346', 'Discriminator accuracy 0.9922', 'Total loss: 4.4531', 'for batch', 3)
('GAN loss 4.6484 ', 'GAN acc 0.0000', 'Discriminator loss 0.0133', 'Discriminator accuracy 0.9961', 'Total loss: 4.6617', 'for batch', 4)
('GAN loss 4.2946 ', 'GAN acc 0.0000', 'Discriminator loss 0.0609', 'Discriminator accuracy 0.9883', 'Total loss: 4.3555', 'for batch', 5)
('GAN loss 4.5241 ', 'GAN acc 0.0000', 'Discriminator loss 0.0191', 'Discriminator accuracy 0.9961', 'Total loss: 4.5432', 'for batch', 6)
('GAN loss 4.8564 ', 'GAN acc 0.0000', 'Discriminator loss 0.0151', 'Discriminator accuracy 0.9980', 'Total loss: 4.8716', 'for batch', 7)
('GAN loss 4.7001 ', 'GAN acc 0.0000', 'Discriminator loss 0.0460', 'Discriminator accuracy 0.9922', 'Total loss: 4.7461', 'for batch', 8)
('GAN loss 4.6754 ', 'GAN acc 0.0000', 'Discriminator loss 0.0264', 'Discriminator accuracy 0.9941', 'Total loss: 4.7018', 'for batch', 9)
('GAN loss 4.3095 ', 'GAN acc 0.0000', 'Discriminator loss 0.0508', 'Discriminator accuracy 0.9863', 'Total loss: 4.3602', 'for batch', 10)
('GAN loss 4.0171 ', 'GAN acc 0.0000', 'Discriminator loss 0.0414', 'Discriminator accuracy 0.9902', 'Total loss: 4.0585', 'for batch', 11)
('GAN loss 4.3449 ', 'GAN acc 0.0000', 'Discriminator loss 0.0326', 'Discriminator accuracy 0.9922', 'Total loss: 4.3775', 'for batch', 12)
('GAN loss 4.7494 ', 'GAN acc 0.0000', 'Discriminator loss 0.0173', 'Discriminator accuracy 0.9980', 'Total loss: 4.7667', 'for batch', 13)
('GAN loss 4.4081 ', 'GAN acc 0.0000', 'Discriminator loss 0.0630', 'Discriminator accuracy 0.9883', 'Total loss: 4.4711', 'for batch', 14)
('GAN loss 3.8881 ', 'GAN acc 0.0000', 'Discriminator loss 0.0834', 'Discriminator accuracy 0.9844', 'Total loss: 3.9714', 'for batch', 15)
('GAN loss 4.1248 ', 'GAN acc 0.0000', 'Discriminator loss 0.0518', 'Discriminator accuracy 0.9902', 'Total loss: 4.1766', 'for batch', 16)
('GAN loss 4.2341 ', 'GAN acc 0.0000', 'Discriminator loss 0.0360', 'Discriminator accuracy 0.9922', 'Total loss: 4.2701', 'for batch', 17)
('GAN loss 4.1524 ', 'GAN acc 0.0000', 'Discriminator loss 0.0377', 'Discriminator accuracy 0.9922', 'Total loss: 4.1901', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99107087)
('DISCRIMINATOR_Imagem FAKE=', 0.021281581)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.019599')
----------------------------------
('Epoch', 28, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2928 ', 'GAN acc 0.0000', 'Discriminator loss 0.0375', 'Discriminator accuracy 0.9922', 'Total loss: 4.3304', 'for batch', 0)
('GAN loss 4.5762 ', 'GAN acc 0.0000', 'Discriminator loss 0.0367', 'Discriminator accuracy 0.9922', 'Total loss: 4.6130', 'for batch', 1)
('GAN loss 4.8006 ', 'GAN acc 0.0000', 'Discriminator loss 0.0090', 'Discriminator accuracy 0.9980', 'Total loss: 4.8096', 'for batch', 2)
('GAN loss 4.5992 ', 'GAN acc 0.0000', 'Discriminator loss 0.0373', 'Discriminator accuracy 0.9902', 'Total loss: 4.6364', 'for batch', 3)
('GAN loss 4.7346 ', 'GAN acc 0.0000', 'Discriminator loss 0.0192', 'Discriminator accuracy 0.9941', 'Total loss: 4.7538', 'for batch', 4)
('GAN loss 4.1835 ', 'GAN acc 0.0000', 'Discriminator loss 0.0638', 'Discriminator accuracy 0.9863', 'Total loss: 4.2474', 'for batch', 5)
('GAN loss 4.3303 ', 'GAN acc 0.0000', 'Discriminator loss 0.0263', 'Discriminator accuracy 0.9961', 'Total loss: 4.3566', 'for batch', 6)
('GAN loss 4.7885 ', 'GAN acc 0.0000', 'Discriminator loss 0.0176', 'Discriminator accuracy 0.9980', 'Total loss: 4.8062', 'for batch', 7)
('GAN loss 4.7297 ', 'GAN acc 0.0000', 'Discriminator loss 0.0433', 'Discriminator accuracy 0.9902', 'Total loss: 4.7730', 'for batch', 8)
('GAN loss 4.7216 ', 'GAN acc 0.0000', 'Discriminator loss 0.0257', 'Discriminator accuracy 0.9941', 'Total loss: 4.7473', 'for batch', 9)
('GAN loss 4.3074 ', 'GAN acc 0.0000', 'Discriminator loss 0.0554', 'Discriminator accuracy 0.9863', 'Total loss: 4.3627', 'for batch', 10)
('GAN loss 3.8757 ', 'GAN acc 0.0000', 'Discriminator loss 0.0449', 'Discriminator accuracy 0.9902', 'Total loss: 3.9206', 'for batch', 11)
('GAN loss 4.3540 ', 'GAN acc 0.0000', 'Discriminator loss 0.0378', 'Discriminator accuracy 0.9941', 'Total loss: 4.3918', 'for batch', 12)
('GAN loss 4.7565 ', 'GAN acc 0.0000', 'Discriminator loss 0.0212', 'Discriminator accuracy 0.9961', 'Total loss: 4.7777', 'for batch', 13)
('GAN loss 4.5145 ', 'GAN acc 0.0000', 'Discriminator loss 0.0677', 'Discriminator accuracy 0.9863', 'Total loss: 4.5821', 'for batch', 14)
('GAN loss 4.1656 ', 'GAN acc 0.0000', 'Discriminator loss 0.0832', 'Discriminator accuracy 0.9824', 'Total loss: 4.2488', 'for batch', 15)
('GAN loss 3.9856 ', 'GAN acc 0.0000', 'Discriminator loss 0.0443', 'Discriminator accuracy 0.9902', 'Total loss: 4.0299', 'for batch', 16)
('GAN loss 3.9464 ', 'GAN acc 0.0000', 'Discriminator loss 0.0358', 'Discriminator accuracy 0.9902', 'Total loss: 3.9822', 'for batch', 17)
('GAN loss 4.1180 ', 'GAN acc 0.0000', 'Discriminator loss 0.0376', 'Discriminator accuracy 0.9922', 'Total loss: 4.1556', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98917544)
('DISCRIMINATOR_Imagem FAKE=', 0.017557452)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.549402')
----------------------------------
('Epoch', 29, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2452 ', 'GAN acc 0.0000', 'Discriminator loss 0.0374', 'Discriminator accuracy 0.9902', 'Total loss: 4.2826', 'for batch', 0)
('GAN loss 4.3796 ', 'GAN acc 0.0000', 'Discriminator loss 0.0337', 'Discriminator accuracy 0.9941', 'Total loss: 4.4133', 'for batch', 1)
('GAN loss 4.6899 ', 'GAN acc 0.0000', 'Discriminator loss 0.0077', 'Discriminator accuracy 1.0000', 'Total loss: 4.6977', 'for batch', 2)
('GAN loss 4.4947 ', 'GAN acc 0.0000', 'Discriminator loss 0.0390', 'Discriminator accuracy 0.9902', 'Total loss: 4.5337', 'for batch', 3)
('GAN loss 4.4678 ', 'GAN acc 0.0000', 'Discriminator loss 0.0154', 'Discriminator accuracy 0.9961', 'Total loss: 4.4832', 'for batch', 4)
('GAN loss 3.9659 ', 'GAN acc 0.0000', 'Discriminator loss 0.0647', 'Discriminator accuracy 0.9844', 'Total loss: 4.0307', 'for batch', 5)
('GAN loss 4.3866 ', 'GAN acc 0.0000', 'Discriminator loss 0.0270', 'Discriminator accuracy 0.9961', 'Total loss: 4.4135', 'for batch', 6)
('GAN loss 4.8242 ', 'GAN acc 0.0000', 'Discriminator loss 0.0161', 'Discriminator accuracy 0.9980', 'Total loss: 4.8403', 'for batch', 7)
('GAN loss 4.6415 ', 'GAN acc 0.0000', 'Discriminator loss 0.0472', 'Discriminator accuracy 0.9902', 'Total loss: 4.6887', 'for batch', 8)
('GAN loss 4.6128 ', 'GAN acc 0.0000', 'Discriminator loss 0.0268', 'Discriminator accuracy 0.9941', 'Total loss: 4.6396', 'for batch', 9)
('GAN loss 4.2679 ', 'GAN acc 0.0000', 'Discriminator loss 0.0570', 'Discriminator accuracy 0.9863', 'Total loss: 4.3249', 'for batch', 10)
('GAN loss 3.7832 ', 'GAN acc 0.0000', 'Discriminator loss 0.0462', 'Discriminator accuracy 0.9883', 'Total loss: 3.8294', 'for batch', 11)
('GAN loss 4.0006 ', 'GAN acc 0.0000', 'Discriminator loss 0.0417', 'Discriminator accuracy 0.9922', 'Total loss: 4.0424', 'for batch', 12)
('GAN loss 4.4628 ', 'GAN acc 0.0000', 'Discriminator loss 0.0202', 'Discriminator accuracy 0.9980', 'Total loss: 4.4830', 'for batch', 13)
('GAN loss 4.3747 ', 'GAN acc 0.0000', 'Discriminator loss 0.0643', 'Discriminator accuracy 0.9863', 'Total loss: 4.4390', 'for batch', 14)
('GAN loss 4.0484 ', 'GAN acc 0.0000', 'Discriminator loss 0.0770', 'Discriminator accuracy 0.9844', 'Total loss: 4.1254', 'for batch', 15)
('GAN loss 3.8394 ', 'GAN acc 0.0000', 'Discriminator loss 0.0448', 'Discriminator accuracy 0.9902', 'Total loss: 3.8842', 'for batch', 16)
('GAN loss 3.9385 ', 'GAN acc 0.0000', 'Discriminator loss 0.0339', 'Discriminator accuracy 0.9941', 'Total loss: 3.9724', 'for batch', 17)
('GAN loss 4.0097 ', 'GAN acc 0.0000', 'Discriminator loss 0.0370', 'Discriminator accuracy 0.9922', 'Total loss: 4.0467', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98987257)
('DISCRIMINATOR_Imagem FAKE=', 0.020460326)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.005805')
----------------------------------
('Epoch', 30, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0624 ', 'GAN acc 0.0000', 'Discriminator loss 0.0312', 'Discriminator accuracy 0.9922', 'Total loss: 4.0936', 'for batch', 0)
('GAN loss 4.2569 ', 'GAN acc 0.0000', 'Discriminator loss 0.0330', 'Discriminator accuracy 0.9941', 'Total loss: 4.2899', 'for batch', 1)
('GAN loss 4.5306 ', 'GAN acc 0.0000', 'Discriminator loss 0.0125', 'Discriminator accuracy 0.9980', 'Total loss: 4.5431', 'for batch', 2)
('GAN loss 4.3283 ', 'GAN acc 0.0000', 'Discriminator loss 0.0455', 'Discriminator accuracy 0.9902', 'Total loss: 4.3738', 'for batch', 3)
('GAN loss 4.5108 ', 'GAN acc 0.0000', 'Discriminator loss 0.0139', 'Discriminator accuracy 0.9980', 'Total loss: 4.5247', 'for batch', 4)
('GAN loss 3.9439 ', 'GAN acc 0.0000', 'Discriminator loss 0.0626', 'Discriminator accuracy 0.9863', 'Total loss: 4.0065', 'for batch', 5)
('GAN loss 4.3866 ', 'GAN acc 0.0000', 'Discriminator loss 0.0239', 'Discriminator accuracy 0.9961', 'Total loss: 4.4105', 'for batch', 6)
('GAN loss 4.8145 ', 'GAN acc 0.0000', 'Discriminator loss 0.0164', 'Discriminator accuracy 0.9980', 'Total loss: 4.8309', 'for batch', 7)
('GAN loss 4.5572 ', 'GAN acc 0.0000', 'Discriminator loss 0.0475', 'Discriminator accuracy 0.9902', 'Total loss: 4.6047', 'for batch', 8)
('GAN loss 4.4964 ', 'GAN acc 0.0000', 'Discriminator loss 0.0279', 'Discriminator accuracy 0.9941', 'Total loss: 4.5242', 'for batch', 9)
('GAN loss 4.2088 ', 'GAN acc 0.0000', 'Discriminator loss 0.0563', 'Discriminator accuracy 0.9863', 'Total loss: 4.2651', 'for batch', 10)
('GAN loss 4.0640 ', 'GAN acc 0.0000', 'Discriminator loss 0.0426', 'Discriminator accuracy 0.9902', 'Total loss: 4.1066', 'for batch', 11)
('GAN loss 4.1755 ', 'GAN acc 0.0000', 'Discriminator loss 0.0354', 'Discriminator accuracy 0.9941', 'Total loss: 4.2108', 'for batch', 12)
('GAN loss 4.5186 ', 'GAN acc 0.0000', 'Discriminator loss 0.0211', 'Discriminator accuracy 0.9961', 'Total loss: 4.5397', 'for batch', 13)
('GAN loss 4.3984 ', 'GAN acc 0.0000', 'Discriminator loss 0.0603', 'Discriminator accuracy 0.9863', 'Total loss: 4.4587', 'for batch', 14)
('GAN loss 3.9874 ', 'GAN acc 0.0000', 'Discriminator loss 0.0730', 'Discriminator accuracy 0.9844', 'Total loss: 4.0604', 'for batch', 15)
('GAN loss 3.7430 ', 'GAN acc 0.0000', 'Discriminator loss 0.0409', 'Discriminator accuracy 0.9902', 'Total loss: 3.7839', 'for batch', 16)
('GAN loss 4.0082 ', 'GAN acc 0.0000', 'Discriminator loss 0.0306', 'Discriminator accuracy 0.9941', 'Total loss: 4.0388', 'for batch', 17)
('GAN loss 4.2885 ', 'GAN acc 0.0000', 'Discriminator loss 0.0365', 'Discriminator accuracy 0.9922', 'Total loss: 4.3250', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99051142)
('DISCRIMINATOR_Imagem FAKE=', 0.014300499)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.547460')
----------------------------------
('Epoch', 31, 'of', 50)
('Number of batches', 19)
('GAN loss 4.5146 ', 'GAN acc 0.0000', 'Discriminator loss 0.0323', 'Discriminator accuracy 0.9902', 'Total loss: 4.5469', 'for batch', 0)
('GAN loss 4.5204 ', 'GAN acc 0.0000', 'Discriminator loss 0.0314', 'Discriminator accuracy 0.9941', 'Total loss: 4.5518', 'for batch', 1)
('GAN loss 4.9033 ', 'GAN acc 0.0000', 'Discriminator loss 0.0058', 'Discriminator accuracy 1.0000', 'Total loss: 4.9092', 'for batch', 2)
('GAN loss 4.8189 ', 'GAN acc 0.0000', 'Discriminator loss 0.0320', 'Discriminator accuracy 0.9922', 'Total loss: 4.8509', 'for batch', 3)
('GAN loss 4.8347 ', 'GAN acc 0.0000', 'Discriminator loss 0.0119', 'Discriminator accuracy 0.9980', 'Total loss: 4.8466', 'for batch', 4)
('GAN loss 4.1413 ', 'GAN acc 0.0000', 'Discriminator loss 0.0652', 'Discriminator accuracy 0.9844', 'Total loss: 4.2066', 'for batch', 5)
('GAN loss 4.6384 ', 'GAN acc 0.0000', 'Discriminator loss 0.0213', 'Discriminator accuracy 0.9961', 'Total loss: 4.6597', 'for batch', 6)
('GAN loss 4.9704 ', 'GAN acc 0.0000', 'Discriminator loss 0.0144', 'Discriminator accuracy 0.9980', 'Total loss: 4.9849', 'for batch', 7)
('GAN loss 4.5269 ', 'GAN acc 0.0000', 'Discriminator loss 0.0492', 'Discriminator accuracy 0.9902', 'Total loss: 4.5761', 'for batch', 8)
('GAN loss 4.5949 ', 'GAN acc 0.0000', 'Discriminator loss 0.0288', 'Discriminator accuracy 0.9941', 'Total loss: 4.6237', 'for batch', 9)
('GAN loss 4.3375 ', 'GAN acc 0.0000', 'Discriminator loss 0.0520', 'Discriminator accuracy 0.9863', 'Total loss: 4.3896', 'for batch', 10)
('GAN loss 3.9680 ', 'GAN acc 0.0000', 'Discriminator loss 0.0419', 'Discriminator accuracy 0.9902', 'Total loss: 4.0099', 'for batch', 11)
('GAN loss 3.9843 ', 'GAN acc 0.0000', 'Discriminator loss 0.0339', 'Discriminator accuracy 0.9922', 'Total loss: 4.0181', 'for batch', 12)
('GAN loss 4.3472 ', 'GAN acc 0.0000', 'Discriminator loss 0.0186', 'Discriminator accuracy 0.9980', 'Total loss: 4.3657', 'for batch', 13)
('GAN loss 4.2502 ', 'GAN acc 0.0000', 'Discriminator loss 0.0587', 'Discriminator accuracy 0.9883', 'Total loss: 4.3089', 'for batch', 14)
('GAN loss 3.7764 ', 'GAN acc 0.0000', 'Discriminator loss 0.0694', 'Discriminator accuracy 0.9844', 'Total loss: 3.8457', 'for batch', 15)
('GAN loss 3.6852 ', 'GAN acc 0.0000', 'Discriminator loss 0.0397', 'Discriminator accuracy 0.9902', 'Total loss: 3.7249', 'for batch', 16)
('GAN loss 4.9920 ', 'GAN acc 0.0000', 'Discriminator loss 0.0350', 'Discriminator accuracy 0.9961', 'Total loss: 5.0270', 'for batch', 17)
('GAN loss 5.3383 ', 'GAN acc 0.0000', 'Discriminator loss 0.0407', 'Discriminator accuracy 0.9922', 'Total loss: 5.3791', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98843724)
('DISCRIMINATOR_Imagem FAKE=', 0.005087255)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.952571')
----------------------------------
('Epoch', 32, 'of', 50)
('Number of batches', 19)
('GAN loss 5.2847 ', 'GAN acc 0.0000', 'Discriminator loss 0.0244', 'Discriminator accuracy 0.9922', 'Total loss: 5.3091', 'for batch', 0)
('GAN loss 5.1000 ', 'GAN acc 0.0000', 'Discriminator loss 0.0324', 'Discriminator accuracy 0.9941', 'Total loss: 5.1323', 'for batch', 1)
('GAN loss 5.0093 ', 'GAN acc 0.0000', 'Discriminator loss 0.0053', 'Discriminator accuracy 0.9980', 'Total loss: 5.0146', 'for batch', 2)
('GAN loss 4.7966 ', 'GAN acc 0.0000', 'Discriminator loss 0.0317', 'Discriminator accuracy 0.9922', 'Total loss: 4.8283', 'for batch', 3)
('GAN loss 4.6703 ', 'GAN acc 0.0000', 'Discriminator loss 0.0101', 'Discriminator accuracy 0.9961', 'Total loss: 4.6804', 'for batch', 4)
('GAN loss 4.2721 ', 'GAN acc 0.0000', 'Discriminator loss 0.0528', 'Discriminator accuracy 0.9883', 'Total loss: 4.3249', 'for batch', 5)
('GAN loss 4.3554 ', 'GAN acc 0.0000', 'Discriminator loss 0.0175', 'Discriminator accuracy 0.9961', 'Total loss: 4.3728', 'for batch', 6)
('GAN loss 4.7181 ', 'GAN acc 0.0000', 'Discriminator loss 0.0157', 'Discriminator accuracy 0.9980', 'Total loss: 4.7338', 'for batch', 7)
('GAN loss 4.6338 ', 'GAN acc 0.0000', 'Discriminator loss 0.0420', 'Discriminator accuracy 0.9922', 'Total loss: 4.6758', 'for batch', 8)
('GAN loss 4.6933 ', 'GAN acc 0.0000', 'Discriminator loss 0.0251', 'Discriminator accuracy 0.9961', 'Total loss: 4.7184', 'for batch', 9)
('GAN loss 4.5940 ', 'GAN acc 0.0000', 'Discriminator loss 0.0345', 'Discriminator accuracy 0.9922', 'Total loss: 4.6284', 'for batch', 10)
('GAN loss 4.3386 ', 'GAN acc 0.0000', 'Discriminator loss 0.0364', 'Discriminator accuracy 0.9902', 'Total loss: 4.3750', 'for batch', 11)
('GAN loss 4.3765 ', 'GAN acc 0.0000', 'Discriminator loss 0.0248', 'Discriminator accuracy 0.9961', 'Total loss: 4.4013', 'for batch', 12)
('GAN loss 4.6732 ', 'GAN acc 0.0000', 'Discriminator loss 0.0155', 'Discriminator accuracy 0.9980', 'Total loss: 4.6887', 'for batch', 13)
('GAN loss 4.5266 ', 'GAN acc 0.0000', 'Discriminator loss 0.0538', 'Discriminator accuracy 0.9883', 'Total loss: 4.5804', 'for batch', 14)
('GAN loss 4.1297 ', 'GAN acc 0.0000', 'Discriminator loss 0.0649', 'Discriminator accuracy 0.9844', 'Total loss: 4.1946', 'for batch', 15)
('GAN loss 4.0765 ', 'GAN acc 0.0000', 'Discriminator loss 0.0435', 'Discriminator accuracy 0.9922', 'Total loss: 4.1200', 'for batch', 16)
('GAN loss 5.4066 ', 'GAN acc 0.0000', 'Discriminator loss 0.0645', 'Discriminator accuracy 0.9863', 'Total loss: 5.4712', 'for batch', 17)
('GAN loss 6.0058 ', 'GAN acc 0.0000', 'Discriminator loss 0.0577', 'Discriminator accuracy 0.9902', 'Total loss: 6.0635', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98216736)
('DISCRIMINATOR_Imagem FAKE=', 0.0366363)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.565262')
----------------------------------
('Epoch', 33, 'of', 50)
('Number of batches', 19)
('GAN loss 6.0524 ', 'GAN acc 0.0000', 'Discriminator loss 0.0533', 'Discriminator accuracy 0.9863', 'Total loss: 6.1057', 'for batch', 0)
('GAN loss 5.5377 ', 'GAN acc 0.0000', 'Discriminator loss 0.0543', 'Discriminator accuracy 0.9883', 'Total loss: 5.5920', 'for batch', 1)
('GAN loss 5.1432 ', 'GAN acc 0.0000', 'Discriminator loss 0.0149', 'Discriminator accuracy 0.9980', 'Total loss: 5.1581', 'for batch', 2)
('GAN loss 4.4604 ', 'GAN acc 0.0000', 'Discriminator loss 0.0679', 'Discriminator accuracy 0.9844', 'Total loss: 4.5283', 'for batch', 3)
('GAN loss 4.2403 ', 'GAN acc 0.0000', 'Discriminator loss 0.0183', 'Discriminator accuracy 0.9961', 'Total loss: 4.2587', 'for batch', 4)
('GAN loss 4.0573 ', 'GAN acc 0.0000', 'Discriminator loss 0.0615', 'Discriminator accuracy 0.9863', 'Total loss: 4.1188', 'for batch', 5)
('GAN loss 4.0648 ', 'GAN acc 0.0000', 'Discriminator loss 0.0260', 'Discriminator accuracy 0.9961', 'Total loss: 4.0908', 'for batch', 6)
('GAN loss 4.2660 ', 'GAN acc 0.0000', 'Discriminator loss 0.0183', 'Discriminator accuracy 0.9980', 'Total loss: 4.2843', 'for batch', 7)
('GAN loss 4.3053 ', 'GAN acc 0.0000', 'Discriminator loss 0.0408', 'Discriminator accuracy 0.9922', 'Total loss: 4.3461', 'for batch', 8)
('GAN loss 4.3414 ', 'GAN acc 0.0000', 'Discriminator loss 0.0297', 'Discriminator accuracy 0.9941', 'Total loss: 4.3711', 'for batch', 9)
('GAN loss 4.0877 ', 'GAN acc 0.0000', 'Discriminator loss 0.0515', 'Discriminator accuracy 0.9883', 'Total loss: 4.1392', 'for batch', 10)
('GAN loss 3.7704 ', 'GAN acc 0.0000', 'Discriminator loss 0.0435', 'Discriminator accuracy 0.9902', 'Total loss: 3.8138', 'for batch', 11)
('GAN loss 4.2953 ', 'GAN acc 0.0000', 'Discriminator loss 0.0396', 'Discriminator accuracy 0.9922', 'Total loss: 4.3349', 'for batch', 12)
('GAN loss 4.7203 ', 'GAN acc 0.0000', 'Discriminator loss 0.0180', 'Discriminator accuracy 0.9980', 'Total loss: 4.7382', 'for batch', 13)
('GAN loss 4.5766 ', 'GAN acc 0.0000', 'Discriminator loss 0.0670', 'Discriminator accuracy 0.9863', 'Total loss: 4.6436', 'for batch', 14)
('GAN loss 4.1696 ', 'GAN acc 0.0000', 'Discriminator loss 0.0765', 'Discriminator accuracy 0.9844', 'Total loss: 4.2461', 'for batch', 15)
('GAN loss 3.8145 ', 'GAN acc 0.0000', 'Discriminator loss 0.0431', 'Discriminator accuracy 0.9902', 'Total loss: 3.8576', 'for batch', 16)
('GAN loss 3.9331 ', 'GAN acc 0.0000', 'Discriminator loss 0.0297', 'Discriminator accuracy 0.9941', 'Total loss: 3.9628', 'for batch', 17)
('GAN loss 4.1924 ', 'GAN acc 0.0000', 'Discriminator loss 0.0349', 'Discriminator accuracy 0.9922', 'Total loss: 4.2273', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99217957)
('DISCRIMINATOR_Imagem FAKE=', 0.015696133)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.958053')
----------------------------------
('Epoch', 34, 'of', 50)
('Number of batches', 19)
('GAN loss 4.5052 ', 'GAN acc 0.0000', 'Discriminator loss 0.0270', 'Discriminator accuracy 0.9941', 'Total loss: 4.5322', 'for batch', 0)
('GAN loss 4.6730 ', 'GAN acc 0.0000', 'Discriminator loss 0.0295', 'Discriminator accuracy 0.9941', 'Total loss: 4.7026', 'for batch', 1)
('GAN loss 4.9591 ', 'GAN acc 0.0000', 'Discriminator loss 0.0054', 'Discriminator accuracy 1.0000', 'Total loss: 4.9645', 'for batch', 2)
('GAN loss 4.9802 ', 'GAN acc 0.0000', 'Discriminator loss 0.0291', 'Discriminator accuracy 0.9922', 'Total loss: 5.0093', 'for batch', 3)
('GAN loss 4.8815 ', 'GAN acc 0.0000', 'Discriminator loss 0.0107', 'Discriminator accuracy 0.9980', 'Total loss: 4.8922', 'for batch', 4)
('GAN loss 4.3552 ', 'GAN acc 0.0000', 'Discriminator loss 0.0715', 'Discriminator accuracy 0.9883', 'Total loss: 4.4267', 'for batch', 5)
('GAN loss 5.3658 ', 'GAN acc 0.0000', 'Discriminator loss 0.0264', 'Discriminator accuracy 0.9961', 'Total loss: 5.3922', 'for batch', 6)
('GAN loss 5.4332 ', 'GAN acc 0.0000', 'Discriminator loss 0.0164', 'Discriminator accuracy 0.9980', 'Total loss: 5.4496', 'for batch', 7)
('GAN loss 5.4094 ', 'GAN acc 0.0000', 'Discriminator loss 0.0456', 'Discriminator accuracy 0.9922', 'Total loss: 5.4551', 'for batch', 8)
('GAN loss 5.0532 ', 'GAN acc 0.0000', 'Discriminator loss 0.0247', 'Discriminator accuracy 0.9961', 'Total loss: 5.0779', 'for batch', 9)
('GAN loss 4.3261 ', 'GAN acc 0.0000', 'Discriminator loss 0.0549', 'Discriminator accuracy 0.9863', 'Total loss: 4.3810', 'for batch', 10)
('GAN loss 9.0507 ', 'GAN acc 0.0000', 'Discriminator loss 0.1105', 'Discriminator accuracy 0.9648', 'Total loss: 9.1612', 'for batch', 11)
('GAN loss 5.6464 ', 'GAN acc 0.0000', 'Discriminator loss 0.0500', 'Discriminator accuracy 0.9922', 'Total loss: 5.6964', 'for batch', 12)
('GAN loss 5.4030 ', 'GAN acc 0.0000', 'Discriminator loss 0.0655', 'Discriminator accuracy 0.9902', 'Total loss: 5.4684', 'for batch', 13)
('GAN loss 4.4091 ', 'GAN acc 0.0000', 'Discriminator loss 0.1477', 'Discriminator accuracy 0.9766', 'Total loss: 4.5568', 'for batch', 14)
('GAN loss 3.3680 ', 'GAN acc 0.0000', 'Discriminator loss 0.1189', 'Discriminator accuracy 0.9746', 'Total loss: 3.4868', 'for batch', 15)
('GAN loss 2.9383 ', 'GAN acc 0.0000', 'Discriminator loss 0.0634', 'Discriminator accuracy 0.9844', 'Total loss: 3.0017', 'for batch', 16)
('GAN loss 3.0263 ', 'GAN acc 0.0000', 'Discriminator loss 0.0664', 'Discriminator accuracy 0.9844', 'Total loss: 3.0927', 'for batch', 17)
('GAN loss 3.5087 ', 'GAN acc 0.0000', 'Discriminator loss 0.0522', 'Discriminator accuracy 0.9902', 'Total loss: 3.5608', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98460364)
('DISCRIMINATOR_Imagem FAKE=', 0.032484237)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.521028')
----------------------------------
('Epoch', 35, 'of', 50)
('Number of batches', 19)
('GAN loss 3.8367 ', 'GAN acc 0.0000', 'Discriminator loss 0.0578', 'Discriminator accuracy 0.9883', 'Total loss: 3.8945', 'for batch', 0)
('GAN loss 4.0583 ', 'GAN acc 0.0000', 'Discriminator loss 0.0425', 'Discriminator accuracy 0.9902', 'Total loss: 4.1008', 'for batch', 1)
('GAN loss 4.3186 ', 'GAN acc 0.0000', 'Discriminator loss 0.0117', 'Discriminator accuracy 0.9980', 'Total loss: 4.3303', 'for batch', 2)
('GAN loss 4.2467 ', 'GAN acc 0.0000', 'Discriminator loss 0.0501', 'Discriminator accuracy 0.9902', 'Total loss: 4.2968', 'for batch', 3)
('GAN loss 4.3888 ', 'GAN acc 0.0000', 'Discriminator loss 0.0209', 'Discriminator accuracy 0.9961', 'Total loss: 4.4096', 'for batch', 4)
('GAN loss 4.1414 ', 'GAN acc 0.0000', 'Discriminator loss 0.0593', 'Discriminator accuracy 0.9863', 'Total loss: 4.2008', 'for batch', 5)
('GAN loss 4.4243 ', 'GAN acc 0.0000', 'Discriminator loss 0.0221', 'Discriminator accuracy 0.9961', 'Total loss: 4.4464', 'for batch', 6)
('GAN loss 4.6072 ', 'GAN acc 0.0000', 'Discriminator loss 0.0156', 'Discriminator accuracy 0.9980', 'Total loss: 4.6229', 'for batch', 7)
('GAN loss 4.3532 ', 'GAN acc 0.0000', 'Discriminator loss 0.0452', 'Discriminator accuracy 0.9922', 'Total loss: 4.3984', 'for batch', 8)
('GAN loss 4.4120 ', 'GAN acc 0.0000', 'Discriminator loss 0.0322', 'Discriminator accuracy 0.9941', 'Total loss: 4.4442', 'for batch', 9)
('GAN loss 4.2662 ', 'GAN acc 0.0000', 'Discriminator loss 0.0583', 'Discriminator accuracy 0.9883', 'Total loss: 4.3245', 'for batch', 10)
('GAN loss 3.9144 ', 'GAN acc 0.0000', 'Discriminator loss 0.0421', 'Discriminator accuracy 0.9883', 'Total loss: 3.9566', 'for batch', 11)
('GAN loss 4.0646 ', 'GAN acc 0.0000', 'Discriminator loss 0.0384', 'Discriminator accuracy 0.9922', 'Total loss: 4.1030', 'for batch', 12)
('GAN loss 4.2624 ', 'GAN acc 0.0000', 'Discriminator loss 0.0200', 'Discriminator accuracy 0.9980', 'Total loss: 4.2824', 'for batch', 13)
('GAN loss 4.1869 ', 'GAN acc 0.0000', 'Discriminator loss 0.0690', 'Discriminator accuracy 0.9863', 'Total loss: 4.2559', 'for batch', 14)
('GAN loss 4.0361 ', 'GAN acc 0.0000', 'Discriminator loss 0.0742', 'Discriminator accuracy 0.9844', 'Total loss: 4.1104', 'for batch', 15)
('GAN loss 3.9499 ', 'GAN acc 0.0000', 'Discriminator loss 0.0427', 'Discriminator accuracy 0.9902', 'Total loss: 3.9926', 'for batch', 16)
('GAN loss 4.0751 ', 'GAN acc 0.0000', 'Discriminator loss 0.0289', 'Discriminator accuracy 0.9961', 'Total loss: 4.1040', 'for batch', 17)
('GAN loss 4.1831 ', 'GAN acc 0.0000', 'Discriminator loss 0.0363', 'Discriminator accuracy 0.9922', 'Total loss: 4.2193', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99056935)
('DISCRIMINATOR_Imagem FAKE=', 0.014266493)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.976344')
----------------------------------
('Epoch', 36, 'of', 50)
('Number of batches', 19)
('GAN loss 4.3304 ', 'GAN acc 0.0000', 'Discriminator loss 0.0314', 'Discriminator accuracy 0.9922', 'Total loss: 4.3618', 'for batch', 0)
('GAN loss 4.4522 ', 'GAN acc 0.0000', 'Discriminator loss 0.0324', 'Discriminator accuracy 0.9941', 'Total loss: 4.4846', 'for batch', 1)
('GAN loss 4.6399 ', 'GAN acc 0.0000', 'Discriminator loss 0.0070', 'Discriminator accuracy 1.0000', 'Total loss: 4.6469', 'for batch', 2)
('GAN loss 4.6614 ', 'GAN acc 0.0000', 'Discriminator loss 0.0291', 'Discriminator accuracy 0.9922', 'Total loss: 4.6905', 'for batch', 3)
('GAN loss 4.7076 ', 'GAN acc 0.0000', 'Discriminator loss 0.0135', 'Discriminator accuracy 0.9980', 'Total loss: 4.7212', 'for batch', 4)
('GAN loss 4.4218 ', 'GAN acc 0.0000', 'Discriminator loss 0.0603', 'Discriminator accuracy 0.9863', 'Total loss: 4.4821', 'for batch', 5)
('GAN loss 4.4238 ', 'GAN acc 0.0000', 'Discriminator loss 0.0169', 'Discriminator accuracy 0.9961', 'Total loss: 4.4407', 'for batch', 6)
('GAN loss 4.6230 ', 'GAN acc 0.0000', 'Discriminator loss 0.0153', 'Discriminator accuracy 0.9980', 'Total loss: 4.6383', 'for batch', 7)
('GAN loss 4.6388 ', 'GAN acc 0.0000', 'Discriminator loss 0.0430', 'Discriminator accuracy 0.9922', 'Total loss: 4.6819', 'for batch', 8)
('GAN loss 4.6440 ', 'GAN acc 0.0000', 'Discriminator loss 0.0261', 'Discriminator accuracy 0.9941', 'Total loss: 4.6701', 'for batch', 9)
('GAN loss 4.3797 ', 'GAN acc 0.0000', 'Discriminator loss 0.0483', 'Discriminator accuracy 0.9863', 'Total loss: 4.4280', 'for batch', 10)
('GAN loss 4.0701 ', 'GAN acc 0.0000', 'Discriminator loss 0.0385', 'Discriminator accuracy 0.9902', 'Total loss: 4.1086', 'for batch', 11)
('GAN loss 4.2127 ', 'GAN acc 0.0000', 'Discriminator loss 0.0359', 'Discriminator accuracy 0.9922', 'Total loss: 4.2487', 'for batch', 12)
('GAN loss 4.5824 ', 'GAN acc 0.0000', 'Discriminator loss 0.0188', 'Discriminator accuracy 0.9980', 'Total loss: 4.6012', 'for batch', 13)
('GAN loss 4.5975 ', 'GAN acc 0.0000', 'Discriminator loss 0.0590', 'Discriminator accuracy 0.9863', 'Total loss: 4.6565', 'for batch', 14)
('GAN loss 4.3080 ', 'GAN acc 0.0000', 'Discriminator loss 0.0692', 'Discriminator accuracy 0.9844', 'Total loss: 4.3772', 'for batch', 15)
('GAN loss 4.0921 ', 'GAN acc 0.0000', 'Discriminator loss 0.0452', 'Discriminator accuracy 0.9902', 'Total loss: 4.1373', 'for batch', 16)
('GAN loss 4.0642 ', 'GAN acc 0.0000', 'Discriminator loss 0.0267', 'Discriminator accuracy 0.9961', 'Total loss: 4.0909', 'for batch', 17)
('GAN loss 4.1202 ', 'GAN acc 0.0000', 'Discriminator loss 0.0337', 'Discriminator accuracy 0.9941', 'Total loss: 4.1539', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99037731)
('DISCRIMINATOR_Imagem FAKE=', 0.016545776)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.537034')
----------------------------------
('Epoch', 37, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2401 ', 'GAN acc 0.0000', 'Discriminator loss 0.0252', 'Discriminator accuracy 0.9922', 'Total loss: 4.2653', 'for batch', 0)
('GAN loss 4.3943 ', 'GAN acc 0.0000', 'Discriminator loss 0.0289', 'Discriminator accuracy 0.9941', 'Total loss: 4.4233', 'for batch', 1)
('GAN loss 4.6972 ', 'GAN acc 0.0000', 'Discriminator loss 0.0067', 'Discriminator accuracy 1.0000', 'Total loss: 4.7038', 'for batch', 2)
('GAN loss 4.7624 ', 'GAN acc 0.0000', 'Discriminator loss 0.0282', 'Discriminator accuracy 0.9922', 'Total loss: 4.7906', 'for batch', 3)
('GAN loss 4.8914 ', 'GAN acc 0.0000', 'Discriminator loss 0.0101', 'Discriminator accuracy 0.9980', 'Total loss: 4.9015', 'for batch', 4)
('GAN loss 4.5484 ', 'GAN acc 0.0000', 'Discriminator loss 0.0554', 'Discriminator accuracy 0.9883', 'Total loss: 4.6038', 'for batch', 5)
('GAN loss 4.5300 ', 'GAN acc 0.0000', 'Discriminator loss 0.0147', 'Discriminator accuracy 0.9961', 'Total loss: 4.5447', 'for batch', 6)
('GAN loss 4.7399 ', 'GAN acc 0.0000', 'Discriminator loss 0.0151', 'Discriminator accuracy 0.9980', 'Total loss: 4.7551', 'for batch', 7)
('GAN loss 4.7550 ', 'GAN acc 0.0000', 'Discriminator loss 0.0460', 'Discriminator accuracy 0.9922', 'Total loss: 4.8010', 'for batch', 8)
('GAN loss 5.0087 ', 'GAN acc 0.0000', 'Discriminator loss 0.0280', 'Discriminator accuracy 0.9961', 'Total loss: 5.0368', 'for batch', 9)
('GAN loss 4.8689 ', 'GAN acc 0.0000', 'Discriminator loss 0.0503', 'Discriminator accuracy 0.9883', 'Total loss: 4.9192', 'for batch', 10)
('GAN loss 4.6693 ', 'GAN acc 0.0000', 'Discriminator loss 0.0408', 'Discriminator accuracy 0.9902', 'Total loss: 4.7101', 'for batch', 11)
('GAN loss 4.6428 ', 'GAN acc 0.0000', 'Discriminator loss 0.0280', 'Discriminator accuracy 0.9922', 'Total loss: 4.6709', 'for batch', 12)
('GAN loss 4.8158 ', 'GAN acc 0.0000', 'Discriminator loss 0.0178', 'Discriminator accuracy 0.9961', 'Total loss: 4.8336', 'for batch', 13)
('GAN loss 4.6939 ', 'GAN acc 0.0000', 'Discriminator loss 0.0604', 'Discriminator accuracy 0.9863', 'Total loss: 4.7542', 'for batch', 14)
('GAN loss 4.2603 ', 'GAN acc 0.0000', 'Discriminator loss 0.0652', 'Discriminator accuracy 0.9844', 'Total loss: 4.3255', 'for batch', 15)
('GAN loss 3.9566 ', 'GAN acc 0.0000', 'Discriminator loss 0.0442', 'Discriminator accuracy 0.9902', 'Total loss: 4.0008', 'for batch', 16)
('GAN loss 3.9106 ', 'GAN acc 0.0000', 'Discriminator loss 0.0346', 'Discriminator accuracy 0.9922', 'Total loss: 3.9452', 'for batch', 17)
('GAN loss 4.0321 ', 'GAN acc 0.0000', 'Discriminator loss 0.0365', 'Discriminator accuracy 0.9922', 'Total loss: 4.0686', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98957044)
('DISCRIMINATOR_Imagem FAKE=', 0.026414344)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.978224')
----------------------------------
('Epoch', 38, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2845 ', 'GAN acc 0.0000', 'Discriminator loss 0.0229', 'Discriminator accuracy 0.9961', 'Total loss: 4.3075', 'for batch', 0)
('GAN loss 4.4277 ', 'GAN acc 0.0000', 'Discriminator loss 0.0310', 'Discriminator accuracy 0.9941', 'Total loss: 4.4587', 'for batch', 1)
('GAN loss 4.7439 ', 'GAN acc 0.0000', 'Discriminator loss 0.0081', 'Discriminator accuracy 1.0000', 'Total loss: 4.7519', 'for batch', 2)
('GAN loss 4.8128 ', 'GAN acc 0.0000', 'Discriminator loss 0.0306', 'Discriminator accuracy 0.9941', 'Total loss: 4.8434', 'for batch', 3)
('GAN loss 4.9213 ', 'GAN acc 0.0000', 'Discriminator loss 0.0116', 'Discriminator accuracy 0.9961', 'Total loss: 4.9328', 'for batch', 4)
('GAN loss 4.6468 ', 'GAN acc 0.0000', 'Discriminator loss 0.0635', 'Discriminator accuracy 0.9883', 'Total loss: 4.7102', 'for batch', 5)
('GAN loss 4.5081 ', 'GAN acc 0.0000', 'Discriminator loss 0.0161', 'Discriminator accuracy 0.9961', 'Total loss: 4.5242', 'for batch', 6)
('GAN loss 4.6227 ', 'GAN acc 0.0000', 'Discriminator loss 0.0173', 'Discriminator accuracy 0.9980', 'Total loss: 4.6399', 'for batch', 7)
('GAN loss 4.5441 ', 'GAN acc 0.0000', 'Discriminator loss 0.0429', 'Discriminator accuracy 0.9922', 'Total loss: 4.5870', 'for batch', 8)
('GAN loss 4.6102 ', 'GAN acc 0.0000', 'Discriminator loss 0.0264', 'Discriminator accuracy 0.9961', 'Total loss: 4.6366', 'for batch', 9)
('GAN loss 4.4638 ', 'GAN acc 0.0000', 'Discriminator loss 0.0405', 'Discriminator accuracy 0.9902', 'Total loss: 4.5044', 'for batch', 10)
('GAN loss 4.2441 ', 'GAN acc 0.0000', 'Discriminator loss 0.0364', 'Discriminator accuracy 0.9902', 'Total loss: 4.2805', 'for batch', 11)
('GAN loss 4.2751 ', 'GAN acc 0.0000', 'Discriminator loss 0.0330', 'Discriminator accuracy 0.9922', 'Total loss: 4.3082', 'for batch', 12)
('GAN loss 4.6176 ', 'GAN acc 0.0000', 'Discriminator loss 0.0157', 'Discriminator accuracy 0.9980', 'Total loss: 4.6333', 'for batch', 13)
('GAN loss 4.5185 ', 'GAN acc 0.0000', 'Discriminator loss 0.0592', 'Discriminator accuracy 0.9863', 'Total loss: 4.5778', 'for batch', 14)
('GAN loss 4.0951 ', 'GAN acc 0.0000', 'Discriminator loss 0.0719', 'Discriminator accuracy 0.9844', 'Total loss: 4.1670', 'for batch', 15)
('GAN loss 3.8520 ', 'GAN acc 0.0000', 'Discriminator loss 0.0431', 'Discriminator accuracy 0.9902', 'Total loss: 3.8951', 'for batch', 16)
('GAN loss 4.1801 ', 'GAN acc 0.0000', 'Discriminator loss 0.0315', 'Discriminator accuracy 0.9961', 'Total loss: 4.2115', 'for batch', 17)
('GAN loss 4.4874 ', 'GAN acc 0.0000', 'Discriminator loss 0.0356', 'Discriminator accuracy 0.9941', 'Total loss: 4.5230', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9914692)
('DISCRIMINATOR_Imagem FAKE=', 0.015819639)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.534762')
----------------------------------
('Epoch', 39, 'of', 50)
('Number of batches', 19)
('GAN loss 4.6185 ', 'GAN acc 0.0000', 'Discriminator loss 0.0240', 'Discriminator accuracy 0.9961', 'Total loss: 4.6425', 'for batch', 0)
('GAN loss 4.7091 ', 'GAN acc 0.0000', 'Discriminator loss 0.0340', 'Discriminator accuracy 0.9941', 'Total loss: 4.7432', 'for batch', 1)
('GAN loss 5.0799 ', 'GAN acc 0.0000', 'Discriminator loss 0.0061', 'Discriminator accuracy 1.0000', 'Total loss: 5.0861', 'for batch', 2)
('GAN loss 5.0733 ', 'GAN acc 0.0000', 'Discriminator loss 0.0288', 'Discriminator accuracy 0.9941', 'Total loss: 5.1021', 'for batch', 3)
('GAN loss 5.3262 ', 'GAN acc 0.0000', 'Discriminator loss 0.0049', 'Discriminator accuracy 1.0000', 'Total loss: 5.3311', 'for batch', 4)
('GAN loss 5.0063 ', 'GAN acc 0.0000', 'Discriminator loss 0.0590', 'Discriminator accuracy 0.9883', 'Total loss: 5.0653', 'for batch', 5)
('GAN loss 5.0128 ', 'GAN acc 0.0000', 'Discriminator loss 0.0155', 'Discriminator accuracy 0.9961', 'Total loss: 5.0283', 'for batch', 6)
('GAN loss 5.1977 ', 'GAN acc 0.0000', 'Discriminator loss 0.0147', 'Discriminator accuracy 0.9980', 'Total loss: 5.2124', 'for batch', 7)
('GAN loss 5.0269 ', 'GAN acc 0.0000', 'Discriminator loss 0.0430', 'Discriminator accuracy 0.9922', 'Total loss: 5.0699', 'for batch', 8)
('GAN loss 4.8966 ', 'GAN acc 0.0000', 'Discriminator loss 0.0267', 'Discriminator accuracy 0.9941', 'Total loss: 4.9233', 'for batch', 9)
('GAN loss 4.5194 ', 'GAN acc 0.0000', 'Discriminator loss 0.0409', 'Discriminator accuracy 0.9883', 'Total loss: 4.5604', 'for batch', 10)
('GAN loss 4.2378 ', 'GAN acc 0.0000', 'Discriminator loss 0.0371', 'Discriminator accuracy 0.9902', 'Total loss: 4.2749', 'for batch', 11)
('GAN loss 4.3399 ', 'GAN acc 0.0000', 'Discriminator loss 0.0350', 'Discriminator accuracy 0.9922', 'Total loss: 4.3748', 'for batch', 12)
('GAN loss 4.6492 ', 'GAN acc 0.0000', 'Discriminator loss 0.0182', 'Discriminator accuracy 0.9980', 'Total loss: 4.6674', 'for batch', 13)
('GAN loss 4.5096 ', 'GAN acc 0.0000', 'Discriminator loss 0.0607', 'Discriminator accuracy 0.9863', 'Total loss: 4.5703', 'for batch', 14)
('GAN loss 4.1681 ', 'GAN acc 0.0000', 'Discriminator loss 0.0673', 'Discriminator accuracy 0.9844', 'Total loss: 4.2354', 'for batch', 15)
('GAN loss 4.0168 ', 'GAN acc 0.0000', 'Discriminator loss 0.0439', 'Discriminator accuracy 0.9902', 'Total loss: 4.0607', 'for batch', 16)
('GAN loss 3.9595 ', 'GAN acc 0.0000', 'Discriminator loss 0.0280', 'Discriminator accuracy 0.9941', 'Total loss: 3.9875', 'for batch', 17)
('GAN loss 4.0434 ', 'GAN acc 0.0000', 'Discriminator loss 0.0358', 'Discriminator accuracy 0.9922', 'Total loss: 4.0792', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99160063)
('DISCRIMINATOR_Imagem FAKE=', 0.022513594)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.981435')
----------------------------------
('Epoch', 40, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1679 ', 'GAN acc 0.0000', 'Discriminator loss 0.0246', 'Discriminator accuracy 0.9941', 'Total loss: 4.1925', 'for batch', 0)
('GAN loss 4.3265 ', 'GAN acc 0.0000', 'Discriminator loss 0.0297', 'Discriminator accuracy 0.9941', 'Total loss: 4.3562', 'for batch', 1)
('GAN loss 4.5821 ', 'GAN acc 0.0000', 'Discriminator loss 0.0075', 'Discriminator accuracy 1.0000', 'Total loss: 4.5896', 'for batch', 2)
('GAN loss 4.6545 ', 'GAN acc 0.0000', 'Discriminator loss 0.0248', 'Discriminator accuracy 0.9941', 'Total loss: 4.6792', 'for batch', 3)
('GAN loss 4.9059 ', 'GAN acc 0.0000', 'Discriminator loss 0.0071', 'Discriminator accuracy 1.0000', 'Total loss: 4.9129', 'for batch', 4)
('GAN loss 4.6266 ', 'GAN acc 0.0000', 'Discriminator loss 0.0593', 'Discriminator accuracy 0.9883', 'Total loss: 4.6859', 'for batch', 5)
('GAN loss 4.7432 ', 'GAN acc 0.0000', 'Discriminator loss 0.0161', 'Discriminator accuracy 0.9961', 'Total loss: 4.7593', 'for batch', 6)
('GAN loss 4.8778 ', 'GAN acc 0.0000', 'Discriminator loss 0.0162', 'Discriminator accuracy 0.9980', 'Total loss: 4.8940', 'for batch', 7)
('GAN loss 4.9516 ', 'GAN acc 0.0000', 'Discriminator loss 0.0451', 'Discriminator accuracy 0.9922', 'Total loss: 4.9967', 'for batch', 8)
('GAN loss 4.8696 ', 'GAN acc 0.0000', 'Discriminator loss 0.0260', 'Discriminator accuracy 0.9961', 'Total loss: 4.8957', 'for batch', 9)
('GAN loss 4.6223 ', 'GAN acc 0.0000', 'Discriminator loss 0.0454', 'Discriminator accuracy 0.9902', 'Total loss: 4.6677', 'for batch', 10)
('GAN loss 4.2860 ', 'GAN acc 0.0000', 'Discriminator loss 0.0411', 'Discriminator accuracy 0.9902', 'Total loss: 4.3270', 'for batch', 11)
('GAN loss 4.1675 ', 'GAN acc 0.0000', 'Discriminator loss 0.0363', 'Discriminator accuracy 0.9922', 'Total loss: 4.2037', 'for batch', 12)
('GAN loss 4.3606 ', 'GAN acc 0.0000', 'Discriminator loss 0.0185', 'Discriminator accuracy 0.9980', 'Total loss: 4.3791', 'for batch', 13)
('GAN loss 4.2669 ', 'GAN acc 0.0000', 'Discriminator loss 0.0678', 'Discriminator accuracy 0.9863', 'Total loss: 4.3347', 'for batch', 14)
('GAN loss 4.0373 ', 'GAN acc 0.0000', 'Discriminator loss 0.0667', 'Discriminator accuracy 0.9844', 'Total loss: 4.1040', 'for batch', 15)
('GAN loss 3.8896 ', 'GAN acc 0.0000', 'Discriminator loss 0.0466', 'Discriminator accuracy 0.9902', 'Total loss: 3.9362', 'for batch', 16)
('GAN loss 3.9344 ', 'GAN acc 0.0000', 'Discriminator loss 0.0284', 'Discriminator accuracy 0.9941', 'Total loss: 3.9628', 'for batch', 17)
('GAN loss 4.0694 ', 'GAN acc 0.0000', 'Discriminator loss 0.0340', 'Discriminator accuracy 0.9941', 'Total loss: 4.1035', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99186856)
('DISCRIMINATOR_Imagem FAKE=', 0.020670418)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.547981')
----------------------------------
('Epoch', 41, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2999 ', 'GAN acc 0.0000', 'Discriminator loss 0.0258', 'Discriminator accuracy 0.9961', 'Total loss: 4.3257', 'for batch', 0)
('GAN loss 4.4628 ', 'GAN acc 0.0000', 'Discriminator loss 0.0287', 'Discriminator accuracy 0.9941', 'Total loss: 4.4915', 'for batch', 1)
('GAN loss 4.7590 ', 'GAN acc 0.0000', 'Discriminator loss 0.0066', 'Discriminator accuracy 1.0000', 'Total loss: 4.7656', 'for batch', 2)
('GAN loss 4.7667 ', 'GAN acc 0.0000', 'Discriminator loss 0.0260', 'Discriminator accuracy 0.9922', 'Total loss: 4.7927', 'for batch', 3)
('GAN loss 4.9314 ', 'GAN acc 0.0000', 'Discriminator loss 0.0068', 'Discriminator accuracy 0.9980', 'Total loss: 4.9381', 'for batch', 4)
('GAN loss 4.5615 ', 'GAN acc 0.0000', 'Discriminator loss 0.0624', 'Discriminator accuracy 0.9883', 'Total loss: 4.6239', 'for batch', 5)
('GAN loss 4.7315 ', 'GAN acc 0.0000', 'Discriminator loss 0.0168', 'Discriminator accuracy 0.9961', 'Total loss: 4.7483', 'for batch', 6)
('GAN loss 4.8539 ', 'GAN acc 0.0000', 'Discriminator loss 0.0149', 'Discriminator accuracy 0.9980', 'Total loss: 4.8688', 'for batch', 7)
('GAN loss 4.8218 ', 'GAN acc 0.0000', 'Discriminator loss 0.0435', 'Discriminator accuracy 0.9922', 'Total loss: 4.8653', 'for batch', 8)
('GAN loss 4.7564 ', 'GAN acc 0.0000', 'Discriminator loss 0.0241', 'Discriminator accuracy 0.9961', 'Total loss: 4.7805', 'for batch', 9)
('GAN loss 4.5879 ', 'GAN acc 0.0000', 'Discriminator loss 0.0377', 'Discriminator accuracy 0.9902', 'Total loss: 4.6256', 'for batch', 10)
('GAN loss 4.3465 ', 'GAN acc 0.0000', 'Discriminator loss 0.0397', 'Discriminator accuracy 0.9902', 'Total loss: 4.3862', 'for batch', 11)
('GAN loss 4.2031 ', 'GAN acc 0.0000', 'Discriminator loss 0.0349', 'Discriminator accuracy 0.9922', 'Total loss: 4.2380', 'for batch', 12)
('GAN loss 4.2864 ', 'GAN acc 0.0000', 'Discriminator loss 0.0186', 'Discriminator accuracy 0.9961', 'Total loss: 4.3050', 'for batch', 13)
('GAN loss 4.2117 ', 'GAN acc 0.0000', 'Discriminator loss 0.0658', 'Discriminator accuracy 0.9863', 'Total loss: 4.2775', 'for batch', 14)
('GAN loss 4.0399 ', 'GAN acc 0.0000', 'Discriminator loss 0.0610', 'Discriminator accuracy 0.9863', 'Total loss: 4.1009', 'for batch', 15)
('GAN loss 3.9309 ', 'GAN acc 0.0000', 'Discriminator loss 0.0404', 'Discriminator accuracy 0.9902', 'Total loss: 3.9714', 'for batch', 16)
('GAN loss 4.0265 ', 'GAN acc 0.0000', 'Discriminator loss 0.0290', 'Discriminator accuracy 0.9941', 'Total loss: 4.0555', 'for batch', 17)
('GAN loss 4.1100 ', 'GAN acc 0.0000', 'Discriminator loss 0.0361', 'Discriminator accuracy 0.9922', 'Total loss: 4.1461', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99357122)
('DISCRIMINATOR_Imagem FAKE=', 0.017895279)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.006680')
----------------------------------
('Epoch', 42, 'of', 50)
('Number of batches', 19)
('GAN loss 4.3744 ', 'GAN acc 0.0000', 'Discriminator loss 0.0216', 'Discriminator accuracy 0.9961', 'Total loss: 4.3960', 'for batch', 0)
('GAN loss 4.5597 ', 'GAN acc 0.0000', 'Discriminator loss 0.0279', 'Discriminator accuracy 0.9941', 'Total loss: 4.5876', 'for batch', 1)
('GAN loss 4.8965 ', 'GAN acc 0.0000', 'Discriminator loss 0.0057', 'Discriminator accuracy 1.0000', 'Total loss: 4.9021', 'for batch', 2)
('GAN loss 4.8780 ', 'GAN acc 0.0000', 'Discriminator loss 0.0262', 'Discriminator accuracy 0.9941', 'Total loss: 4.9042', 'for batch', 3)
('GAN loss 5.0598 ', 'GAN acc 0.0000', 'Discriminator loss 0.0057', 'Discriminator accuracy 0.9980', 'Total loss: 5.0655', 'for batch', 4)
('GAN loss 4.6130 ', 'GAN acc 0.0000', 'Discriminator loss 0.0588', 'Discriminator accuracy 0.9883', 'Total loss: 4.6718', 'for batch', 5)
('GAN loss 4.9336 ', 'GAN acc 0.0000', 'Discriminator loss 0.0180', 'Discriminator accuracy 0.9961', 'Total loss: 4.9516', 'for batch', 6)
('GAN loss 5.1386 ', 'GAN acc 0.0000', 'Discriminator loss 0.0140', 'Discriminator accuracy 0.9980', 'Total loss: 5.1526', 'for batch', 7)
('GAN loss 4.9809 ', 'GAN acc 0.0000', 'Discriminator loss 0.0433', 'Discriminator accuracy 0.9922', 'Total loss: 5.0242', 'for batch', 8)
('GAN loss 4.8803 ', 'GAN acc 0.0000', 'Discriminator loss 0.0245', 'Discriminator accuracy 0.9961', 'Total loss: 4.9049', 'for batch', 9)
('GAN loss 4.6361 ', 'GAN acc 0.0000', 'Discriminator loss 0.0427', 'Discriminator accuracy 0.9922', 'Total loss: 4.6788', 'for batch', 10)
('GAN loss 4.2966 ', 'GAN acc 0.0000', 'Discriminator loss 0.0378', 'Discriminator accuracy 0.9902', 'Total loss: 4.3344', 'for batch', 11)
('GAN loss 4.2030 ', 'GAN acc 0.0000', 'Discriminator loss 0.0309', 'Discriminator accuracy 0.9941', 'Total loss: 4.2338', 'for batch', 12)
('GAN loss 4.3230 ', 'GAN acc 0.0000', 'Discriminator loss 0.0163', 'Discriminator accuracy 0.9980', 'Total loss: 4.3393', 'for batch', 13)
('GAN loss 4.2164 ', 'GAN acc 0.0000', 'Discriminator loss 0.0602', 'Discriminator accuracy 0.9863', 'Total loss: 4.2766', 'for batch', 14)
('GAN loss 3.9976 ', 'GAN acc 0.0000', 'Discriminator loss 0.0589', 'Discriminator accuracy 0.9863', 'Total loss: 4.0565', 'for batch', 15)
('GAN loss 3.8535 ', 'GAN acc 0.0000', 'Discriminator loss 0.0413', 'Discriminator accuracy 0.9922', 'Total loss: 3.8948', 'for batch', 16)
('GAN loss 4.0726 ', 'GAN acc 0.0000', 'Discriminator loss 0.0274', 'Discriminator accuracy 0.9961', 'Total loss: 4.1000', 'for batch', 17)
('GAN loss 4.2932 ', 'GAN acc 0.0000', 'Discriminator loss 0.0333', 'Discriminator accuracy 0.9941', 'Total loss: 4.3266', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99420184)
('DISCRIMINATOR_Imagem FAKE=', 0.014369438)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.992121')
----------------------------------
('Epoch', 43, 'of', 50)
('Number of batches', 19)
('GAN loss 4.5091 ', 'GAN acc 0.0000', 'Discriminator loss 0.0217', 'Discriminator accuracy 0.9941', 'Total loss: 4.5308', 'for batch', 0)
('GAN loss 4.6618 ', 'GAN acc 0.0000', 'Discriminator loss 0.0256', 'Discriminator accuracy 0.9941', 'Total loss: 4.6873', 'for batch', 1)
('GAN loss 4.9196 ', 'GAN acc 0.0000', 'Discriminator loss 0.0049', 'Discriminator accuracy 1.0000', 'Total loss: 4.9245', 'for batch', 2)
('GAN loss 5.0476 ', 'GAN acc 0.0000', 'Discriminator loss 0.0198', 'Discriminator accuracy 0.9961', 'Total loss: 5.0673', 'for batch', 3)
('GAN loss 5.2334 ', 'GAN acc 0.0000', 'Discriminator loss 0.0040', 'Discriminator accuracy 1.0000', 'Total loss: 5.2373', 'for batch', 4)
('GAN loss 4.7353 ', 'GAN acc 0.0000', 'Discriminator loss 0.0624', 'Discriminator accuracy 0.9883', 'Total loss: 4.7978', 'for batch', 5)
('GAN loss 4.7976 ', 'GAN acc 0.0000', 'Discriminator loss 0.0123', 'Discriminator accuracy 0.9961', 'Total loss: 4.8099', 'for batch', 6)
('GAN loss 4.9407 ', 'GAN acc 0.0000', 'Discriminator loss 0.0152', 'Discriminator accuracy 0.9980', 'Total loss: 4.9560', 'for batch', 7)
('GAN loss 5.2496 ', 'GAN acc 0.0000', 'Discriminator loss 0.0506', 'Discriminator accuracy 0.9922', 'Total loss: 5.3002', 'for batch', 8)
('GAN loss 5.7275 ', 'GAN acc 0.0000', 'Discriminator loss 0.0259', 'Discriminator accuracy 0.9961', 'Total loss: 5.7534', 'for batch', 9)
('GAN loss 5.4925 ', 'GAN acc 0.0000', 'Discriminator loss 0.0366', 'Discriminator accuracy 0.9902', 'Total loss: 5.5291', 'for batch', 10)
('GAN loss 4.8223 ', 'GAN acc 0.0000', 'Discriminator loss 0.0286', 'Discriminator accuracy 0.9922', 'Total loss: 4.8509', 'for batch', 11)
('GAN loss 4.2392 ', 'GAN acc 0.0000', 'Discriminator loss 0.0377', 'Discriminator accuracy 0.9922', 'Total loss: 4.2769', 'for batch', 12)
('GAN loss 4.3811 ', 'GAN acc 0.0000', 'Discriminator loss 0.0153', 'Discriminator accuracy 0.9980', 'Total loss: 4.3964', 'for batch', 13)
('GAN loss 4.2166 ', 'GAN acc 0.0000', 'Discriminator loss 0.0660', 'Discriminator accuracy 0.9863', 'Total loss: 4.2826', 'for batch', 14)
('GAN loss 3.9809 ', 'GAN acc 0.0000', 'Discriminator loss 0.0577', 'Discriminator accuracy 0.9863', 'Total loss: 4.0386', 'for batch', 15)
('GAN loss 3.7295 ', 'GAN acc 0.0000', 'Discriminator loss 0.0383', 'Discriminator accuracy 0.9902', 'Total loss: 3.7678', 'for batch', 16)
('GAN loss 4.3431 ', 'GAN acc 0.0000', 'Discriminator loss 0.0301', 'Discriminator accuracy 0.9961', 'Total loss: 4.3732', 'for batch', 17)
('GAN loss 4.5698 ', 'GAN acc 0.0000', 'Discriminator loss 0.0314', 'Discriminator accuracy 0.9941', 'Total loss: 4.6012', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99313575)
('DISCRIMINATOR_Imagem FAKE=', 0.012092844)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.551418')
----------------------------------
('Epoch', 44, 'of', 50)
('Number of batches', 19)
('GAN loss 4.7226 ', 'GAN acc 0.0000', 'Discriminator loss 0.0177', 'Discriminator accuracy 0.9961', 'Total loss: 4.7403', 'for batch', 0)
('GAN loss 4.8226 ', 'GAN acc 0.0000', 'Discriminator loss 0.0252', 'Discriminator accuracy 0.9941', 'Total loss: 4.8477', 'for batch', 1)
('GAN loss 5.0561 ', 'GAN acc 0.0000', 'Discriminator loss 0.0056', 'Discriminator accuracy 0.9980', 'Total loss: 5.0618', 'for batch', 2)
('GAN loss 5.0382 ', 'GAN acc 0.0000', 'Discriminator loss 0.0222', 'Discriminator accuracy 0.9941', 'Total loss: 5.0604', 'for batch', 3)
('GAN loss 5.1891 ', 'GAN acc 0.0000', 'Discriminator loss 0.0038', 'Discriminator accuracy 1.0000', 'Total loss: 5.1929', 'for batch', 4)
('GAN loss 4.8855 ', 'GAN acc 0.0000', 'Discriminator loss 0.0555', 'Discriminator accuracy 0.9883', 'Total loss: 4.9410', 'for batch', 5)
('GAN loss 4.8431 ', 'GAN acc 0.0000', 'Discriminator loss 0.0078', 'Discriminator accuracy 0.9961', 'Total loss: 4.8509', 'for batch', 6)
('GAN loss 4.9231 ', 'GAN acc 0.0000', 'Discriminator loss 0.0139', 'Discriminator accuracy 0.9980', 'Total loss: 4.9369', 'for batch', 7)
('GAN loss 4.7744 ', 'GAN acc 0.0000', 'Discriminator loss 0.0404', 'Discriminator accuracy 0.9922', 'Total loss: 4.8148', 'for batch', 8)
('GAN loss 4.6902 ', 'GAN acc 0.0000', 'Discriminator loss 0.0237', 'Discriminator accuracy 0.9961', 'Total loss: 4.7139', 'for batch', 9)
('GAN loss 4.5820 ', 'GAN acc 0.0000', 'Discriminator loss 0.0330', 'Discriminator accuracy 0.9941', 'Total loss: 4.6151', 'for batch', 10)
('GAN loss 4.4262 ', 'GAN acc 0.0000', 'Discriminator loss 0.0280', 'Discriminator accuracy 0.9922', 'Total loss: 4.4542', 'for batch', 11)
('GAN loss 4.4903 ', 'GAN acc 0.0000', 'Discriminator loss 0.0314', 'Discriminator accuracy 0.9941', 'Total loss: 4.5217', 'for batch', 12)
('GAN loss 4.9478 ', 'GAN acc 0.0000', 'Discriminator loss 0.0181', 'Discriminator accuracy 0.9980', 'Total loss: 4.9659', 'for batch', 13)
('GAN loss 4.9407 ', 'GAN acc 0.0000', 'Discriminator loss 0.0560', 'Discriminator accuracy 0.9883', 'Total loss: 4.9967', 'for batch', 14)
('GAN loss 4.6123 ', 'GAN acc 0.0000', 'Discriminator loss 0.0645', 'Discriminator accuracy 0.9863', 'Total loss: 4.6768', 'for batch', 15)
('GAN loss 4.3158 ', 'GAN acc 0.0000', 'Discriminator loss 0.0420', 'Discriminator accuracy 0.9902', 'Total loss: 4.3578', 'for batch', 16)
('GAN loss 4.3115 ', 'GAN acc 0.0000', 'Discriminator loss 0.0275', 'Discriminator accuracy 0.9941', 'Total loss: 4.3390', 'for batch', 17)
('GAN loss 4.5399 ', 'GAN acc 0.0000', 'Discriminator loss 0.0336', 'Discriminator accuracy 0.9922', 'Total loss: 4.5734', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99355942)
('DISCRIMINATOR_Imagem FAKE=', 0.012912631)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.982806')
----------------------------------
('Epoch', 45, 'of', 50)
('Number of batches', 19)
('GAN loss 4.6725 ', 'GAN acc 0.0000', 'Discriminator loss 0.0161', 'Discriminator accuracy 0.9980', 'Total loss: 4.6886', 'for batch', 0)
('GAN loss 4.7871 ', 'GAN acc 0.0000', 'Discriminator loss 0.0255', 'Discriminator accuracy 0.9941', 'Total loss: 4.8126', 'for batch', 1)
('GAN loss 5.0523 ', 'GAN acc 0.0000', 'Discriminator loss 0.0044', 'Discriminator accuracy 1.0000', 'Total loss: 5.0568', 'for batch', 2)
('GAN loss 5.1678 ', 'GAN acc 0.0000', 'Discriminator loss 0.0176', 'Discriminator accuracy 0.9961', 'Total loss: 5.1853', 'for batch', 3)
('GAN loss 5.3591 ', 'GAN acc 0.0000', 'Discriminator loss 0.0041', 'Discriminator accuracy 1.0000', 'Total loss: 5.3632', 'for batch', 4)
('GAN loss 5.0352 ', 'GAN acc 0.0000', 'Discriminator loss 0.0565', 'Discriminator accuracy 0.9883', 'Total loss: 5.0917', 'for batch', 5)
('GAN loss 4.9730 ', 'GAN acc 0.0000', 'Discriminator loss 0.0085', 'Discriminator accuracy 0.9961', 'Total loss: 4.9815', 'for batch', 6)
('GAN loss 5.0173 ', 'GAN acc 0.0000', 'Discriminator loss 0.0133', 'Discriminator accuracy 0.9980', 'Total loss: 5.0306', 'for batch', 7)
('GAN loss 4.8611 ', 'GAN acc 0.0000', 'Discriminator loss 0.0419', 'Discriminator accuracy 0.9922', 'Total loss: 4.9030', 'for batch', 8)
('GAN loss 4.7552 ', 'GAN acc 0.0000', 'Discriminator loss 0.0245', 'Discriminator accuracy 0.9961', 'Total loss: 4.7797', 'for batch', 9)
('GAN loss 4.6573 ', 'GAN acc 0.0000', 'Discriminator loss 0.0331', 'Discriminator accuracy 0.9941', 'Total loss: 4.6904', 'for batch', 10)
('GAN loss 4.4451 ', 'GAN acc 0.0000', 'Discriminator loss 0.0300', 'Discriminator accuracy 0.9922', 'Total loss: 4.4751', 'for batch', 11)
('GAN loss 4.3879 ', 'GAN acc 0.0000', 'Discriminator loss 0.0269', 'Discriminator accuracy 0.9941', 'Total loss: 4.4148', 'for batch', 12)
('GAN loss 4.6707 ', 'GAN acc 0.0000', 'Discriminator loss 0.0177', 'Discriminator accuracy 0.9980', 'Total loss: 4.6884', 'for batch', 13)
('GAN loss 4.5657 ', 'GAN acc 0.0000', 'Discriminator loss 0.0609', 'Discriminator accuracy 0.9883', 'Total loss: 4.6266', 'for batch', 14)
('GAN loss 4.6798 ', 'GAN acc 0.0000', 'Discriminator loss 0.0752', 'Discriminator accuracy 0.9844', 'Total loss: 4.7550', 'for batch', 15)
('GAN loss 5.1858 ', 'GAN acc 0.0000', 'Discriminator loss 0.0497', 'Discriminator accuracy 0.9902', 'Total loss: 5.2355', 'for batch', 16)
('GAN loss 5.3908 ', 'GAN acc 0.0000', 'Discriminator loss 0.0272', 'Discriminator accuracy 0.9941', 'Total loss: 5.4179', 'for batch', 17)
('GAN loss 4.8933 ', 'GAN acc 0.0000', 'Discriminator loss 0.0325', 'Discriminator accuracy 0.9922', 'Total loss: 4.9257', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99043423)
('DISCRIMINATOR_Imagem FAKE=', 0.01581254)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.596081')
----------------------------------
('Epoch', 46, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2947 ', 'GAN acc 0.0000', 'Discriminator loss 0.0232', 'Discriminator accuracy 0.9961', 'Total loss: 4.3180', 'for batch', 0)
('GAN loss 4.4310 ', 'GAN acc 0.0000', 'Discriminator loss 0.0257', 'Discriminator accuracy 0.9941', 'Total loss: 4.4568', 'for batch', 1)
('GAN loss 4.8047 ', 'GAN acc 0.0000', 'Discriminator loss 0.0060', 'Discriminator accuracy 1.0000', 'Total loss: 4.8108', 'for batch', 2)
('GAN loss 4.9359 ', 'GAN acc 0.0000', 'Discriminator loss 0.0253', 'Discriminator accuracy 0.9941', 'Total loss: 4.9611', 'for batch', 3)
('GAN loss 5.1312 ', 'GAN acc 0.0000', 'Discriminator loss 0.0061', 'Discriminator accuracy 0.9980', 'Total loss: 5.1373', 'for batch', 4)
('GAN loss 4.8508 ', 'GAN acc 0.0000', 'Discriminator loss 0.0607', 'Discriminator accuracy 0.9883', 'Total loss: 4.9115', 'for batch', 5)
('GAN loss 4.8506 ', 'GAN acc 0.0000', 'Discriminator loss 0.0088', 'Discriminator accuracy 0.9961', 'Total loss: 4.8594', 'for batch', 6)
('GAN loss 4.9324 ', 'GAN acc 0.0000', 'Discriminator loss 0.0141', 'Discriminator accuracy 0.9980', 'Total loss: 4.9464', 'for batch', 7)
('GAN loss 4.7759 ', 'GAN acc 0.0000', 'Discriminator loss 0.0416', 'Discriminator accuracy 0.9922', 'Total loss: 4.8175', 'for batch', 8)
('GAN loss 4.7402 ', 'GAN acc 0.0000', 'Discriminator loss 0.0215', 'Discriminator accuracy 0.9961', 'Total loss: 4.7617', 'for batch', 9)
('GAN loss 4.6086 ', 'GAN acc 0.0000', 'Discriminator loss 0.0339', 'Discriminator accuracy 0.9941', 'Total loss: 4.6424', 'for batch', 10)
('GAN loss 4.4939 ', 'GAN acc 0.0000', 'Discriminator loss 0.0333', 'Discriminator accuracy 0.9902', 'Total loss: 4.5272', 'for batch', 11)
('GAN loss 4.3826 ', 'GAN acc 0.0000', 'Discriminator loss 0.0321', 'Discriminator accuracy 0.9941', 'Total loss: 4.4147', 'for batch', 12)
('GAN loss 4.5344 ', 'GAN acc 0.0000', 'Discriminator loss 0.0154', 'Discriminator accuracy 0.9980', 'Total loss: 4.5498', 'for batch', 13)
('GAN loss 4.3724 ', 'GAN acc 0.0000', 'Discriminator loss 0.0525', 'Discriminator accuracy 0.9902', 'Total loss: 4.4248', 'for batch', 14)
('GAN loss 4.0714 ', 'GAN acc 0.0000', 'Discriminator loss 0.0531', 'Discriminator accuracy 0.9883', 'Total loss: 4.1245', 'for batch', 15)
('GAN loss 3.5621 ', 'GAN acc 0.0000', 'Discriminator loss 0.0352', 'Discriminator accuracy 0.9922', 'Total loss: 3.5973', 'for batch', 16)
('GAN loss 4.4617 ', 'GAN acc 0.0000', 'Discriminator loss 0.0305', 'Discriminator accuracy 0.9961', 'Total loss: 4.4922', 'for batch', 17)
('GAN loss 4.6102 ', 'GAN acc 0.0000', 'Discriminator loss 0.0315', 'Discriminator accuracy 0.9941', 'Total loss: 4.6417', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99424857)
('DISCRIMINATOR_Imagem FAKE=', 0.010632995)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.018411')
----------------------------------
('Epoch', 47, 'of', 50)
('Number of batches', 19)
('GAN loss 4.7910 ', 'GAN acc 0.0000', 'Discriminator loss 0.0168', 'Discriminator accuracy 0.9961', 'Total loss: 4.8078', 'for batch', 0)
('GAN loss 4.8794 ', 'GAN acc 0.0000', 'Discriminator loss 0.0245', 'Discriminator accuracy 0.9961', 'Total loss: 4.9039', 'for batch', 1)
('GAN loss 5.1399 ', 'GAN acc 0.0000', 'Discriminator loss 0.0038', 'Discriminator accuracy 1.0000', 'Total loss: 5.1437', 'for batch', 2)
('GAN loss 5.2200 ', 'GAN acc 0.0000', 'Discriminator loss 0.0210', 'Discriminator accuracy 0.9941', 'Total loss: 5.2410', 'for batch', 3)
('GAN loss 5.3687 ', 'GAN acc 0.0000', 'Discriminator loss 0.0034', 'Discriminator accuracy 1.0000', 'Total loss: 5.3721', 'for batch', 4)
('GAN loss 5.0545 ', 'GAN acc 0.0000', 'Discriminator loss 0.0557', 'Discriminator accuracy 0.9883', 'Total loss: 5.1103', 'for batch', 5)
('GAN loss 4.9848 ', 'GAN acc 0.0000', 'Discriminator loss 0.0067', 'Discriminator accuracy 0.9980', 'Total loss: 4.9916', 'for batch', 6)
('GAN loss 5.0695 ', 'GAN acc 0.0000', 'Discriminator loss 0.0126', 'Discriminator accuracy 0.9980', 'Total loss: 5.0821', 'for batch', 7)
('GAN loss 4.8538 ', 'GAN acc 0.0000', 'Discriminator loss 0.0411', 'Discriminator accuracy 0.9922', 'Total loss: 4.8949', 'for batch', 8)
('GAN loss 4.8245 ', 'GAN acc 0.0000', 'Discriminator loss 0.0215', 'Discriminator accuracy 0.9961', 'Total loss: 4.8460', 'for batch', 9)
('GAN loss 4.7170 ', 'GAN acc 0.0000', 'Discriminator loss 0.0333', 'Discriminator accuracy 0.9941', 'Total loss: 4.7503', 'for batch', 10)
('GAN loss 4.5106 ', 'GAN acc 0.0000', 'Discriminator loss 0.0308', 'Discriminator accuracy 0.9902', 'Total loss: 4.5414', 'for batch', 11)
('GAN loss 4.4272 ', 'GAN acc 0.0000', 'Discriminator loss 0.0294', 'Discriminator accuracy 0.9941', 'Total loss: 4.4566', 'for batch', 12)
('GAN loss 4.5139 ', 'GAN acc 0.0000', 'Discriminator loss 0.0156', 'Discriminator accuracy 0.9980', 'Total loss: 4.5295', 'for batch', 13)
('GAN loss 4.4004 ', 'GAN acc 0.0000', 'Discriminator loss 0.0506', 'Discriminator accuracy 0.9902', 'Total loss: 4.4510', 'for batch', 14)
('GAN loss 3.9690 ', 'GAN acc 0.0000', 'Discriminator loss 0.0516', 'Discriminator accuracy 0.9883', 'Total loss: 4.0206', 'for batch', 15)
('GAN loss 3.0302 ', 'GAN acc 0.0000', 'Discriminator loss 0.0332', 'Discriminator accuracy 0.9922', 'Total loss: 3.0634', 'for batch', 16)
('GAN loss 4.9046 ', 'GAN acc 0.0000', 'Discriminator loss 0.0423', 'Discriminator accuracy 0.9961', 'Total loss: 4.9469', 'for batch', 17)
('GAN loss 5.1933 ', 'GAN acc 0.0000', 'Discriminator loss 0.0343', 'Discriminator accuracy 0.9941', 'Total loss: 5.2277', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98844153)
('DISCRIMINATOR_Imagem FAKE=', 0.0062302444)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.560952')
----------------------------------
('Epoch', 48, 'of', 50)
('Number of batches', 19)
('GAN loss 5.3470 ', 'GAN acc 0.0000', 'Discriminator loss 0.0143', 'Discriminator accuracy 0.9980', 'Total loss: 5.3612', 'for batch', 0)
('GAN loss 5.0527 ', 'GAN acc 0.0000', 'Discriminator loss 0.0456', 'Discriminator accuracy 0.9902', 'Total loss: 5.0983', 'for batch', 1)
('GAN loss 5.0867 ', 'GAN acc 0.0000', 'Discriminator loss 0.0046', 'Discriminator accuracy 1.0000', 'Total loss: 5.0913', 'for batch', 2)
('GAN loss 4.8075 ', 'GAN acc 0.0000', 'Discriminator loss 0.0439', 'Discriminator accuracy 0.9902', 'Total loss: 4.8514', 'for batch', 3)
('GAN loss 4.7942 ', 'GAN acc 0.0000', 'Discriminator loss 0.0108', 'Discriminator accuracy 0.9961', 'Total loss: 4.8051', 'for batch', 4)
('GAN loss 4.3199 ', 'GAN acc 0.0000', 'Discriminator loss 0.0612', 'Discriminator accuracy 0.9844', 'Total loss: 4.3811', 'for batch', 5)
('GAN loss 4.3964 ', 'GAN acc 0.0000', 'Discriminator loss 0.0099', 'Discriminator accuracy 0.9961', 'Total loss: 4.4063', 'for batch', 6)
('GAN loss 4.6703 ', 'GAN acc 0.0000', 'Discriminator loss 0.0142', 'Discriminator accuracy 0.9980', 'Total loss: 4.6845', 'for batch', 7)
('GAN loss 4.6063 ', 'GAN acc 0.0000', 'Discriminator loss 0.0431', 'Discriminator accuracy 0.9902', 'Total loss: 4.6493', 'for batch', 8)
('GAN loss 4.6231 ', 'GAN acc 0.0000', 'Discriminator loss 0.0223', 'Discriminator accuracy 0.9961', 'Total loss: 4.6454', 'for batch', 9)
('GAN loss 4.6211 ', 'GAN acc 0.0000', 'Discriminator loss 0.0325', 'Discriminator accuracy 0.9941', 'Total loss: 4.6536', 'for batch', 10)
('GAN loss 4.4758 ', 'GAN acc 0.0000', 'Discriminator loss 0.0344', 'Discriminator accuracy 0.9902', 'Total loss: 4.5102', 'for batch', 11)
('GAN loss 4.4773 ', 'GAN acc 0.0000', 'Discriminator loss 0.0261', 'Discriminator accuracy 0.9941', 'Total loss: 4.5034', 'for batch', 12)
('GAN loss 4.6299 ', 'GAN acc 0.0000', 'Discriminator loss 0.0149', 'Discriminator accuracy 0.9980', 'Total loss: 4.6448', 'for batch', 13)
('GAN loss 4.5016 ', 'GAN acc 0.0000', 'Discriminator loss 0.0535', 'Discriminator accuracy 0.9902', 'Total loss: 4.5551', 'for batch', 14)
('GAN loss 4.2118 ', 'GAN acc 0.0000', 'Discriminator loss 0.0552', 'Discriminator accuracy 0.9883', 'Total loss: 4.2669', 'for batch', 15)
('GAN loss 4.0264 ', 'GAN acc 0.0000', 'Discriminator loss 0.0400', 'Discriminator accuracy 0.9922', 'Total loss: 4.0664', 'for batch', 16)
('GAN loss 4.1092 ', 'GAN acc 0.0000', 'Discriminator loss 0.0296', 'Discriminator accuracy 0.9941', 'Total loss: 4.1388', 'for batch', 17)
('GAN loss 4.2485 ', 'GAN acc 0.0000', 'Discriminator loss 0.0325', 'Discriminator accuracy 0.9941', 'Total loss: 4.2810', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99368626)
('DISCRIMINATOR_Imagem FAKE=', 0.015096775)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.984374')
----------------------------------
('Epoch', 49, 'of', 50)
('Number of batches', 19)
('GAN loss 4.5413 ', 'GAN acc 0.0000', 'Discriminator loss 0.0159', 'Discriminator accuracy 0.9980', 'Total loss: 4.5571', 'for batch', 0)
('GAN loss 4.7421 ', 'GAN acc 0.0000', 'Discriminator loss 0.0236', 'Discriminator accuracy 0.9961', 'Total loss: 4.7657', 'for batch', 1)
('GAN loss 5.0595 ', 'GAN acc 0.0000', 'Discriminator loss 0.0046', 'Discriminator accuracy 1.0000', 'Total loss: 5.0641', 'for batch', 2)
('GAN loss 5.1462 ', 'GAN acc 0.0000', 'Discriminator loss 0.0217', 'Discriminator accuracy 0.9941', 'Total loss: 5.1679', 'for batch', 3)
('GAN loss 5.3046 ', 'GAN acc 0.0000', 'Discriminator loss 0.0033', 'Discriminator accuracy 1.0000', 'Total loss: 5.3079', 'for batch', 4)
('GAN loss 5.0314 ', 'GAN acc 0.0000', 'Discriminator loss 0.0529', 'Discriminator accuracy 0.9883', 'Total loss: 5.0844', 'for batch', 5)
('GAN loss 5.0302 ', 'GAN acc 0.0000', 'Discriminator loss 0.0052', 'Discriminator accuracy 1.0000', 'Total loss: 5.0354', 'for batch', 6)
('GAN loss 5.0150 ', 'GAN acc 0.0000', 'Discriminator loss 0.0126', 'Discriminator accuracy 0.9980', 'Total loss: 5.0277', 'for batch', 7)
('GAN loss 4.6656 ', 'GAN acc 0.0000', 'Discriminator loss 0.0528', 'Discriminator accuracy 0.9922', 'Total loss: 4.7184', 'for batch', 8)
('GAN loss 9.0158 ', 'GAN acc 0.0000', 'Discriminator loss 0.3202', 'Discriminator accuracy 0.8457', 'Total loss: 9.3359', 'for batch', 9)
('GAN loss 10.8111 ', 'GAN acc 0.0000', 'Discriminator loss 0.0696', 'Discriminator accuracy 0.9883', 'Total loss: 10.8807', 'for batch', 10)
('GAN loss 7.7759 ', 'GAN acc 0.0000', 'Discriminator loss 0.0925', 'Discriminator accuracy 0.9824', 'Total loss: 7.8685', 'for batch', 11)
('GAN loss 7.2382 ', 'GAN acc 0.0000', 'Discriminator loss 0.0644', 'Discriminator accuracy 0.9902', 'Total loss: 7.3026', 'for batch', 12)
('GAN loss 6.5637 ', 'GAN acc 0.0000', 'Discriminator loss 0.0369', 'Discriminator accuracy 0.9941', 'Total loss: 6.6006', 'for batch', 13)
('GAN loss 5.6768 ', 'GAN acc 0.0000', 'Discriminator loss 0.0873', 'Discriminator accuracy 0.9844', 'Total loss: 5.7641', 'for batch', 14)
('GAN loss 4.7344 ', 'GAN acc 0.0000', 'Discriminator loss 0.0960', 'Discriminator accuracy 0.9824', 'Total loss: 4.8304', 'for batch', 15)
('GAN loss 4.2059 ', 'GAN acc 0.0000', 'Discriminator loss 0.0429', 'Discriminator accuracy 0.9922', 'Total loss: 4.2488', 'for batch', 16)
('GAN loss 4.0137 ', 'GAN acc 0.0000', 'Discriminator loss 0.0276', 'Discriminator accuracy 0.9941', 'Total loss: 4.0413', 'for batch', 17)
('GAN loss 4.0017 ', 'GAN acc 0.0000', 'Discriminator loss 0.0334', 'Discriminator accuracy 0.9941', 'Total loss: 4.0351', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99076819)
('DISCRIMINATOR_Imagem FAKE=', 0.019479489)
('Discriminator trained', 1, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.527463')
----------------------------------
('Epoch', 50, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1175 ', 'GAN acc 0.0000', 'Discriminator loss 0.0276', 'Discriminator accuracy 0.9961', 'Total loss: 4.1451', 'for batch', 0)
('GAN loss 4.2639 ', 'GAN acc 0.0000', 'Discriminator loss 0.0322', 'Discriminator accuracy 0.9941', 'Total loss: 4.2962', 'for batch', 1)
('GAN loss 4.4828 ', 'GAN acc 0.0000', 'Discriminator loss 0.0174', 'Discriminator accuracy 0.9980', 'Total loss: 4.5003', 'for batch', 2)
('GAN loss 4.6638 ', 'GAN acc 0.0000', 'Discriminator loss 0.0178', 'Discriminator accuracy 0.9961', 'Total loss: 4.6816', 'for batch', 3)
('GAN loss 4.8878 ', 'GAN acc 0.0000', 'Discriminator loss 0.0061', 'Discriminator accuracy 1.0000', 'Total loss: 4.8940', 'for batch', 4)
('GAN loss 4.7336 ', 'GAN acc 0.0000', 'Discriminator loss 0.0520', 'Discriminator accuracy 0.9883', 'Total loss: 4.7855', 'for batch', 5)
('GAN loss 4.7373 ', 'GAN acc 0.0000', 'Discriminator loss 0.0190', 'Discriminator accuracy 0.9961', 'Total loss: 4.7562', 'for batch', 6)
('GAN loss 4.8132 ', 'GAN acc 0.0000', 'Discriminator loss 0.0144', 'Discriminator accuracy 0.9980', 'Total loss: 4.8276', 'for batch', 7)
('GAN loss 4.7359 ', 'GAN acc 0.0000', 'Discriminator loss 0.0429', 'Discriminator accuracy 0.9922', 'Total loss: 4.7787', 'for batch', 8)
('GAN loss 4.6749 ', 'GAN acc 0.0000', 'Discriminator loss 0.0235', 'Discriminator accuracy 0.9961', 'Total loss: 4.6983', 'for batch', 9)
('GAN loss 4.6112 ', 'GAN acc 0.0000', 'Discriminator loss 0.0397', 'Discriminator accuracy 0.9922', 'Total loss: 4.6509', 'for batch', 10)
('GAN loss 4.5217 ', 'GAN acc 0.0000', 'Discriminator loss 0.0285', 'Discriminator accuracy 0.9941', 'Total loss: 4.5502', 'for batch', 11)
('GAN loss 4.5015 ', 'GAN acc 0.0000', 'Discriminator loss 0.0283', 'Discriminator accuracy 0.9941', 'Total loss: 4.5298', 'for batch', 12)
('GAN loss 4.5864 ', 'GAN acc 0.0000', 'Discriminator loss 0.0143', 'Discriminator accuracy 0.9980', 'Total loss: 4.6007', 'for batch', 13)
('GAN loss 4.4766 ', 'GAN acc 0.0000', 'Discriminator loss 0.0584', 'Discriminator accuracy 0.9883', 'Total loss: 4.5350', 'for batch', 14)
('GAN loss 4.1578 ', 'GAN acc 0.0000', 'Discriminator loss 0.0695', 'Discriminator accuracy 0.9844', 'Total loss: 4.2273', 'for batch', 15)
('GAN loss 3.9250 ', 'GAN acc 0.0000', 'Discriminator loss 0.0393', 'Discriminator accuracy 0.9922', 'Total loss: 3.9643', 'for batch', 16)
('GAN loss 4.1524 ', 'GAN acc 0.0000', 'Discriminator loss 0.0255', 'Discriminator accuracy 0.9961', 'Total loss: 4.1779', 'for batch', 17)
('GAN loss 4.3107 ', 'GAN acc 0.0000', 'Discriminator loss 0.0319', 'Discriminator accuracy 0.9941', 'Total loss: 4.3426', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99275154)
('DISCRIMINATOR_Imagem FAKE=', 0.013135727)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.979787')
----------------------------------
End of training
Saving histograms
----------------------------------
('Training with dataset based on class - ', 'horse', 'with', 5000, 'samples')
----------------------------------
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_2 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_1 (Sequential)        (None, 1)             0           lambda_1[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_1 (Convolution2D)  (None, 32, 16, 16)    608         convolution2d_input_1[0][0]      
____________________________________________________________________________________________________
leakyrelu_1 (LeakyReLU)          (None, 32, 16, 16)    0           convolution2d_1[0][0]            
____________________________________________________________________________________________________
dropout_1 (Dropout)              (None, 32, 16, 16)    0           leakyrelu_1[0][0]                
____________________________________________________________________________________________________
convolution2d_2 (Convolution2D)  (None, 64, 8, 8)      18496       dropout_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_2 (LeakyReLU)          (None, 64, 8, 8)      0           convolution2d_2[0][0]            
____________________________________________________________________________________________________
dropout_2 (Dropout)              (None, 64, 8, 8)      0           leakyrelu_2[0][0]                
____________________________________________________________________________________________________
convolution2d_3 (Convolution2D)  (None, 128, 4, 4)     73856       dropout_2[0][0]                  
____________________________________________________________________________________________________
leakyrelu_3 (LeakyReLU)          (None, 128, 4, 4)     0           convolution2d_3[0][0]            
____________________________________________________________________________________________________
dropout_3 (Dropout)              (None, 128, 4, 4)     0           leakyrelu_3[0][0]                
____________________________________________________________________________________________________
convolution2d_4 (Convolution2D)  (None, 256, 2, 2)     295168      dropout_3[0][0]                  
____________________________________________________________________________________________________
leakyrelu_4 (LeakyReLU)          (None, 256, 2, 2)     0           convolution2d_4[0][0]            
____________________________________________________________________________________________________
dropout_4 (Dropout)              (None, 256, 2, 2)     0           leakyrelu_4[0][0]                
____________________________________________________________________________________________________
flatten_1 (Flatten)              (None, 1024)          0           dropout_4[0][0]                  
____________________________________________________________________________________________________
dense_1 (Dense)                  (None, 1024)          1049600     flatten_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_5 (LeakyReLU)          (None, 1024)          0           dense_1[0][0]                    
____________________________________________________________________________________________________
dropout_5 (Dropout)              (None, 1024)          0           leakyrelu_5[0][0]                
____________________________________________________________________________________________________
dense_2 (Dense)                  (None, 1)             1025        dropout_5[0][0]                  
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
('Epoch', 1, 'of', 50)
('Number of batches', 19)
('GAN loss 1.7907 ', 'GAN acc 0.0039', 'Discriminator loss 0.6959', 'Discriminator accuracy 0.4512', 'Total loss: 2.4866', 'for batch', 0)
('GAN loss 2.4968 ', 'GAN acc 0.0000', 'Discriminator loss 0.5411', 'Discriminator accuracy 0.5039', 'Total loss: 3.0378', 'for batch', 1)
('GAN loss 2.8437 ', 'GAN acc 0.0000', 'Discriminator loss 0.5048', 'Discriminator accuracy 0.5000', 'Total loss: 3.3484', 'for batch', 2)
('GAN loss 2.9077 ', 'GAN acc 0.0000', 'Discriminator loss 0.4786', 'Discriminator accuracy 0.5059', 'Total loss: 3.3863', 'for batch', 3)
('GAN loss 2.7397 ', 'GAN acc 0.0000', 'Discriminator loss 0.4834', 'Discriminator accuracy 0.5059', 'Total loss: 3.2231', 'for batch', 4)
('GAN loss 2.4254 ', 'GAN acc 0.0000', 'Discriminator loss 0.4675', 'Discriminator accuracy 0.5859', 'Total loss: 2.8929', 'for batch', 5)
('GAN loss 2.1774 ', 'GAN acc 0.0000', 'Discriminator loss 0.4430', 'Discriminator accuracy 0.7344', 'Total loss: 2.6205', 'for batch', 6)
('GAN loss 2.0881 ', 'GAN acc 0.0000', 'Discriminator loss 0.4346', 'Discriminator accuracy 0.8477', 'Total loss: 2.5227', 'for batch', 7)
('GAN loss 2.1794 ', 'GAN acc 0.0000', 'Discriminator loss 0.3903', 'Discriminator accuracy 0.9453', 'Total loss: 2.5697', 'for batch', 8)
('GAN loss 2.3961 ', 'GAN acc 0.0000', 'Discriminator loss 0.3303', 'Discriminator accuracy 0.9707', 'Total loss: 2.7264', 'for batch', 9)
('GAN loss 2.6542 ', 'GAN acc 0.0000', 'Discriminator loss 0.2896', 'Discriminator accuracy 0.9727', 'Total loss: 2.9438', 'for batch', 10)
----------------------------------
('Training with dataset based on class - ', 'horse', 'with', 5000, 'samples')
----------------------------------
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_2 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_1 (Sequential)        (None, 1)             0           lambda_1[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_1 (Convolution2D)  (None, 32, 16, 16)    608         convolution2d_input_1[0][0]      
____________________________________________________________________________________________________
leakyrelu_1 (LeakyReLU)          (None, 32, 16, 16)    0           convolution2d_1[0][0]            
____________________________________________________________________________________________________
dropout_1 (Dropout)              (None, 32, 16, 16)    0           leakyrelu_1[0][0]                
____________________________________________________________________________________________________
convolution2d_2 (Convolution2D)  (None, 64, 8, 8)      18496       dropout_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_2 (LeakyReLU)          (None, 64, 8, 8)      0           convolution2d_2[0][0]            
____________________________________________________________________________________________________
dropout_2 (Dropout)              (None, 64, 8, 8)      0           leakyrelu_2[0][0]                
____________________________________________________________________________________________________
convolution2d_3 (Convolution2D)  (None, 128, 4, 4)     73856       dropout_2[0][0]                  
____________________________________________________________________________________________________
leakyrelu_3 (LeakyReLU)          (None, 128, 4, 4)     0           convolution2d_3[0][0]            
____________________________________________________________________________________________________
dropout_3 (Dropout)              (None, 128, 4, 4)     0           leakyrelu_3[0][0]                
____________________________________________________________________________________________________
convolution2d_4 (Convolution2D)  (None, 256, 2, 2)     295168      dropout_3[0][0]                  
____________________________________________________________________________________________________
leakyrelu_4 (LeakyReLU)          (None, 256, 2, 2)     0           convolution2d_4[0][0]            
____________________________________________________________________________________________________
dropout_4 (Dropout)              (None, 256, 2, 2)     0           leakyrelu_4[0][0]                
____________________________________________________________________________________________________
flatten_1 (Flatten)              (None, 1024)          0           dropout_4[0][0]                  
____________________________________________________________________________________________________
dense_1 (Dense)                  (None, 1024)          1049600     flatten_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_5 (LeakyReLU)          (None, 1024)          0           dense_1[0][0]                    
____________________________________________________________________________________________________
dropout_5 (Dropout)              (None, 1024)          0           leakyrelu_5[0][0]                
____________________________________________________________________________________________________
dense_2 (Dense)                  (None, 1)             1025        dropout_5[0][0]                  
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
('Epoch', 1, 'of', 50)
('Number of batches', 19)
('GAN loss 1.7907 ', 'GAN acc 0.0039', 'Discriminator loss 0.6959', 'Discriminator accuracy 0.4512', 'Total loss: 2.4867', 'for batch', 0)
('GAN loss 2.4971 ', 'GAN acc 0.0000', 'Discriminator loss 0.5411', 'Discriminator accuracy 0.5039', 'Total loss: 3.0381', 'for batch', 1)
('GAN loss 2.8351 ', 'GAN acc 0.0000', 'Discriminator loss 0.5051', 'Discriminator accuracy 0.5000', 'Total loss: 3.3402', 'for batch', 2)
('GAN loss 2.9069 ', 'GAN acc 0.0000', 'Discriminator loss 0.4788', 'Discriminator accuracy 0.5059', 'Total loss: 3.3856', 'for batch', 3)
('GAN loss 2.7254 ', 'GAN acc 0.0000', 'Discriminator loss 0.4852', 'Discriminator accuracy 0.5059', 'Total loss: 3.2106', 'for batch', 4)
('GAN loss 2.4262 ', 'GAN acc 0.0000', 'Discriminator loss 0.4686', 'Discriminator accuracy 0.5840', 'Total loss: 2.8948', 'for batch', 5)
('GAN loss 2.1715 ', 'GAN acc 0.0000', 'Discriminator loss 0.4438', 'Discriminator accuracy 0.7305', 'Total loss: 2.6152', 'for batch', 6)
('GAN loss 2.0786 ', 'GAN acc 0.0000', 'Discriminator loss 0.4354', 'Discriminator accuracy 0.8477', 'Total loss: 2.5140', 'for batch', 7)
('GAN loss 2.1624 ', 'GAN acc 0.0000', 'Discriminator loss 0.3918', 'Discriminator accuracy 0.9453', 'Total loss: 2.5542', 'for batch', 8)
('GAN loss 2.3735 ', 'GAN acc 0.0000', 'Discriminator loss 0.3326', 'Discriminator accuracy 0.9707', 'Total loss: 2.7061', 'for batch', 9)
('GAN loss 2.6173 ', 'GAN acc 0.0000', 'Discriminator loss 0.2918', 'Discriminator accuracy 0.9727', 'Total loss: 2.9090', 'for batch', 10)
('GAN loss 2.7338 ', 'GAN acc 0.0000', 'Discriminator loss 0.2490', 'Discriminator accuracy 0.9902', 'Total loss: 2.9829', 'for batch', 11)
('GAN loss 2.9819 ', 'GAN acc 0.0039', 'Discriminator loss 0.1908', 'Discriminator accuracy 0.9922', 'Total loss: 3.1727', 'for batch', 12)
('GAN loss 3.3353 ', 'GAN acc 0.0000', 'Discriminator loss 0.1862', 'Discriminator accuracy 0.9844', 'Total loss: 3.5215', 'for batch', 13)
('GAN loss 4.0549 ', 'GAN acc 0.0117', 'Discriminator loss 0.1852', 'Discriminator accuracy 0.9629', 'Total loss: 4.2401', 'for batch', 14)
('GAN loss 4.3070 ', 'GAN acc 0.0078', 'Discriminator loss 0.1708', 'Discriminator accuracy 0.9805', 'Total loss: 4.4778', 'for batch', 15)
('GAN loss 3.4139 ', 'GAN acc 0.0039', 'Discriminator loss 0.1556', 'Discriminator accuracy 0.9941', 'Total loss: 3.5695', 'for batch', 16)
('GAN loss 3.6103 ', 'GAN acc 0.0234', 'Discriminator loss 0.1630', 'Discriminator accuracy 0.9746', 'Total loss: 3.7734', 'for batch', 17)
('GAN loss 2.8830 ', 'GAN acc 0.0664', 'Discriminator loss 0.1773', 'Discriminator accuracy 0.9629', 'Total loss: 3.0603', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.89603162)
('DISCRIMINATOR_Imagem FAKE=', 0.3175379)
('Discriminator trained', 10, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('out.shape=', (256, 2, 32, 32))
('out2.shape=', (256, 3, 32, 32))
('original.shape=', (256, 2, 32, 32))
('original2.shape=', (256, 4, 32, 32))
Storing to histogram values
('Elapsed time in epoch = ', '0:00:33.796218')
----------------------------------
('Epoch', 2, 'of', 50)
('Number of batches', 19)
('GAN loss 2.1754 ', 'GAN acc 0.2031', 'Discriminator loss 0.2719', 'Discriminator accuracy 0.8438', 'Total loss: 2.4473', 'for batch', 0)
('GAN loss 1.0539 ', 'GAN acc 0.4805', 'Discriminator loss 0.4487', 'Discriminator accuracy 0.6445', 'Total loss: 1.5026', 'for batch', 1)
('GAN loss 0.9856 ', 'GAN acc 0.0820', 'Discriminator loss 0.3824', 'Discriminator accuracy 0.7988', 'Total loss: 1.3680', 'for batch', 2)
('GAN loss 0.7253 ', 'GAN acc 0.4766', 'Discriminator loss 0.5054', 'Discriminator accuracy 0.5742', 'Total loss: 1.2307', 'for batch', 3)
('GAN loss 0.7634 ', 'GAN acc 0.2109', 'Discriminator loss 0.4788', 'Discriminator accuracy 0.6348', 'Total loss: 1.2422', 'for batch', 4)
('GAN loss 0.8109 ', 'GAN acc 0.0000', 'Discriminator loss 0.4663', 'Discriminator accuracy 0.7012', 'Total loss: 1.2772', 'for batch', 5)
('GAN loss 0.9009 ', 'GAN acc 0.0000', 'Discriminator loss 0.4187', 'Discriminator accuracy 0.9512', 'Total loss: 1.3196', 'for batch', 6)
('GAN loss 0.9976 ', 'GAN acc 0.0000', 'Discriminator loss 0.3640', 'Discriminator accuracy 0.9648', 'Total loss: 1.3616', 'for batch', 7)
('GAN loss 1.1158 ', 'GAN acc 0.0000', 'Discriminator loss 0.3036', 'Discriminator accuracy 0.9746', 'Total loss: 1.4194', 'for batch', 8)
('GAN loss 1.2697 ', 'GAN acc 0.0000', 'Discriminator loss 0.2680', 'Discriminator accuracy 0.9668', 'Total loss: 1.5377', 'for batch', 9)
('GAN loss 1.4536 ', 'GAN acc 0.0000', 'Discriminator loss 0.2486', 'Discriminator accuracy 0.9531', 'Total loss: 1.7022', 'for batch', 10)
('GAN loss 1.6488 ', 'GAN acc 0.0000', 'Discriminator loss 0.2069', 'Discriminator accuracy 0.9609', 'Total loss: 1.8557', 'for batch', 11)
----------------------------------
('Training with dataset based on class - ', 'horse', 'with', 5000, 'samples')
----------------------------------
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_2 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_1 (Sequential)        (None, 1)             0           lambda_1[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_1 (Convolution2D)  (None, 32, 16, 16)    608         convolution2d_input_1[0][0]      
____________________________________________________________________________________________________
leakyrelu_1 (LeakyReLU)          (None, 32, 16, 16)    0           convolution2d_1[0][0]            
____________________________________________________________________________________________________
dropout_1 (Dropout)              (None, 32, 16, 16)    0           leakyrelu_1[0][0]                
____________________________________________________________________________________________________
convolution2d_2 (Convolution2D)  (None, 64, 8, 8)      18496       dropout_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_2 (LeakyReLU)          (None, 64, 8, 8)      0           convolution2d_2[0][0]            
____________________________________________________________________________________________________
dropout_2 (Dropout)              (None, 64, 8, 8)      0           leakyrelu_2[0][0]                
____________________________________________________________________________________________________
convolution2d_3 (Convolution2D)  (None, 128, 4, 4)     73856       dropout_2[0][0]                  
____________________________________________________________________________________________________
leakyrelu_3 (LeakyReLU)          (None, 128, 4, 4)     0           convolution2d_3[0][0]            
____________________________________________________________________________________________________
dropout_3 (Dropout)              (None, 128, 4, 4)     0           leakyrelu_3[0][0]                
____________________________________________________________________________________________________
convolution2d_4 (Convolution2D)  (None, 256, 2, 2)     295168      dropout_3[0][0]                  
____________________________________________________________________________________________________
leakyrelu_4 (LeakyReLU)          (None, 256, 2, 2)     0           convolution2d_4[0][0]            
____________________________________________________________________________________________________
dropout_4 (Dropout)              (None, 256, 2, 2)     0           leakyrelu_4[0][0]                
____________________________________________________________________________________________________
flatten_1 (Flatten)              (None, 1024)          0           dropout_4[0][0]                  
____________________________________________________________________________________________________
dense_1 (Dense)                  (None, 1024)          1049600     flatten_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_5 (LeakyReLU)          (None, 1024)          0           dense_1[0][0]                    
____________________________________________________________________________________________________
dropout_5 (Dropout)              (None, 1024)          0           leakyrelu_5[0][0]                
____________________________________________________________________________________________________
dense_2 (Dense)                  (None, 1)             1025        dropout_5[0][0]                  
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
('Epoch', 1, 'of', 50)
('Number of batches', 19)
('GAN loss 1.7907 ', 'GAN acc 0.0039', 'Discriminator loss 0.6959', 'Discriminator accuracy 0.4512', 'Total loss: 2.4867', 'for batch', 0)
('GAN loss 2.4971 ', 'GAN acc 0.0000', 'Discriminator loss 0.5411', 'Discriminator accuracy 0.5039', 'Total loss: 3.0381', 'for batch', 1)
('GAN loss 2.8351 ', 'GAN acc 0.0000', 'Discriminator loss 0.5051', 'Discriminator accuracy 0.5000', 'Total loss: 3.3402', 'for batch', 2)
('GAN loss 2.9053 ', 'GAN acc 0.0000', 'Discriminator loss 0.4788', 'Discriminator accuracy 0.5059', 'Total loss: 3.3841', 'for batch', 3)
('GAN loss 2.7270 ', 'GAN acc 0.0000', 'Discriminator loss 0.4850', 'Discriminator accuracy 0.5059', 'Total loss: 3.2120', 'for batch', 4)
('GAN loss 2.4287 ', 'GAN acc 0.0000', 'Discriminator loss 0.4684', 'Discriminator accuracy 0.5840', 'Total loss: 2.8971', 'for batch', 5)
('GAN loss 2.1768 ', 'GAN acc 0.0000', 'Discriminator loss 0.4435', 'Discriminator accuracy 0.7305', 'Total loss: 2.6202', 'for batch', 6)
('GAN loss 2.0971 ', 'GAN acc 0.0000', 'Discriminator loss 0.4334', 'Discriminator accuracy 0.8477', 'Total loss: 2.5305', 'for batch', 7)
('GAN loss 2.1688 ', 'GAN acc 0.0000', 'Discriminator loss 0.3910', 'Discriminator accuracy 0.9453', 'Total loss: 2.5598', 'for batch', 8)
('GAN loss 2.3816 ', 'GAN acc 0.0000', 'Discriminator loss 0.3318', 'Discriminator accuracy 0.9707', 'Total loss: 2.7134', 'for batch', 9)
('GAN loss 2.6249 ', 'GAN acc 0.0000', 'Discriminator loss 0.2913', 'Discriminator accuracy 0.9727', 'Total loss: 2.9162', 'for batch', 10)
('GAN loss 2.7134 ', 'GAN acc 0.0078', 'Discriminator loss 0.2511', 'Discriminator accuracy 0.9902', 'Total loss: 2.9645', 'for batch', 11)
('GAN loss 2.9117 ', 'GAN acc 0.0078', 'Discriminator loss 0.1949', 'Discriminator accuracy 0.9883', 'Total loss: 3.1067', 'for batch', 12)
('GAN loss 3.0683 ', 'GAN acc 0.0117', 'Discriminator loss 0.1822', 'Discriminator accuracy 0.9883', 'Total loss: 3.2504', 'for batch', 13)
('GAN loss 3.8336 ', 'GAN acc 0.0195', 'Discriminator loss 0.2077', 'Discriminator accuracy 0.9512', 'Total loss: 4.0413', 'for batch', 14)
('GAN loss 4.5635 ', 'GAN acc 0.0000', 'Discriminator loss 0.1709', 'Discriminator accuracy 0.9883', 'Total loss: 4.7344', 'for batch', 15)
('GAN loss 4.2974 ', 'GAN acc 0.0039', 'Discriminator loss 0.1357', 'Discriminator accuracy 0.9941', 'Total loss: 4.4331', 'for batch', 16)
('GAN loss 3.3607 ', 'GAN acc 0.0664', 'Discriminator loss 0.1685', 'Discriminator accuracy 0.9609', 'Total loss: 3.5292', 'for batch', 17)
('GAN loss 2.7235 ', 'GAN acc 0.1250', 'Discriminator loss 0.1979', 'Discriminator accuracy 0.9395', 'Total loss: 2.9214', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.89144969)
('DISCRIMINATOR_Imagem FAKE=', 0.36491552)
('Discriminator trained', 10, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
----------------------------------
('Training with dataset based on class - ', 'horse', 'with', 5000, 'samples')
----------------------------------
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_2 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_1 (Sequential)        (None, 1)             0           lambda_1[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_1 (Convolution2D)  (None, 32, 16, 16)    608         convolution2d_input_1[0][0]      
____________________________________________________________________________________________________
leakyrelu_1 (LeakyReLU)          (None, 32, 16, 16)    0           convolution2d_1[0][0]            
____________________________________________________________________________________________________
dropout_1 (Dropout)              (None, 32, 16, 16)    0           leakyrelu_1[0][0]                
____________________________________________________________________________________________________
convolution2d_2 (Convolution2D)  (None, 64, 8, 8)      18496       dropout_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_2 (LeakyReLU)          (None, 64, 8, 8)      0           convolution2d_2[0][0]            
____________________________________________________________________________________________________
dropout_2 (Dropout)              (None, 64, 8, 8)      0           leakyrelu_2[0][0]                
____________________________________________________________________________________________________
convolution2d_3 (Convolution2D)  (None, 128, 4, 4)     73856       dropout_2[0][0]                  
____________________________________________________________________________________________________
leakyrelu_3 (LeakyReLU)          (None, 128, 4, 4)     0           convolution2d_3[0][0]            
____________________________________________________________________________________________________
dropout_3 (Dropout)              (None, 128, 4, 4)     0           leakyrelu_3[0][0]                
____________________________________________________________________________________________________
convolution2d_4 (Convolution2D)  (None, 256, 2, 2)     295168      dropout_3[0][0]                  
____________________________________________________________________________________________________
leakyrelu_4 (LeakyReLU)          (None, 256, 2, 2)     0           convolution2d_4[0][0]            
____________________________________________________________________________________________________
dropout_4 (Dropout)              (None, 256, 2, 2)     0           leakyrelu_4[0][0]                
____________________________________________________________________________________________________
flatten_1 (Flatten)              (None, 1024)          0           dropout_4[0][0]                  
____________________________________________________________________________________________________
dense_1 (Dense)                  (None, 1024)          1049600     flatten_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_5 (LeakyReLU)          (None, 1024)          0           dense_1[0][0]                    
____________________________________________________________________________________________________
dropout_5 (Dropout)              (None, 1024)          0           leakyrelu_5[0][0]                
____________________________________________________________________________________________________
dense_2 (Dense)                  (None, 1)             1025        dropout_5[0][0]                  
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
('Epoch', 1, 'of', 50)
('Number of batches', 19)
('GAN loss 1.7907 ', 'GAN acc 0.0039', 'Discriminator loss 0.6959', 'Discriminator accuracy 0.4512', 'Total loss: 2.4867', 'for batch', 0)
('GAN loss 2.4971 ', 'GAN acc 0.0000', 'Discriminator loss 0.5411', 'Discriminator accuracy 0.5039', 'Total loss: 3.0381', 'for batch', 1)
('GAN loss 2.8357 ', 'GAN acc 0.0000', 'Discriminator loss 0.5051', 'Discriminator accuracy 0.5000', 'Total loss: 3.3408', 'for batch', 2)
('GAN loss 2.9171 ', 'GAN acc 0.0000', 'Discriminator loss 0.4784', 'Discriminator accuracy 0.5059', 'Total loss: 3.3955', 'for batch', 3)
('GAN loss 2.7214 ', 'GAN acc 0.0000', 'Discriminator loss 0.4855', 'Discriminator accuracy 0.5059', 'Total loss: 3.2069', 'for batch', 4)
('GAN loss 2.4187 ', 'GAN acc 0.0000', 'Discriminator loss 0.4686', 'Discriminator accuracy 0.5840', 'Total loss: 2.8873', 'for batch', 5)
('GAN loss 2.1379 ', 'GAN acc 0.0000', 'Discriminator loss 0.4465', 'Discriminator accuracy 0.7305', 'Total loss: 2.5844', 'for batch', 6)
('GAN loss 2.0757 ', 'GAN acc 0.0000', 'Discriminator loss 0.4356', 'Discriminator accuracy 0.8477', 'Total loss: 2.5113', 'for batch', 7)
('GAN loss 2.1737 ', 'GAN acc 0.0000', 'Discriminator loss 0.3911', 'Discriminator accuracy 0.9453', 'Total loss: 2.5648', 'for batch', 8)
('GAN loss 2.3864 ', 'GAN acc 0.0000', 'Discriminator loss 0.3312', 'Discriminator accuracy 0.9707', 'Total loss: 2.7176', 'for batch', 9)
('GAN loss 2.6261 ', 'GAN acc 0.0000', 'Discriminator loss 0.2911', 'Discriminator accuracy 0.9727', 'Total loss: 2.9172', 'for batch', 10)
('GAN loss 2.7116 ', 'GAN acc 0.0000', 'Discriminator loss 0.2498', 'Discriminator accuracy 0.9902', 'Total loss: 2.9613', 'for batch', 11)
('GAN loss 2.9778 ', 'GAN acc 0.0000', 'Discriminator loss 0.1907', 'Discriminator accuracy 0.9922', 'Total loss: 3.1685', 'for batch', 12)
('GAN loss 3.2184 ', 'GAN acc 0.0000', 'Discriminator loss 0.1756', 'Discriminator accuracy 0.9883', 'Total loss: 3.3940', 'for batch', 13)
('GAN loss 4.0096 ', 'GAN acc 0.0117', 'Discriminator loss 0.1934', 'Discriminator accuracy 0.9590', 'Total loss: 4.2029', 'for batch', 14)
('GAN loss 4.9790 ', 'GAN acc 0.0039', 'Discriminator loss 0.1680', 'Discriminator accuracy 0.9785', 'Total loss: 5.1470', 'for batch', 15)
('GAN loss 4.4977 ', 'GAN acc 0.0078', 'Discriminator loss 0.1450', 'Discriminator accuracy 0.9941', 'Total loss: 4.6428', 'for batch', 16)
('GAN loss 4.1298 ', 'GAN acc 0.0078', 'Discriminator loss 0.1427', 'Discriminator accuracy 0.9805', 'Total loss: 4.2725', 'for batch', 17)
('GAN loss 2.8909 ', 'GAN acc 0.0742', 'Discriminator loss 0.1743', 'Discriminator accuracy 0.9629', 'Total loss: 3.0652', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.89503562)
('DISCRIMINATOR_Imagem FAKE=', 0.26367435)
('Discriminator trained', 10, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
----------------------------------
('Training with dataset based on class - ', 'horse', 'with', 5000, 'samples')
----------------------------------
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_2 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_1 (Sequential)        (None, 1)             0           lambda_1[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_1 (Convolution2D)  (None, 32, 16, 16)    608         convolution2d_input_1[0][0]      
____________________________________________________________________________________________________
leakyrelu_1 (LeakyReLU)          (None, 32, 16, 16)    0           convolution2d_1[0][0]            
____________________________________________________________________________________________________
dropout_1 (Dropout)              (None, 32, 16, 16)    0           leakyrelu_1[0][0]                
____________________________________________________________________________________________________
convolution2d_2 (Convolution2D)  (None, 64, 8, 8)      18496       dropout_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_2 (LeakyReLU)          (None, 64, 8, 8)      0           convolution2d_2[0][0]            
____________________________________________________________________________________________________
dropout_2 (Dropout)              (None, 64, 8, 8)      0           leakyrelu_2[0][0]                
____________________________________________________________________________________________________
convolution2d_3 (Convolution2D)  (None, 128, 4, 4)     73856       dropout_2[0][0]                  
____________________________________________________________________________________________________
leakyrelu_3 (LeakyReLU)          (None, 128, 4, 4)     0           convolution2d_3[0][0]            
____________________________________________________________________________________________________
dropout_3 (Dropout)              (None, 128, 4, 4)     0           leakyrelu_3[0][0]                
____________________________________________________________________________________________________
convolution2d_4 (Convolution2D)  (None, 256, 2, 2)     295168      dropout_3[0][0]                  
____________________________________________________________________________________________________
leakyrelu_4 (LeakyReLU)          (None, 256, 2, 2)     0           convolution2d_4[0][0]            
____________________________________________________________________________________________________
dropout_4 (Dropout)              (None, 256, 2, 2)     0           leakyrelu_4[0][0]                
____________________________________________________________________________________________________
flatten_1 (Flatten)              (None, 1024)          0           dropout_4[0][0]                  
____________________________________________________________________________________________________
dense_1 (Dense)                  (None, 1024)          1049600     flatten_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_5 (LeakyReLU)          (None, 1024)          0           dense_1[0][0]                    
____________________________________________________________________________________________________
dropout_5 (Dropout)              (None, 1024)          0           leakyrelu_5[0][0]                
____________________________________________________________________________________________________
dense_2 (Dense)                  (None, 1)             1025        dropout_5[0][0]                  
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
('Epoch', 1, 'of', 50)
('Number of batches', 19)
('GAN loss 1.7907 ', 'GAN acc 0.0039', 'Discriminator loss 0.6959', 'Discriminator accuracy 0.4512', 'Total loss: 2.4867', 'for batch', 0)
('GAN loss 2.4971 ', 'GAN acc 0.0000', 'Discriminator loss 0.5411', 'Discriminator accuracy 0.5039', 'Total loss: 3.0381', 'for batch', 1)
('GAN loss 2.8351 ', 'GAN acc 0.0000', 'Discriminator loss 0.5051', 'Discriminator accuracy 0.5000', 'Total loss: 3.3402', 'for batch', 2)
('GAN loss 2.9052 ', 'GAN acc 0.0000', 'Discriminator loss 0.4788', 'Discriminator accuracy 0.5059', 'Total loss: 3.3840', 'for batch', 3)
('GAN loss 2.7324 ', 'GAN acc 0.0000', 'Discriminator loss 0.4847', 'Discriminator accuracy 0.5059', 'Total loss: 3.2171', 'for batch', 4)
('GAN loss 2.4314 ', 'GAN acc 0.0000', 'Discriminator loss 0.4681', 'Discriminator accuracy 0.5859', 'Total loss: 2.8995', 'for batch', 5)
('GAN loss 2.1657 ', 'GAN acc 0.0000', 'Discriminator loss 0.4447', 'Discriminator accuracy 0.7324', 'Total loss: 2.6103', 'for batch', 6)
('GAN loss 2.0843 ', 'GAN acc 0.0000', 'Discriminator loss 0.4349', 'Discriminator accuracy 0.8477', 'Total loss: 2.5192', 'for batch', 7)
('GAN loss 2.1634 ', 'GAN acc 0.0000', 'Discriminator loss 0.3919', 'Discriminator accuracy 0.9453', 'Total loss: 2.5552', 'for batch', 8)
('GAN loss 2.3723 ', 'GAN acc 0.0000', 'Discriminator loss 0.3329', 'Discriminator accuracy 0.9707', 'Total loss: 2.7052', 'for batch', 9)
('GAN loss 2.6215 ', 'GAN acc 0.0000', 'Discriminator loss 0.2915', 'Discriminator accuracy 0.9727', 'Total loss: 2.9129', 'for batch', 10)
('GAN loss 2.7281 ', 'GAN acc 0.0039', 'Discriminator loss 0.2504', 'Discriminator accuracy 0.9902', 'Total loss: 2.9785', 'for batch', 11)
('GAN loss 2.9545 ', 'GAN acc 0.0039', 'Discriminator loss 0.1917', 'Discriminator accuracy 0.9902', 'Total loss: 3.1461', 'for batch', 12)
('GAN loss 3.0825 ', 'GAN acc 0.0117', 'Discriminator loss 0.1769', 'Discriminator accuracy 0.9883', 'Total loss: 3.2594', 'for batch', 13)
('GAN loss 3.6406 ', 'GAN acc 0.0352', 'Discriminator loss 0.1954', 'Discriminator accuracy 0.9570', 'Total loss: 3.8360', 'for batch', 14)
('GAN loss 4.7272 ', 'GAN acc 0.0039', 'Discriminator loss 0.1833', 'Discriminator accuracy 0.9746', 'Total loss: 4.9105', 'for batch', 15)
('GAN loss 4.4460 ', 'GAN acc 0.0000', 'Discriminator loss 0.1429', 'Discriminator accuracy 0.9941', 'Total loss: 4.5889', 'for batch', 16)
('GAN loss 3.5247 ', 'GAN acc 0.0352', 'Discriminator loss 0.1713', 'Discriminator accuracy 0.9668', 'Total loss: 3.6960', 'for batch', 17)
('GAN loss 3.0540 ', 'GAN acc 0.0234', 'Discriminator loss 0.1669', 'Discriminator accuracy 0.9844', 'Total loss: 3.2209', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.88992041)
('DISCRIMINATOR_Imagem FAKE=', 0.25963652)
('Discriminator trained', 10, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:33.807372')
----------------------------------
('Epoch', 2, 'of', 50)
('Number of batches', 19)
('GAN loss 2.5791 ', 'GAN acc 0.1602', 'Discriminator loss 0.2343', 'Discriminator accuracy 0.8984', 'Total loss: 2.8134', 'for batch', 0)
('GAN loss 1.6353 ', 'GAN acc 0.3672', 'Discriminator loss 0.3679', 'Discriminator accuracy 0.7422', 'Total loss: 2.0032', 'for batch', 1)
('GAN loss 0.6705 ', 'GAN acc 0.6523', 'Discriminator loss 0.5028', 'Discriminator accuracy 0.5312', 'Total loss: 1.1733', 'for batch', 2)
('GAN loss 0.6443 ', 'GAN acc 0.7734', 'Discriminator loss 0.5402', 'Discriminator accuracy 0.4922', 'Total loss: 1.1845', 'for batch', 3)
('GAN loss 0.6741 ', 'GAN acc 0.7070', 'Discriminator loss 0.5156', 'Discriminator accuracy 0.5020', 'Total loss: 1.1897', 'for batch', 4)
('GAN loss 0.7379 ', 'GAN acc 0.0312', 'Discriminator loss 0.4964', 'Discriminator accuracy 0.5137', 'Total loss: 1.2343', 'for batch', 5)
('GAN loss 0.8321 ', 'GAN acc 0.0000', 'Discriminator loss 0.4465', 'Discriminator accuracy 0.9297', 'Total loss: 1.2786', 'for batch', 6)
('GAN loss 0.9284 ', 'GAN acc 0.0000', 'Discriminator loss 0.3897', 'Discriminator accuracy 0.9668', 'Total loss: 1.3181', 'for batch', 7)
('GAN loss 1.0345 ', 'GAN acc 0.0000', 'Discriminator loss 0.3288', 'Discriminator accuracy 0.9727', 'Total loss: 1.3633', 'for batch', 8)
('GAN loss 1.1701 ', 'GAN acc 0.0000', 'Discriminator loss 0.2904', 'Discriminator accuracy 0.9707', 'Total loss: 1.4606', 'for batch', 9)
('GAN loss 1.3348 ', 'GAN acc 0.0000', 'Discriminator loss 0.2690', 'Discriminator accuracy 0.9590', 'Total loss: 1.6038', 'for batch', 10)
('GAN loss 1.5201 ', 'GAN acc 0.0000', 'Discriminator loss 0.2270', 'Discriminator accuracy 0.9609', 'Total loss: 1.7470', 'for batch', 11)
('GAN loss 1.7492 ', 'GAN acc 0.0000', 'Discriminator loss 0.1756', 'Discriminator accuracy 0.9844', 'Total loss: 1.9248', 'for batch', 12)
('GAN loss 2.0222 ', 'GAN acc 0.0000', 'Discriminator loss 0.1508', 'Discriminator accuracy 0.9766', 'Total loss: 2.1730', 'for batch', 13)
('GAN loss 2.2429 ', 'GAN acc 0.0000', 'Discriminator loss 0.1446', 'Discriminator accuracy 0.9688', 'Total loss: 2.3876', 'for batch', 14)
('GAN loss 2.3259 ', 'GAN acc 0.0000', 'Discriminator loss 0.1559', 'Discriminator accuracy 0.9609', 'Total loss: 2.4819', 'for batch', 15)
('GAN loss 2.7273 ', 'GAN acc 0.0039', 'Discriminator loss 0.2429', 'Discriminator accuracy 0.9102', 'Total loss: 2.9702', 'for batch', 16)
('GAN loss 6.0245 ', 'GAN acc 0.0000', 'Discriminator loss 0.2490', 'Discriminator accuracy 0.8965', 'Total loss: 6.2735', 'for batch', 17)
('GAN loss 3.5671 ', 'GAN acc 0.0000', 'Discriminator loss 0.2242', 'Discriminator accuracy 0.9102', 'Total loss: 3.7913', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.83946598)
('DISCRIMINATOR_Imagem FAKE=', 0.032188036)
('Discriminator trained', 9, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.672003')
----------------------------------
('Epoch', 3, 'of', 50)
('Number of batches', 19)
('GAN loss 3.0734 ', 'GAN acc 0.0000', 'Discriminator loss 0.1955', 'Discriminator accuracy 0.9375', 'Total loss: 3.2689', 'for batch', 0)
('GAN loss 2.5852 ', 'GAN acc 0.0000', 'Discriminator loss 0.2236', 'Discriminator accuracy 0.9102', 'Total loss: 2.8089', 'for batch', 1)
('GAN loss 2.3894 ', 'GAN acc 0.0000', 'Discriminator loss 0.0899', 'Discriminator accuracy 0.9844', 'Total loss: 2.4793', 'for batch', 2)
('GAN loss 2.3015 ', 'GAN acc 0.0000', 'Discriminator loss 0.1376', 'Discriminator accuracy 0.9492', 'Total loss: 2.4391', 'for batch', 3)
('GAN loss 2.3706 ', 'GAN acc 0.0000', 'Discriminator loss 0.1031', 'Discriminator accuracy 0.9824', 'Total loss: 2.4737', 'for batch', 4)
('GAN loss 2.6683 ', 'GAN acc 0.0000', 'Discriminator loss 0.1396', 'Discriminator accuracy 0.9648', 'Total loss: 2.8079', 'for batch', 5)
('GAN loss 3.1749 ', 'GAN acc 0.0000', 'Discriminator loss 0.1028', 'Discriminator accuracy 0.9785', 'Total loss: 3.2776', 'for batch', 6)
('GAN loss 3.0845 ', 'GAN acc 0.0000', 'Discriminator loss 0.1112', 'Discriminator accuracy 0.9785', 'Total loss: 3.1957', 'for batch', 7)
('GAN loss 3.1314 ', 'GAN acc 0.0000', 'Discriminator loss 0.1073', 'Discriminator accuracy 0.9727', 'Total loss: 3.2388', 'for batch', 8)
('GAN loss 3.2420 ', 'GAN acc 0.0000', 'Discriminator loss 0.1058', 'Discriminator accuracy 0.9629', 'Total loss: 3.3477', 'for batch', 9)
('GAN loss 3.0830 ', 'GAN acc 0.0000', 'Discriminator loss 0.1329', 'Discriminator accuracy 0.9590', 'Total loss: 3.2158', 'for batch', 10)
('GAN loss 2.8364 ', 'GAN acc 0.0000', 'Discriminator loss 0.1154', 'Discriminator accuracy 0.9629', 'Total loss: 2.9518', 'for batch', 11)
('GAN loss 2.9384 ', 'GAN acc 0.0000', 'Discriminator loss 0.0812', 'Discriminator accuracy 0.9863', 'Total loss: 3.0196', 'for batch', 12)
('GAN loss 3.0819 ', 'GAN acc 0.0000', 'Discriminator loss 0.0772', 'Discriminator accuracy 0.9824', 'Total loss: 3.1591', 'for batch', 13)
('GAN loss 3.1742 ', 'GAN acc 0.0000', 'Discriminator loss 0.1118', 'Discriminator accuracy 0.9707', 'Total loss: 3.2859', 'for batch', 14)
('GAN loss 3.0199 ', 'GAN acc 0.0000', 'Discriminator loss 0.1417', 'Discriminator accuracy 0.9668', 'Total loss: 3.1616', 'for batch', 15)
('GAN loss 3.1360 ', 'GAN acc 0.0000', 'Discriminator loss 0.0834', 'Discriminator accuracy 0.9824', 'Total loss: 3.2194', 'for batch', 16)
('GAN loss 3.1254 ', 'GAN acc 0.0000', 'Discriminator loss 0.0975', 'Discriminator accuracy 0.9727', 'Total loss: 3.2229', 'for batch', 17)
('GAN loss 3.0941 ', 'GAN acc 0.0000', 'Discriminator loss 0.0836', 'Discriminator accuracy 0.9805', 'Total loss: 3.1777', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.95407712)
('DISCRIMINATOR_Imagem FAKE=', 0.069393851)
('Discriminator trained', 4, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.342835')
----------------------------------
('Epoch', 4, 'of', 50)
('Number of batches', 19)
('GAN loss 3.2876 ', 'GAN acc 0.0000', 'Discriminator loss 0.0953', 'Discriminator accuracy 0.9785', 'Total loss: 3.3828', 'for batch', 0)
('GAN loss 4.1631 ', 'GAN acc 0.0000', 'Discriminator loss 0.1011', 'Discriminator accuracy 0.9629', 'Total loss: 4.2642', 'for batch', 1)
('GAN loss 3.1942 ', 'GAN acc 0.0000', 'Discriminator loss 0.0584', 'Discriminator accuracy 0.9902', 'Total loss: 3.2525', 'for batch', 2)
('GAN loss 3.1921 ', 'GAN acc 0.0000', 'Discriminator loss 0.1011', 'Discriminator accuracy 0.9707', 'Total loss: 3.2932', 'for batch', 3)
('GAN loss 3.2298 ', 'GAN acc 0.0000', 'Discriminator loss 0.0707', 'Discriminator accuracy 0.9824', 'Total loss: 3.3005', 'for batch', 4)
('GAN loss 3.3291 ', 'GAN acc 0.0000', 'Discriminator loss 0.1046', 'Discriminator accuracy 0.9688', 'Total loss: 3.4337', 'for batch', 5)
('GAN loss 3.4232 ', 'GAN acc 0.0000', 'Discriminator loss 0.0607', 'Discriminator accuracy 0.9902', 'Total loss: 3.4839', 'for batch', 6)
('GAN loss 3.3711 ', 'GAN acc 0.0000', 'Discriminator loss 0.0649', 'Discriminator accuracy 0.9844', 'Total loss: 3.4360', 'for batch', 7)
('GAN loss 4.2041 ', 'GAN acc 0.0000', 'Discriminator loss 0.0854', 'Discriminator accuracy 0.9824', 'Total loss: 4.2895', 'for batch', 8)
('GAN loss 3.6786 ', 'GAN acc 0.0000', 'Discriminator loss 0.0690', 'Discriminator accuracy 0.9805', 'Total loss: 3.7476', 'for batch', 9)
('GAN loss 3.2569 ', 'GAN acc 0.0000', 'Discriminator loss 0.1049', 'Discriminator accuracy 0.9727', 'Total loss: 3.3618', 'for batch', 10)
('GAN loss 3.0425 ', 'GAN acc 0.0000', 'Discriminator loss 0.0927', 'Discriminator accuracy 0.9766', 'Total loss: 3.1352', 'for batch', 11)
('GAN loss 3.2958 ', 'GAN acc 0.0000', 'Discriminator loss 0.0701', 'Discriminator accuracy 0.9922', 'Total loss: 3.3658', 'for batch', 12)
('GAN loss 3.6245 ', 'GAN acc 0.0000', 'Discriminator loss 0.0512', 'Discriminator accuracy 0.9863', 'Total loss: 3.6757', 'for batch', 13)
('GAN loss 3.5406 ', 'GAN acc 0.0000', 'Discriminator loss 0.0961', 'Discriminator accuracy 0.9766', 'Total loss: 3.6367', 'for batch', 14)
('GAN loss 3.6072 ', 'GAN acc 0.0000', 'Discriminator loss 0.1208', 'Discriminator accuracy 0.9688', 'Total loss: 3.7280', 'for batch', 15)
('GAN loss 3.2536 ', 'GAN acc 0.0000', 'Discriminator loss 0.0648', 'Discriminator accuracy 0.9844', 'Total loss: 3.3185', 'for batch', 16)
('GAN loss 3.0900 ', 'GAN acc 0.0000', 'Discriminator loss 0.0844', 'Discriminator accuracy 0.9824', 'Total loss: 3.1744', 'for batch', 17)
('GAN loss 3.4715 ', 'GAN acc 0.0000', 'Discriminator loss 0.0700', 'Discriminator accuracy 0.9863', 'Total loss: 3.5415', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96554685)
('DISCRIMINATOR_Imagem FAKE=', 0.030692298)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.868519')
----------------------------------
('Epoch', 5, 'of', 50)
('Number of batches', 19)
('GAN loss 3.7103 ', 'GAN acc 0.0000', 'Discriminator loss 0.0673', 'Discriminator accuracy 0.9824', 'Total loss: 3.7776', 'for batch', 0)
('GAN loss 3.4319 ', 'GAN acc 0.0000', 'Discriminator loss 0.0845', 'Discriminator accuracy 0.9766', 'Total loss: 3.5164', 'for batch', 1)
('GAN loss 3.4725 ', 'GAN acc 0.0000', 'Discriminator loss 0.0339', 'Discriminator accuracy 0.9941', 'Total loss: 3.5065', 'for batch', 2)
('GAN loss 3.2791 ', 'GAN acc 0.0000', 'Discriminator loss 0.0837', 'Discriminator accuracy 0.9766', 'Total loss: 3.3628', 'for batch', 3)
----------------------------------
('Training with dataset based on class - ', 'horse', 'with', 5000, 'samples')
----------------------------------
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_2 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_1 (Sequential)        (None, 1)             0           lambda_1[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_1 (Convolution2D)  (None, 32, 16, 16)    608         convolution2d_input_1[0][0]      
____________________________________________________________________________________________________
leakyrelu_1 (LeakyReLU)          (None, 32, 16, 16)    0           convolution2d_1[0][0]            
____________________________________________________________________________________________________
dropout_1 (Dropout)              (None, 32, 16, 16)    0           leakyrelu_1[0][0]                
____________________________________________________________________________________________________
convolution2d_2 (Convolution2D)  (None, 64, 8, 8)      18496       dropout_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_2 (LeakyReLU)          (None, 64, 8, 8)      0           convolution2d_2[0][0]            
____________________________________________________________________________________________________
dropout_2 (Dropout)              (None, 64, 8, 8)      0           leakyrelu_2[0][0]                
____________________________________________________________________________________________________
convolution2d_3 (Convolution2D)  (None, 128, 4, 4)     73856       dropout_2[0][0]                  
____________________________________________________________________________________________________
leakyrelu_3 (LeakyReLU)          (None, 128, 4, 4)     0           convolution2d_3[0][0]            
____________________________________________________________________________________________________
dropout_3 (Dropout)              (None, 128, 4, 4)     0           leakyrelu_3[0][0]                
____________________________________________________________________________________________________
convolution2d_4 (Convolution2D)  (None, 256, 2, 2)     295168      dropout_3[0][0]                  
____________________________________________________________________________________________________
leakyrelu_4 (LeakyReLU)          (None, 256, 2, 2)     0           convolution2d_4[0][0]            
____________________________________________________________________________________________________
dropout_4 (Dropout)              (None, 256, 2, 2)     0           leakyrelu_4[0][0]                
____________________________________________________________________________________________________
flatten_1 (Flatten)              (None, 1024)          0           dropout_4[0][0]                  
____________________________________________________________________________________________________
dense_1 (Dense)                  (None, 1024)          1049600     flatten_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_5 (LeakyReLU)          (None, 1024)          0           dense_1[0][0]                    
____________________________________________________________________________________________________
dropout_5 (Dropout)              (None, 1024)          0           leakyrelu_5[0][0]                
____________________________________________________________________________________________________
dense_2 (Dense)                  (None, 1)             1025        dropout_5[0][0]                  
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
('Epoch', 1, 'of', 50)
('Number of batches', 19)
('GAN loss 1.7907 ', 'GAN acc 0.0039', 'Discriminator loss 0.6959', 'Discriminator accuracy 0.4512', 'Total loss: 2.4867', 'for batch', 0)
('GAN loss 2.4971 ', 'GAN acc 0.0000', 'Discriminator loss 0.5411', 'Discriminator accuracy 0.5039', 'Total loss: 3.0381', 'for batch', 1)
('GAN loss 2.8351 ', 'GAN acc 0.0000', 'Discriminator loss 0.5051', 'Discriminator accuracy 0.5000', 'Total loss: 3.3402', 'for batch', 2)
('GAN loss 2.9060 ', 'GAN acc 0.0000', 'Discriminator loss 0.4788', 'Discriminator accuracy 0.5059', 'Total loss: 3.3848', 'for batch', 3)
('GAN loss 2.7245 ', 'GAN acc 0.0000', 'Discriminator loss 0.4852', 'Discriminator accuracy 0.5059', 'Total loss: 3.2097', 'for batch', 4)
('GAN loss 2.4254 ', 'GAN acc 0.0000', 'Discriminator loss 0.4684', 'Discriminator accuracy 0.5820', 'Total loss: 2.8938', 'for batch', 5)
('GAN loss 2.1583 ', 'GAN acc 0.0000', 'Discriminator loss 0.4452', 'Discriminator accuracy 0.7305', 'Total loss: 2.6035', 'for batch', 6)
('GAN loss 2.0888 ', 'GAN acc 0.0000', 'Discriminator loss 0.4341', 'Discriminator accuracy 0.8477', 'Total loss: 2.5229', 'for batch', 7)
('GAN loss 2.1594 ', 'GAN acc 0.0000', 'Discriminator loss 0.3918', 'Discriminator accuracy 0.9453', 'Total loss: 2.5512', 'for batch', 8)
('GAN loss 2.3726 ', 'GAN acc 0.0000', 'Discriminator loss 0.3327', 'Discriminator accuracy 0.9707', 'Total loss: 2.7053', 'for batch', 9)
('GAN loss 2.6109 ', 'GAN acc 0.0000', 'Discriminator loss 0.2920', 'Discriminator accuracy 0.9727', 'Total loss: 2.9030', 'for batch', 10)
('GAN loss 2.7124 ', 'GAN acc 0.0039', 'Discriminator loss 0.2511', 'Discriminator accuracy 0.9902', 'Total loss: 2.9635', 'for batch', 11)
('GAN loss 2.9260 ', 'GAN acc 0.0078', 'Discriminator loss 0.1934', 'Discriminator accuracy 0.9902', 'Total loss: 3.1194', 'for batch', 12)
('GAN loss 3.1081 ', 'GAN acc 0.0156', 'Discriminator loss 0.1812', 'Discriminator accuracy 0.9883', 'Total loss: 3.2893', 'for batch', 13)
('GAN loss 4.0913 ', 'GAN acc 0.0117', 'Discriminator loss 0.2175', 'Discriminator accuracy 0.9414', 'Total loss: 4.3088', 'for batch', 14)
('GAN loss 4.6960 ', 'GAN acc 0.0078', 'Discriminator loss 0.1660', 'Discriminator accuracy 0.9863', 'Total loss: 4.8620', 'for batch', 15)
('GAN loss 4.5974 ', 'GAN acc 0.0000', 'Discriminator loss 0.1248', 'Discriminator accuracy 0.9961', 'Total loss: 4.7223', 'for batch', 16)
('GAN loss 3.8073 ', 'GAN acc 0.0312', 'Discriminator loss 0.1445', 'Discriminator accuracy 0.9785', 'Total loss: 3.9517', 'for batch', 17)
('GAN loss 3.3490 ', 'GAN acc 0.0273', 'Discriminator loss 0.1275', 'Discriminator accuracy 0.9922', 'Total loss: 3.4765', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.90241164)
('DISCRIMINATOR_Imagem FAKE=', 0.15652786)
('Discriminator trained', 7, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:33.909718')
----------------------------------
('Epoch', 2, 'of', 50)
('Number of batches', 19)
('GAN loss 3.1136 ', 'GAN acc 0.1172', 'Discriminator loss 0.1566', 'Discriminator accuracy 0.9434', 'Total loss: 3.2702', 'for batch', 0)
('GAN loss 2.7500 ', 'GAN acc 0.2422', 'Discriminator loss 0.2327', 'Discriminator accuracy 0.8574', 'Total loss: 2.9827', 'for batch', 1)
('GAN loss 2.4041 ', 'GAN acc 0.3398', 'Discriminator loss 0.2743', 'Discriminator accuracy 0.8164', 'Total loss: 2.6783', 'for batch', 2)
('GAN loss 1.2660 ', 'GAN acc 0.4258', 'Discriminator loss 0.4217', 'Discriminator accuracy 0.6582', 'Total loss: 1.6878', 'for batch', 3)
('GAN loss 0.8230 ', 'GAN acc 0.2461', 'Discriminator loss 0.4383', 'Discriminator accuracy 0.6855', 'Total loss: 1.2614', 'for batch', 4)
('GAN loss 0.7641 ', 'GAN acc 0.4141', 'Discriminator loss 0.4782', 'Discriminator accuracy 0.6426', 'Total loss: 1.2423', 'for batch', 5)
('GAN loss 0.7428 ', 'GAN acc 0.2773', 'Discriminator loss 0.4927', 'Discriminator accuracy 0.5859', 'Total loss: 1.2355', 'for batch', 6)
('GAN loss 0.8050 ', 'GAN acc 0.0000', 'Discriminator loss 0.4576', 'Discriminator accuracy 0.7480', 'Total loss: 1.2626', 'for batch', 7)
('GAN loss 0.8870 ', 'GAN acc 0.0000', 'Discriminator loss 0.3947', 'Discriminator accuracy 0.9727', 'Total loss: 1.2817', 'for batch', 8)
('GAN loss 0.9901 ', 'GAN acc 0.0000', 'Discriminator loss 0.3475', 'Discriminator accuracy 0.9688', 'Total loss: 1.3375', 'for batch', 9)
('GAN loss 1.1188 ', 'GAN acc 0.0000', 'Discriminator loss 0.3258', 'Discriminator accuracy 0.9609', 'Total loss: 1.4446', 'for batch', 10)
('GAN loss 1.2617 ', 'GAN acc 0.0000', 'Discriminator loss 0.2787', 'Discriminator accuracy 0.9609', 'Total loss: 1.5404', 'for batch', 11)
('GAN loss 1.4513 ', 'GAN acc 0.0000', 'Discriminator loss 0.2227', 'Discriminator accuracy 0.9824', 'Total loss: 1.6740', 'for batch', 12)
('GAN loss 1.6884 ', 'GAN acc 0.0000', 'Discriminator loss 0.1929', 'Discriminator accuracy 0.9766', 'Total loss: 1.8813', 'for batch', 13)
('GAN loss 1.9297 ', 'GAN acc 0.0000', 'Discriminator loss 0.1741', 'Discriminator accuracy 0.9648', 'Total loss: 2.1038', 'for batch', 14)
('GAN loss 2.0925 ', 'GAN acc 0.0000', 'Discriminator loss 0.1738', 'Discriminator accuracy 0.9609', 'Total loss: 2.2663', 'for batch', 15)
('GAN loss 2.2622 ', 'GAN acc 0.0000', 'Discriminator loss 0.1635', 'Discriminator accuracy 0.9648', 'Total loss: 2.4257', 'for batch', 16)
('GAN loss 4.8298 ', 'GAN acc 0.0000', 'Discriminator loss 0.3078', 'Discriminator accuracy 0.8828', 'Total loss: 5.1376', 'for batch', 17)
('GAN loss 3.4263 ', 'GAN acc 0.0000', 'Discriminator loss 0.1910', 'Discriminator accuracy 0.9219', 'Total loss: 3.6173', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.84556401)
('DISCRIMINATOR_Imagem FAKE=', 0.037949156)
('Discriminator trained', 2, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.732960')
----------------------------------
('Epoch', 3, 'of', 50)
('Number of batches', 19)
('GAN loss 3.0593 ', 'GAN acc 0.0000', 'Discriminator loss 0.1858', 'Discriminator accuracy 0.9355', 'Total loss: 3.2452', 'for batch', 0)
('GAN loss 2.6914 ', 'GAN acc 0.0000', 'Discriminator loss 0.2304', 'Discriminator accuracy 0.9102', 'Total loss: 2.9218', 'for batch', 1)
('GAN loss 2.4821 ', 'GAN acc 0.0000', 'Discriminator loss 0.0944', 'Discriminator accuracy 0.9824', 'Total loss: 2.5765', 'for batch', 2)
('GAN loss 2.2968 ', 'GAN acc 0.0000', 'Discriminator loss 0.1412', 'Discriminator accuracy 0.9512', 'Total loss: 2.4381', 'for batch', 3)
('GAN loss 2.3069 ', 'GAN acc 0.0000', 'Discriminator loss 0.1040', 'Discriminator accuracy 0.9824', 'Total loss: 2.4109', 'for batch', 4)
('GAN loss 2.5939 ', 'GAN acc 0.0000', 'Discriminator loss 0.1369', 'Discriminator accuracy 0.9629', 'Total loss: 2.7308', 'for batch', 5)
('GAN loss 2.6895 ', 'GAN acc 0.0000', 'Discriminator loss 0.1058', 'Discriminator accuracy 0.9766', 'Total loss: 2.7953', 'for batch', 6)
('GAN loss 2.8941 ', 'GAN acc 0.0000', 'Discriminator loss 0.1052', 'Discriminator accuracy 0.9824', 'Total loss: 2.9993', 'for batch', 7)
('GAN loss 2.9867 ', 'GAN acc 0.0000', 'Discriminator loss 0.1027', 'Discriminator accuracy 0.9766', 'Total loss: 3.0894', 'for batch', 8)
('GAN loss 2.9485 ', 'GAN acc 0.0000', 'Discriminator loss 0.0981', 'Discriminator accuracy 0.9648', 'Total loss: 3.0466', 'for batch', 9)
('GAN loss 3.1474 ', 'GAN acc 0.0039', 'Discriminator loss 0.1299', 'Discriminator accuracy 0.9629', 'Total loss: 3.2772', 'for batch', 10)
('GAN loss 2.8605 ', 'GAN acc 0.0000', 'Discriminator loss 0.1194', 'Discriminator accuracy 0.9629', 'Total loss: 2.9799', 'for batch', 11)
('GAN loss 3.6093 ', 'GAN acc 0.0000', 'Discriminator loss 0.0869', 'Discriminator accuracy 0.9844', 'Total loss: 3.6962', 'for batch', 12)
('GAN loss 3.2893 ', 'GAN acc 0.0000', 'Discriminator loss 0.0795', 'Discriminator accuracy 0.9805', 'Total loss: 3.3687', 'for batch', 13)
('GAN loss 3.1470 ', 'GAN acc 0.0000', 'Discriminator loss 0.1163', 'Discriminator accuracy 0.9668', 'Total loss: 3.2634', 'for batch', 14)
('GAN loss 2.8853 ', 'GAN acc 0.0000', 'Discriminator loss 0.1469', 'Discriminator accuracy 0.9668', 'Total loss: 3.0323', 'for batch', 15)
('GAN loss 3.0170 ', 'GAN acc 0.0039', 'Discriminator loss 0.0821', 'Discriminator accuracy 0.9824', 'Total loss: 3.0991', 'for batch', 16)
('GAN loss 3.0101 ', 'GAN acc 0.0000', 'Discriminator loss 0.0973', 'Discriminator accuracy 0.9707', 'Total loss: 3.1074', 'for batch', 17)
('GAN loss 3.1214 ', 'GAN acc 0.0000', 'Discriminator loss 0.0791', 'Discriminator accuracy 0.9824', 'Total loss: 3.2005', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.95759642)
('DISCRIMINATOR_Imagem FAKE=', 0.066170387)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.334041')
----------------------------------
('Epoch', 4, 'of', 50)
('Number of batches', 19)
('GAN loss 3.1295 ', 'GAN acc 0.0000', 'Discriminator loss 0.0923', 'Discriminator accuracy 0.9805', 'Total loss: 3.2218', 'for batch', 0)
('GAN loss 3.0935 ', 'GAN acc 0.0000', 'Discriminator loss 0.1082', 'Discriminator accuracy 0.9707', 'Total loss: 3.2017', 'for batch', 1)
('GAN loss 3.1877 ', 'GAN acc 0.0000', 'Discriminator loss 0.0563', 'Discriminator accuracy 0.9902', 'Total loss: 3.2440', 'for batch', 2)
('GAN loss 3.3946 ', 'GAN acc 0.0000', 'Discriminator loss 0.1031', 'Discriminator accuracy 0.9707', 'Total loss: 3.4977', 'for batch', 3)
('GAN loss 3.3919 ', 'GAN acc 0.0000', 'Discriminator loss 0.0650', 'Discriminator accuracy 0.9824', 'Total loss: 3.4569', 'for batch', 4)
('GAN loss 3.0481 ', 'GAN acc 0.0000', 'Discriminator loss 0.0973', 'Discriminator accuracy 0.9688', 'Total loss: 3.1455', 'for batch', 5)
('GAN loss 3.2917 ', 'GAN acc 0.0000', 'Discriminator loss 0.0673', 'Discriminator accuracy 0.9941', 'Total loss: 3.3590', 'for batch', 6)
('GAN loss 3.3371 ', 'GAN acc 0.0000', 'Discriminator loss 0.0735', 'Discriminator accuracy 0.9844', 'Total loss: 3.4105', 'for batch', 7)
('GAN loss 3.5968 ', 'GAN acc 0.0000', 'Discriminator loss 0.0835', 'Discriminator accuracy 0.9805', 'Total loss: 3.6804', 'for batch', 8)
('GAN loss 3.6368 ', 'GAN acc 0.0000', 'Discriminator loss 0.0702', 'Discriminator accuracy 0.9824', 'Total loss: 3.7070', 'for batch', 9)
('GAN loss 3.3035 ', 'GAN acc 0.0000', 'Discriminator loss 0.1071', 'Discriminator accuracy 0.9727', 'Total loss: 3.4106', 'for batch', 10)
('GAN loss 3.0376 ', 'GAN acc 0.0000', 'Discriminator loss 0.1001', 'Discriminator accuracy 0.9766', 'Total loss: 3.1377', 'for batch', 11)
('GAN loss 3.4123 ', 'GAN acc 0.0000', 'Discriminator loss 0.0681', 'Discriminator accuracy 0.9922', 'Total loss: 3.4804', 'for batch', 12)
('GAN loss 3.5955 ', 'GAN acc 0.0000', 'Discriminator loss 0.0503', 'Discriminator accuracy 0.9863', 'Total loss: 3.6459', 'for batch', 13)
('GAN loss 3.9816 ', 'GAN acc 0.0000', 'Discriminator loss 0.0940', 'Discriminator accuracy 0.9766', 'Total loss: 4.0756', 'for batch', 14)
('GAN loss 3.2598 ', 'GAN acc 0.0000', 'Discriminator loss 0.1204', 'Discriminator accuracy 0.9727', 'Total loss: 3.3801', 'for batch', 15)
('GAN loss 3.0635 ', 'GAN acc 0.0000', 'Discriminator loss 0.0718', 'Discriminator accuracy 0.9844', 'Total loss: 3.1353', 'for batch', 16)
('GAN loss 3.3546 ', 'GAN acc 0.0000', 'Discriminator loss 0.0873', 'Discriminator accuracy 0.9824', 'Total loss: 3.4419', 'for batch', 17)
('GAN loss 3.4855 ', 'GAN acc 0.0000', 'Discriminator loss 0.0621', 'Discriminator accuracy 0.9863', 'Total loss: 3.5475', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96675831)
('DISCRIMINATOR_Imagem FAKE=', 0.052899208)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.878687')
----------------------------------
('Epoch', 5, 'of', 50)
('Number of batches', 19)
('GAN loss 3.5472 ', 'GAN acc 0.0000', 'Discriminator loss 0.0744', 'Discriminator accuracy 0.9824', 'Total loss: 3.6216', 'for batch', 0)
('GAN loss 3.1123 ', 'GAN acc 0.0000', 'Discriminator loss 0.0906', 'Discriminator accuracy 0.9766', 'Total loss: 3.2029', 'for batch', 1)
('GAN loss 4.6658 ', 'GAN acc 0.0000', 'Discriminator loss 0.0510', 'Discriminator accuracy 0.9883', 'Total loss: 4.7168', 'for batch', 2)
('GAN loss 3.7235 ', 'GAN acc 0.0000', 'Discriminator loss 0.0926', 'Discriminator accuracy 0.9727', 'Total loss: 3.8161', 'for batch', 3)
('GAN loss 3.2821 ', 'GAN acc 0.0000', 'Discriminator loss 0.0648', 'Discriminator accuracy 0.9746', 'Total loss: 3.3469', 'for batch', 4)
('GAN loss 2.9773 ', 'GAN acc 0.0000', 'Discriminator loss 0.0855', 'Discriminator accuracy 0.9785', 'Total loss: 3.0628', 'for batch', 5)
('GAN loss 3.4788 ', 'GAN acc 0.0000', 'Discriminator loss 0.0655', 'Discriminator accuracy 0.9941', 'Total loss: 3.5443', 'for batch', 6)
('GAN loss 3.8976 ', 'GAN acc 0.0000', 'Discriminator loss 0.0587', 'Discriminator accuracy 0.9863', 'Total loss: 3.9562', 'for batch', 7)
('GAN loss 3.9273 ', 'GAN acc 0.0000', 'Discriminator loss 0.0700', 'Discriminator accuracy 0.9824', 'Total loss: 3.9973', 'for batch', 8)
('GAN loss 3.9522 ', 'GAN acc 0.0000', 'Discriminator loss 0.0557', 'Discriminator accuracy 0.9863', 'Total loss: 4.0079', 'for batch', 9)
('GAN loss 3.5307 ', 'GAN acc 0.0000', 'Discriminator loss 0.0946', 'Discriminator accuracy 0.9766', 'Total loss: 3.6253', 'for batch', 10)
('GAN loss 3.8435 ', 'GAN acc 0.0000', 'Discriminator loss 0.0875', 'Discriminator accuracy 0.9785', 'Total loss: 3.9309', 'for batch', 11)
('GAN loss 4.7705 ', 'GAN acc 0.0000', 'Discriminator loss 0.0473', 'Discriminator accuracy 0.9922', 'Total loss: 4.8177', 'for batch', 12)
('GAN loss 4.4518 ', 'GAN acc 0.0000', 'Discriminator loss 0.0385', 'Discriminator accuracy 0.9883', 'Total loss: 4.4903', 'for batch', 13)
('GAN loss 6.1789 ', 'GAN acc 0.0000', 'Discriminator loss 0.0765', 'Discriminator accuracy 0.9766', 'Total loss: 6.2554', 'for batch', 14)
('GAN loss 3.4966 ', 'GAN acc 0.0000', 'Discriminator loss 0.1012', 'Discriminator accuracy 0.9766', 'Total loss: 3.5978', 'for batch', 15)
('GAN loss 3.1753 ', 'GAN acc 0.0000', 'Discriminator loss 0.0545', 'Discriminator accuracy 0.9902', 'Total loss: 3.2298', 'for batch', 16)
('GAN loss 3.4515 ', 'GAN acc 0.0000', 'Discriminator loss 0.0600', 'Discriminator accuracy 0.9902', 'Total loss: 3.5115', 'for batch', 17)
('GAN loss 3.7648 ', 'GAN acc 0.0000', 'Discriminator loss 0.0651', 'Discriminator accuracy 0.9902', 'Total loss: 3.8299', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97508901)
('DISCRIMINATOR_Imagem FAKE=', 0.32906288)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.521543')
----------------------------------
('Epoch', 6, 'of', 50)
('Number of batches', 19)
('GAN loss 9.6797 ', 'GAN acc 0.0000', 'Discriminator loss 0.1910', 'Discriminator accuracy 0.9316', 'Total loss: 9.8708', 'for batch', 0)
('GAN loss 5.0752 ', 'GAN acc 0.0000', 'Discriminator loss 0.2714', 'Discriminator accuracy 0.9277', 'Total loss: 5.3466', 'for batch', 1)
('GAN loss 4.1956 ', 'GAN acc 0.0000', 'Discriminator loss 0.0631', 'Discriminator accuracy 0.9785', 'Total loss: 4.2587', 'for batch', 2)
('GAN loss 3.1853 ', 'GAN acc 0.0000', 'Discriminator loss 0.1230', 'Discriminator accuracy 0.9688', 'Total loss: 3.3083', 'for batch', 3)
('GAN loss 2.7580 ', 'GAN acc 0.0000', 'Discriminator loss 0.0923', 'Discriminator accuracy 0.9766', 'Total loss: 2.8502', 'for batch', 4)
('GAN loss 2.9740 ', 'GAN acc 0.0000', 'Discriminator loss 0.0873', 'Discriminator accuracy 0.9766', 'Total loss: 3.0613', 'for batch', 5)
('GAN loss 3.3664 ', 'GAN acc 0.0000', 'Discriminator loss 0.0571', 'Discriminator accuracy 0.9922', 'Total loss: 3.4235', 'for batch', 6)
('GAN loss 3.6974 ', 'GAN acc 0.0000', 'Discriminator loss 0.0546', 'Discriminator accuracy 0.9922', 'Total loss: 3.7519', 'for batch', 7)
('GAN loss 3.7719 ', 'GAN acc 0.0000', 'Discriminator loss 0.0545', 'Discriminator accuracy 0.9863', 'Total loss: 3.8265', 'for batch', 8)
('GAN loss 3.8175 ', 'GAN acc 0.0000', 'Discriminator loss 0.0500', 'Discriminator accuracy 0.9902', 'Total loss: 3.8675', 'for batch', 9)
('GAN loss 3.7671 ', 'GAN acc 0.0000', 'Discriminator loss 0.0782', 'Discriminator accuracy 0.9863', 'Total loss: 3.8453', 'for batch', 10)
('GAN loss 3.5739 ', 'GAN acc 0.0000', 'Discriminator loss 0.0645', 'Discriminator accuracy 0.9805', 'Total loss: 3.6384', 'for batch', 11)
('GAN loss 3.6567 ', 'GAN acc 0.0000', 'Discriminator loss 0.0468', 'Discriminator accuracy 0.9922', 'Total loss: 3.7034', 'for batch', 12)
('GAN loss 3.8335 ', 'GAN acc 0.0000', 'Discriminator loss 0.0319', 'Discriminator accuracy 0.9922', 'Total loss: 3.8654', 'for batch', 13)
('GAN loss 3.7891 ', 'GAN acc 0.0000', 'Discriminator loss 0.0729', 'Discriminator accuracy 0.9805', 'Total loss: 3.8620', 'for batch', 14)
('GAN loss 3.5581 ', 'GAN acc 0.0000', 'Discriminator loss 0.1022', 'Discriminator accuracy 0.9805', 'Total loss: 3.6603', 'for batch', 15)
('GAN loss 3.6069 ', 'GAN acc 0.0000', 'Discriminator loss 0.0499', 'Discriminator accuracy 0.9902', 'Total loss: 3.6568', 'for batch', 16)
('GAN loss 3.6699 ', 'GAN acc 0.0000', 'Discriminator loss 0.0499', 'Discriminator accuracy 0.9883', 'Total loss: 3.7198', 'for batch', 17)
('GAN loss 3.7702 ', 'GAN acc 0.0000', 'Discriminator loss 0.0461', 'Discriminator accuracy 0.9902', 'Total loss: 3.8163', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98180646)
('DISCRIMINATOR_Imagem FAKE=', 0.025130622)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.024822')
----------------------------------
('Epoch', 7, 'of', 50)
('Number of batches', 19)
('GAN loss 3.8913 ', 'GAN acc 0.0000', 'Discriminator loss 0.0488', 'Discriminator accuracy 0.9863', 'Total loss: 3.9401', 'for batch', 0)
('GAN loss 3.8497 ', 'GAN acc 0.0000', 'Discriminator loss 0.0505', 'Discriminator accuracy 0.9844', 'Total loss: 3.9003', 'for batch', 1)
('GAN loss 4.0659 ', 'GAN acc 0.0000', 'Discriminator loss 0.0176', 'Discriminator accuracy 0.9980', 'Total loss: 4.0835', 'for batch', 2)
('GAN loss 4.0487 ', 'GAN acc 0.0000', 'Discriminator loss 0.0495', 'Discriminator accuracy 0.9863', 'Total loss: 4.0981', 'for batch', 3)
('GAN loss 4.0022 ', 'GAN acc 0.0000', 'Discriminator loss 0.0238', 'Discriminator accuracy 0.9961', 'Total loss: 4.0260', 'for batch', 4)
('GAN loss 3.8498 ', 'GAN acc 0.0000', 'Discriminator loss 0.0705', 'Discriminator accuracy 0.9824', 'Total loss: 3.9203', 'for batch', 5)
('GAN loss 4.0430 ', 'GAN acc 0.0000', 'Discriminator loss 0.0382', 'Discriminator accuracy 0.9941', 'Total loss: 4.0812', 'for batch', 6)
('GAN loss 4.4212 ', 'GAN acc 0.0000', 'Discriminator loss 0.0418', 'Discriminator accuracy 0.9941', 'Total loss: 4.4630', 'for batch', 7)
('GAN loss 4.5079 ', 'GAN acc 0.0000', 'Discriminator loss 0.0630', 'Discriminator accuracy 0.9863', 'Total loss: 4.5709', 'for batch', 8)
('GAN loss 4.4937 ', 'GAN acc 0.0000', 'Discriminator loss 0.0409', 'Discriminator accuracy 0.9941', 'Total loss: 4.5346', 'for batch', 9)
('GAN loss 4.1278 ', 'GAN acc 0.0000', 'Discriminator loss 0.0793', 'Discriminator accuracy 0.9824', 'Total loss: 4.2071', 'for batch', 10)
('GAN loss 3.7292 ', 'GAN acc 0.0000', 'Discriminator loss 0.0673', 'Discriminator accuracy 0.9824', 'Total loss: 3.7965', 'for batch', 11)
('GAN loss 3.8833 ', 'GAN acc 0.0000', 'Discriminator loss 0.0480', 'Discriminator accuracy 0.9922', 'Total loss: 3.9313', 'for batch', 12)
('GAN loss 4.1312 ', 'GAN acc 0.0000', 'Discriminator loss 0.0297', 'Discriminator accuracy 0.9941', 'Total loss: 4.1609', 'for batch', 13)
('GAN loss 4.0098 ', 'GAN acc 0.0000', 'Discriminator loss 0.0793', 'Discriminator accuracy 0.9805', 'Total loss: 4.0891', 'for batch', 14)
('GAN loss 3.8853 ', 'GAN acc 0.0000', 'Discriminator loss 0.1051', 'Discriminator accuracy 0.9805', 'Total loss: 3.9904', 'for batch', 15)
('GAN loss 3.7648 ', 'GAN acc 0.0000', 'Discriminator loss 0.0467', 'Discriminator accuracy 0.9883', 'Total loss: 3.8115', 'for batch', 16)
('GAN loss 3.9510 ', 'GAN acc 0.0000', 'Discriminator loss 0.0472', 'Discriminator accuracy 0.9883', 'Total loss: 3.9982', 'for batch', 17)
('GAN loss 3.8666 ', 'GAN acc 0.0000', 'Discriminator loss 0.0443', 'Discriminator accuracy 0.9902', 'Total loss: 3.9108', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98364174)
('DISCRIMINATOR_Imagem FAKE=', 0.025050808)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.526110')
----------------------------------
('Epoch', 8, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0348 ', 'GAN acc 0.0000', 'Discriminator loss 0.0498', 'Discriminator accuracy 0.9902', 'Total loss: 4.0846', 'for batch', 0)
('GAN loss 3.9443 ', 'GAN acc 0.0000', 'Discriminator loss 0.0497', 'Discriminator accuracy 0.9902', 'Total loss: 3.9940', 'for batch', 1)
('GAN loss 4.2094 ', 'GAN acc 0.0000', 'Discriminator loss 0.0209', 'Discriminator accuracy 0.9961', 'Total loss: 4.2303', 'for batch', 2)
('GAN loss 4.0579 ', 'GAN acc 0.0000', 'Discriminator loss 0.0469', 'Discriminator accuracy 0.9863', 'Total loss: 4.1048', 'for batch', 3)
('GAN loss 4.0981 ', 'GAN acc 0.0000', 'Discriminator loss 0.0243', 'Discriminator accuracy 0.9941', 'Total loss: 4.1224', 'for batch', 4)
('GAN loss 3.8750 ', 'GAN acc 0.0000', 'Discriminator loss 0.0779', 'Discriminator accuracy 0.9824', 'Total loss: 3.9529', 'for batch', 5)
('GAN loss 4.7882 ', 'GAN acc 0.0000', 'Discriminator loss 0.0463', 'Discriminator accuracy 0.9902', 'Total loss: 4.8344', 'for batch', 6)
('GAN loss 4.8863 ', 'GAN acc 0.0000', 'Discriminator loss 0.0417', 'Discriminator accuracy 0.9922', 'Total loss: 4.9280', 'for batch', 7)
('GAN loss 4.5934 ', 'GAN acc 0.0000', 'Discriminator loss 0.0618', 'Discriminator accuracy 0.9844', 'Total loss: 4.6552', 'for batch', 8)
('GAN loss 4.4648 ', 'GAN acc 0.0000', 'Discriminator loss 0.0440', 'Discriminator accuracy 0.9922', 'Total loss: 4.5088', 'for batch', 9)
('GAN loss 3.9466 ', 'GAN acc 0.0000', 'Discriminator loss 0.0755', 'Discriminator accuracy 0.9824', 'Total loss: 4.0221', 'for batch', 10)
('GAN loss 3.4683 ', 'GAN acc 0.0000', 'Discriminator loss 0.0579', 'Discriminator accuracy 0.9863', 'Total loss: 3.5262', 'for batch', 11)
('GAN loss 3.6567 ', 'GAN acc 0.0000', 'Discriminator loss 0.0450', 'Discriminator accuracy 0.9922', 'Total loss: 3.7017', 'for batch', 12)
('GAN loss 4.2234 ', 'GAN acc 0.0000', 'Discriminator loss 0.0327', 'Discriminator accuracy 0.9961', 'Total loss: 4.2560', 'for batch', 13)
('GAN loss 4.0766 ', 'GAN acc 0.0000', 'Discriminator loss 0.0750', 'Discriminator accuracy 0.9785', 'Total loss: 4.1516', 'for batch', 14)
('GAN loss 3.5806 ', 'GAN acc 0.0000', 'Discriminator loss 0.1022', 'Discriminator accuracy 0.9824', 'Total loss: 3.6829', 'for batch', 15)
('GAN loss 3.6031 ', 'GAN acc 0.0000', 'Discriminator loss 0.0607', 'Discriminator accuracy 0.9902', 'Total loss: 3.6638', 'for batch', 16)
('GAN loss 3.8342 ', 'GAN acc 0.0000', 'Discriminator loss 0.0539', 'Discriminator accuracy 0.9863', 'Total loss: 3.8881', 'for batch', 17)
('GAN loss 3.9676 ', 'GAN acc 0.0000', 'Discriminator loss 0.0515', 'Discriminator accuracy 0.9883', 'Total loss: 4.0191', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9817943)
('DISCRIMINATOR_Imagem FAKE=', 0.021767123)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.036791')
----------------------------------
('Epoch', 9, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0707 ', 'GAN acc 0.0000', 'Discriminator loss 0.0490', 'Discriminator accuracy 0.9863', 'Total loss: 4.1197', 'for batch', 0)
('GAN loss 3.9449 ', 'GAN acc 0.0000', 'Discriminator loss 0.0634', 'Discriminator accuracy 0.9805', 'Total loss: 4.0083', 'for batch', 1)
('GAN loss 3.9487 ', 'GAN acc 0.0000', 'Discriminator loss 0.0186', 'Discriminator accuracy 0.9980', 'Total loss: 3.9673', 'for batch', 2)
('GAN loss 3.8120 ', 'GAN acc 0.0000', 'Discriminator loss 0.0571', 'Discriminator accuracy 0.9844', 'Total loss: 3.8692', 'for batch', 3)
('GAN loss 3.9589 ', 'GAN acc 0.0000', 'Discriminator loss 0.0276', 'Discriminator accuracy 0.9922', 'Total loss: 3.9865', 'for batch', 4)
('GAN loss 4.1054 ', 'GAN acc 0.0000', 'Discriminator loss 0.0804', 'Discriminator accuracy 0.9844', 'Total loss: 4.1858', 'for batch', 5)
('GAN loss 4.1633 ', 'GAN acc 0.0000', 'Discriminator loss 0.0318', 'Discriminator accuracy 0.9961', 'Total loss: 4.1951', 'for batch', 6)
('GAN loss 4.2341 ', 'GAN acc 0.0000', 'Discriminator loss 0.0505', 'Discriminator accuracy 0.9922', 'Total loss: 4.2846', 'for batch', 7)
('GAN loss 6.4956 ', 'GAN acc 0.0000', 'Discriminator loss 0.0678', 'Discriminator accuracy 0.9844', 'Total loss: 6.5634', 'for batch', 8)
('GAN loss 4.5019 ', 'GAN acc 0.0000', 'Discriminator loss 0.0454', 'Discriminator accuracy 0.9902', 'Total loss: 4.5473', 'for batch', 9)
('GAN loss 3.8591 ', 'GAN acc 0.0000', 'Discriminator loss 0.0912', 'Discriminator accuracy 0.9844', 'Total loss: 3.9503', 'for batch', 10)
('GAN loss 3.3892 ', 'GAN acc 0.0000', 'Discriminator loss 0.0671', 'Discriminator accuracy 0.9824', 'Total loss: 3.4563', 'for batch', 11)
('GAN loss 4.0534 ', 'GAN acc 0.0000', 'Discriminator loss 0.0454', 'Discriminator accuracy 0.9922', 'Total loss: 4.0989', 'for batch', 12)
('GAN loss 3.9302 ', 'GAN acc 0.0000', 'Discriminator loss 0.0262', 'Discriminator accuracy 0.9941', 'Total loss: 3.9564', 'for batch', 13)
('GAN loss 4.1775 ', 'GAN acc 0.0000', 'Discriminator loss 0.0832', 'Discriminator accuracy 0.9863', 'Total loss: 4.2607', 'for batch', 14)
('GAN loss 3.7996 ', 'GAN acc 0.0000', 'Discriminator loss 0.1158', 'Discriminator accuracy 0.9766', 'Total loss: 3.9154', 'for batch', 15)
('GAN loss 3.8541 ', 'GAN acc 0.0000', 'Discriminator loss 0.0590', 'Discriminator accuracy 0.9883', 'Total loss: 3.9132', 'for batch', 16)
('GAN loss 4.2374 ', 'GAN acc 0.0000', 'Discriminator loss 0.0554', 'Discriminator accuracy 0.9844', 'Total loss: 4.2928', 'for batch', 17)
('GAN loss 3.9430 ', 'GAN acc 0.0000', 'Discriminator loss 0.0428', 'Discriminator accuracy 0.9863', 'Total loss: 3.9858', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98371637)
('DISCRIMINATOR_Imagem FAKE=', 0.0189858)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.614636')
----------------------------------
('Epoch', 10, 'of', 50)
('Number of batches', 19)
('GAN loss 3.7992 ', 'GAN acc 0.0000', 'Discriminator loss 0.0557', 'Discriminator accuracy 0.9863', 'Total loss: 3.8549', 'for batch', 0)
('GAN loss 3.5109 ', 'GAN acc 0.0000', 'Discriminator loss 0.0538', 'Discriminator accuracy 0.9844', 'Total loss: 3.5647', 'for batch', 1)
('GAN loss 3.9595 ', 'GAN acc 0.0000', 'Discriminator loss 0.0223', 'Discriminator accuracy 0.9980', 'Total loss: 3.9819', 'for batch', 2)
('GAN loss 3.9990 ', 'GAN acc 0.0000', 'Discriminator loss 0.0436', 'Discriminator accuracy 0.9883', 'Total loss: 4.0427', 'for batch', 3)
('GAN loss 4.1815 ', 'GAN acc 0.0000', 'Discriminator loss 0.0200', 'Discriminator accuracy 0.9941', 'Total loss: 4.2015', 'for batch', 4)
('GAN loss 3.8292 ', 'GAN acc 0.0000', 'Discriminator loss 0.0688', 'Discriminator accuracy 0.9824', 'Total loss: 3.8981', 'for batch', 5)
('GAN loss 4.5210 ', 'GAN acc 0.0000', 'Discriminator loss 0.0537', 'Discriminator accuracy 0.9941', 'Total loss: 4.5747', 'for batch', 6)
('GAN loss 4.6558 ', 'GAN acc 0.0000', 'Discriminator loss 0.0404', 'Discriminator accuracy 0.9922', 'Total loss: 4.6962', 'for batch', 7)
('GAN loss 4.6153 ', 'GAN acc 0.0000', 'Discriminator loss 0.0685', 'Discriminator accuracy 0.9863', 'Total loss: 4.6838', 'for batch', 8)
('GAN loss 4.8502 ', 'GAN acc 0.0000', 'Discriminator loss 0.0400', 'Discriminator accuracy 0.9922', 'Total loss: 4.8903', 'for batch', 9)
('GAN loss 4.3015 ', 'GAN acc 0.0000', 'Discriminator loss 0.0770', 'Discriminator accuracy 0.9844', 'Total loss: 4.3784', 'for batch', 10)
('GAN loss 3.4957 ', 'GAN acc 0.0000', 'Discriminator loss 0.0561', 'Discriminator accuracy 0.9863', 'Total loss: 3.5518', 'for batch', 11)
('GAN loss 8.9536 ', 'GAN acc 0.0000', 'Discriminator loss 0.2696', 'Discriminator accuracy 0.8848', 'Total loss: 9.2231', 'for batch', 12)
('GAN loss 6.7390 ', 'GAN acc 0.0000', 'Discriminator loss 0.0914', 'Discriminator accuracy 0.9727', 'Total loss: 6.8303', 'for batch', 13)
('GAN loss 5.4009 ', 'GAN acc 0.0000', 'Discriminator loss 0.2415', 'Discriminator accuracy 0.9492', 'Total loss: 5.6424', 'for batch', 14)
('GAN loss 3.8132 ', 'GAN acc 0.0000', 'Discriminator loss 0.2191', 'Discriminator accuracy 0.9492', 'Total loss: 4.0323', 'for batch', 15)
('GAN loss 2.9566 ', 'GAN acc 0.0000', 'Discriminator loss 0.0927', 'Discriminator accuracy 0.9727', 'Total loss: 3.0493', 'for batch', 16)
('GAN loss 2.5070 ', 'GAN acc 0.0000', 'Discriminator loss 0.1072', 'Discriminator accuracy 0.9766', 'Total loss: 2.6143', 'for batch', 17)
('GAN loss 2.7600 ', 'GAN acc 0.0000', 'Discriminator loss 0.0813', 'Discriminator accuracy 0.9824', 'Total loss: 2.8413', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97398323)
('DISCRIMINATOR_Imagem FAKE=', 0.061703872)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.061229')
----------------------------------
('Epoch', 11, 'of', 50)
('Number of batches', 19)
('GAN loss 3.2583 ', 'GAN acc 0.0000', 'Discriminator loss 0.0994', 'Discriminator accuracy 0.9785', 'Total loss: 3.3577', 'for batch', 0)
('GAN loss 3.2326 ', 'GAN acc 0.0000', 'Discriminator loss 0.0976', 'Discriminator accuracy 0.9746', 'Total loss: 3.3302', 'for batch', 1)
('GAN loss 3.5138 ', 'GAN acc 0.0000', 'Discriminator loss 0.0297', 'Discriminator accuracy 0.9961', 'Total loss: 3.5435', 'for batch', 2)
('GAN loss 3.6152 ', 'GAN acc 0.0000', 'Discriminator loss 0.0661', 'Discriminator accuracy 0.9805', 'Total loss: 3.6813', 'for batch', 3)
('GAN loss 3.6976 ', 'GAN acc 0.0000', 'Discriminator loss 0.0366', 'Discriminator accuracy 0.9902', 'Total loss: 3.7342', 'for batch', 4)
('GAN loss 3.6557 ', 'GAN acc 0.0000', 'Discriminator loss 0.0721', 'Discriminator accuracy 0.9824', 'Total loss: 3.7278', 'for batch', 5)
('GAN loss 3.7766 ', 'GAN acc 0.0000', 'Discriminator loss 0.0450', 'Discriminator accuracy 0.9941', 'Total loss: 3.8216', 'for batch', 6)
('GAN loss 3.8138 ', 'GAN acc 0.0000', 'Discriminator loss 0.0523', 'Discriminator accuracy 0.9922', 'Total loss: 3.8661', 'for batch', 7)
('GAN loss 3.6281 ', 'GAN acc 0.0000', 'Discriminator loss 0.0657', 'Discriminator accuracy 0.9863', 'Total loss: 3.6938', 'for batch', 8)
('GAN loss 3.8575 ', 'GAN acc 0.0000', 'Discriminator loss 0.0485', 'Discriminator accuracy 0.9941', 'Total loss: 3.9060', 'for batch', 9)
('GAN loss 4.2586 ', 'GAN acc 0.0000', 'Discriminator loss 0.0835', 'Discriminator accuracy 0.9863', 'Total loss: 4.3422', 'for batch', 10)
('GAN loss 4.0488 ', 'GAN acc 0.0000', 'Discriminator loss 0.0654', 'Discriminator accuracy 0.9805', 'Total loss: 4.1142', 'for batch', 11)
('GAN loss 3.9528 ', 'GAN acc 0.0000', 'Discriminator loss 0.0427', 'Discriminator accuracy 0.9922', 'Total loss: 3.9954', 'for batch', 12)
('GAN loss 3.6607 ', 'GAN acc 0.0000', 'Discriminator loss 0.0337', 'Discriminator accuracy 0.9941', 'Total loss: 3.6944', 'for batch', 13)
('GAN loss 3.6351 ', 'GAN acc 0.0000', 'Discriminator loss 0.0874', 'Discriminator accuracy 0.9805', 'Total loss: 3.7225', 'for batch', 14)
('GAN loss 3.6952 ', 'GAN acc 0.0000', 'Discriminator loss 0.1022', 'Discriminator accuracy 0.9824', 'Total loss: 3.7974', 'for batch', 15)
('GAN loss 3.4312 ', 'GAN acc 0.0000', 'Discriminator loss 0.0524', 'Discriminator accuracy 0.9902', 'Total loss: 3.4836', 'for batch', 16)
('GAN loss 3.6304 ', 'GAN acc 0.0000', 'Discriminator loss 0.0465', 'Discriminator accuracy 0.9883', 'Total loss: 3.6770', 'for batch', 17)
('GAN loss 3.6061 ', 'GAN acc 0.0000', 'Discriminator loss 0.0460', 'Discriminator accuracy 0.9902', 'Total loss: 3.6521', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98425472)
('DISCRIMINATOR_Imagem FAKE=', 0.022323867)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.620203')
----------------------------------
('Epoch', 12, 'of', 50)
('Number of batches', 19)
('GAN loss 3.8805 ', 'GAN acc 0.0000', 'Discriminator loss 0.0551', 'Discriminator accuracy 0.9883', 'Total loss: 3.9355', 'for batch', 0)
('GAN loss 3.7149 ', 'GAN acc 0.0000', 'Discriminator loss 0.0514', 'Discriminator accuracy 0.9902', 'Total loss: 3.7663', 'for batch', 1)
('GAN loss 4.2074 ', 'GAN acc 0.0000', 'Discriminator loss 0.0164', 'Discriminator accuracy 0.9961', 'Total loss: 4.2239', 'for batch', 2)
('GAN loss 3.9069 ', 'GAN acc 0.0000', 'Discriminator loss 0.0482', 'Discriminator accuracy 0.9863', 'Total loss: 3.9551', 'for batch', 3)
('GAN loss 3.9776 ', 'GAN acc 0.0000', 'Discriminator loss 0.0248', 'Discriminator accuracy 0.9941', 'Total loss: 4.0024', 'for batch', 4)
('GAN loss 3.6673 ', 'GAN acc 0.0000', 'Discriminator loss 0.0624', 'Discriminator accuracy 0.9863', 'Total loss: 3.7297', 'for batch', 5)
('GAN loss 4.1221 ', 'GAN acc 0.0000', 'Discriminator loss 0.0378', 'Discriminator accuracy 0.9941', 'Total loss: 4.1600', 'for batch', 6)
('GAN loss 4.1911 ', 'GAN acc 0.0000', 'Discriminator loss 0.0334', 'Discriminator accuracy 0.9941', 'Total loss: 4.2245', 'for batch', 7)
('GAN loss 3.8825 ', 'GAN acc 0.0000', 'Discriminator loss 0.0523', 'Discriminator accuracy 0.9883', 'Total loss: 3.9348', 'for batch', 8)
('GAN loss 4.4414 ', 'GAN acc 0.0000', 'Discriminator loss 0.0317', 'Discriminator accuracy 0.9941', 'Total loss: 4.4731', 'for batch', 9)
('GAN loss 3.9494 ', 'GAN acc 0.0000', 'Discriminator loss 0.0688', 'Discriminator accuracy 0.9883', 'Total loss: 4.0182', 'for batch', 10)
('GAN loss 3.8620 ', 'GAN acc 0.0000', 'Discriminator loss 0.0478', 'Discriminator accuracy 0.9902', 'Total loss: 3.9097', 'for batch', 11)
('GAN loss 3.9794 ', 'GAN acc 0.0000', 'Discriminator loss 0.0404', 'Discriminator accuracy 0.9922', 'Total loss: 4.0198', 'for batch', 12)
('GAN loss 4.1587 ', 'GAN acc 0.0000', 'Discriminator loss 0.0254', 'Discriminator accuracy 0.9961', 'Total loss: 4.1840', 'for batch', 13)
('GAN loss 4.0743 ', 'GAN acc 0.0000', 'Discriminator loss 0.0744', 'Discriminator accuracy 0.9844', 'Total loss: 4.1486', 'for batch', 14)
('GAN loss 3.8413 ', 'GAN acc 0.0000', 'Discriminator loss 0.0991', 'Discriminator accuracy 0.9805', 'Total loss: 3.9403', 'for batch', 15)
('GAN loss 3.5644 ', 'GAN acc 0.0000', 'Discriminator loss 0.0456', 'Discriminator accuracy 0.9922', 'Total loss: 3.6101', 'for batch', 16)
('GAN loss 3.8423 ', 'GAN acc 0.0000', 'Discriminator loss 0.0385', 'Discriminator accuracy 0.9922', 'Total loss: 3.8808', 'for batch', 17)
('GAN loss 4.0329 ', 'GAN acc 0.0000', 'Discriminator loss 0.0422', 'Discriminator accuracy 0.9922', 'Total loss: 4.0751', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98562706)
('DISCRIMINATOR_Imagem FAKE=', 0.019533558)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.080437')
----------------------------------
('Epoch', 13, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1009 ', 'GAN acc 0.0000', 'Discriminator loss 0.0454', 'Discriminator accuracy 0.9883', 'Total loss: 4.1463', 'for batch', 0)
('GAN loss 4.0042 ', 'GAN acc 0.0000', 'Discriminator loss 0.0454', 'Discriminator accuracy 0.9902', 'Total loss: 4.0496', 'for batch', 1)
('GAN loss 4.1005 ', 'GAN acc 0.0000', 'Discriminator loss 0.0202', 'Discriminator accuracy 0.9941', 'Total loss: 4.1207', 'for batch', 2)
('GAN loss 3.9616 ', 'GAN acc 0.0000', 'Discriminator loss 0.0397', 'Discriminator accuracy 0.9883', 'Total loss: 4.0013', 'for batch', 3)
('GAN loss 4.0904 ', 'GAN acc 0.0000', 'Discriminator loss 0.0223', 'Discriminator accuracy 0.9961', 'Total loss: 4.1126', 'for batch', 4)
('GAN loss 3.8902 ', 'GAN acc 0.0000', 'Discriminator loss 0.0634', 'Discriminator accuracy 0.9844', 'Total loss: 3.9537', 'for batch', 5)
('GAN loss 4.1635 ', 'GAN acc 0.0000', 'Discriminator loss 0.0351', 'Discriminator accuracy 0.9941', 'Total loss: 4.1986', 'for batch', 6)
('GAN loss 4.4506 ', 'GAN acc 0.0000', 'Discriminator loss 0.0301', 'Discriminator accuracy 0.9941', 'Total loss: 4.4807', 'for batch', 7)
('GAN loss 4.3566 ', 'GAN acc 0.0000', 'Discriminator loss 0.0512', 'Discriminator accuracy 0.9902', 'Total loss: 4.4078', 'for batch', 8)
('GAN loss 4.4624 ', 'GAN acc 0.0000', 'Discriminator loss 0.0363', 'Discriminator accuracy 0.9941', 'Total loss: 4.4987', 'for batch', 9)
('GAN loss 4.4643 ', 'GAN acc 0.0000', 'Discriminator loss 0.0670', 'Discriminator accuracy 0.9883', 'Total loss: 4.5313', 'for batch', 10)
('GAN loss 4.0372 ', 'GAN acc 0.0000', 'Discriminator loss 0.0526', 'Discriminator accuracy 0.9863', 'Total loss: 4.0898', 'for batch', 11)
('GAN loss 4.1654 ', 'GAN acc 0.0000', 'Discriminator loss 0.0375', 'Discriminator accuracy 0.9941', 'Total loss: 4.2029', 'for batch', 12)
('GAN loss 4.3863 ', 'GAN acc 0.0000', 'Discriminator loss 0.0253', 'Discriminator accuracy 0.9941', 'Total loss: 4.4116', 'for batch', 13)
('GAN loss 4.2029 ', 'GAN acc 0.0000', 'Discriminator loss 0.0750', 'Discriminator accuracy 0.9844', 'Total loss: 4.2779', 'for batch', 14)
('GAN loss 3.7059 ', 'GAN acc 0.0000', 'Discriminator loss 0.1103', 'Discriminator accuracy 0.9805', 'Total loss: 3.8163', 'for batch', 15)
('GAN loss 3.8560 ', 'GAN acc 0.0000', 'Discriminator loss 0.0533', 'Discriminator accuracy 0.9922', 'Total loss: 3.9092', 'for batch', 16)
('GAN loss 4.1561 ', 'GAN acc 0.0000', 'Discriminator loss 0.0495', 'Discriminator accuracy 0.9922', 'Total loss: 4.2056', 'for batch', 17)
('GAN loss 4.4269 ', 'GAN acc 0.0000', 'Discriminator loss 0.0511', 'Discriminator accuracy 0.9902', 'Total loss: 4.4780', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98168987)
('DISCRIMINATOR_Imagem FAKE=', 0.021042572)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.637738')
----------------------------------
('Epoch', 14, 'of', 50)
('Number of batches', 19)
('GAN loss 4.3177 ', 'GAN acc 0.0000', 'Discriminator loss 0.0513', 'Discriminator accuracy 0.9883', 'Total loss: 4.3690', 'for batch', 0)
('GAN loss 4.1092 ', 'GAN acc 0.0000', 'Discriminator loss 0.0702', 'Discriminator accuracy 0.9863', 'Total loss: 4.1794', 'for batch', 1)
('GAN loss 4.7925 ', 'GAN acc 0.0000', 'Discriminator loss 0.0391', 'Discriminator accuracy 0.9941', 'Total loss: 4.8317', 'for batch', 2)
('GAN loss 4.0064 ', 'GAN acc 0.0000', 'Discriminator loss 0.0801', 'Discriminator accuracy 0.9844', 'Total loss: 4.0865', 'for batch', 3)
('GAN loss 4.0239 ', 'GAN acc 0.0000', 'Discriminator loss 0.0453', 'Discriminator accuracy 0.9883', 'Total loss: 4.0692', 'for batch', 4)
('GAN loss 4.3044 ', 'GAN acc 0.0000', 'Discriminator loss 0.0847', 'Discriminator accuracy 0.9824', 'Total loss: 4.3891', 'for batch', 5)
('GAN loss 4.4958 ', 'GAN acc 0.0000', 'Discriminator loss 0.0352', 'Discriminator accuracy 0.9941', 'Total loss: 4.5309', 'for batch', 6)
('GAN loss 3.7048 ', 'GAN acc 0.0000', 'Discriminator loss 0.0674', 'Discriminator accuracy 0.9941', 'Total loss: 3.7722', 'for batch', 7)
('GAN loss 4.8502 ', 'GAN acc 0.0000', 'Discriminator loss 0.0536', 'Discriminator accuracy 0.9883', 'Total loss: 4.9038', 'for batch', 8)
('GAN loss 4.7305 ', 'GAN acc 0.0000', 'Discriminator loss 0.0357', 'Discriminator accuracy 0.9922', 'Total loss: 4.7661', 'for batch', 9)
('GAN loss 4.4165 ', 'GAN acc 0.0000', 'Discriminator loss 0.0756', 'Discriminator accuracy 0.9863', 'Total loss: 4.4921', 'for batch', 10)
('GAN loss 3.9629 ', 'GAN acc 0.0000', 'Discriminator loss 0.0490', 'Discriminator accuracy 0.9883', 'Total loss: 4.0119', 'for batch', 11)
('GAN loss 3.8430 ', 'GAN acc 0.0000', 'Discriminator loss 0.0455', 'Discriminator accuracy 0.9922', 'Total loss: 3.8885', 'for batch', 12)
('GAN loss 4.0654 ', 'GAN acc 0.0000', 'Discriminator loss 0.0255', 'Discriminator accuracy 0.9961', 'Total loss: 4.0910', 'for batch', 13)
('GAN loss 3.9336 ', 'GAN acc 0.0000', 'Discriminator loss 0.0794', 'Discriminator accuracy 0.9844', 'Total loss: 4.0130', 'for batch', 14)
('GAN loss 3.6105 ', 'GAN acc 0.0000', 'Discriminator loss 0.0927', 'Discriminator accuracy 0.9844', 'Total loss: 3.7032', 'for batch', 15)
('GAN loss 3.6215 ', 'GAN acc 0.0000', 'Discriminator loss 0.0687', 'Discriminator accuracy 0.9902', 'Total loss: 3.6902', 'for batch', 16)
('GAN loss 4.0230 ', 'GAN acc 0.0000', 'Discriminator loss 0.0454', 'Discriminator accuracy 0.9883', 'Total loss: 4.0683', 'for batch', 17)
('GAN loss 4.2626 ', 'GAN acc 0.0000', 'Discriminator loss 0.0449', 'Discriminator accuracy 0.9922', 'Total loss: 4.3075', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98394388)
('DISCRIMINATOR_Imagem FAKE=', 0.019587284)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.098118')
----------------------------------
('Epoch', 15, 'of', 50)
('Number of batches', 19)
('GAN loss 3.8549 ', 'GAN acc 0.0000', 'Discriminator loss 0.0538', 'Discriminator accuracy 0.9883', 'Total loss: 3.9087', 'for batch', 0)
('GAN loss 4.0489 ', 'GAN acc 0.0000', 'Discriminator loss 0.0496', 'Discriminator accuracy 0.9902', 'Total loss: 4.0986', 'for batch', 1)
('GAN loss 3.6732 ', 'GAN acc 0.0000', 'Discriminator loss 0.0288', 'Discriminator accuracy 0.9980', 'Total loss: 3.7020', 'for batch', 2)
('GAN loss 3.6671 ', 'GAN acc 0.0000', 'Discriminator loss 0.0662', 'Discriminator accuracy 0.9824', 'Total loss: 3.7332', 'for batch', 3)
('GAN loss 4.0924 ', 'GAN acc 0.0000', 'Discriminator loss 0.0262', 'Discriminator accuracy 0.9902', 'Total loss: 4.1186', 'for batch', 4)
('GAN loss 4.3591 ', 'GAN acc 0.0000', 'Discriminator loss 0.0632', 'Discriminator accuracy 0.9844', 'Total loss: 4.4223', 'for batch', 5)
('GAN loss 3.6186 ', 'GAN acc 0.0000', 'Discriminator loss 0.0470', 'Discriminator accuracy 0.9941', 'Total loss: 3.6656', 'for batch', 6)
('GAN loss 4.6587 ', 'GAN acc 0.0000', 'Discriminator loss 0.0225', 'Discriminator accuracy 0.9941', 'Total loss: 4.6812', 'for batch', 7)
('GAN loss 4.3805 ', 'GAN acc 0.0000', 'Discriminator loss 0.0562', 'Discriminator accuracy 0.9902', 'Total loss: 4.4368', 'for batch', 8)
('GAN loss 4.1995 ', 'GAN acc 0.0000', 'Discriminator loss 0.0410', 'Discriminator accuracy 0.9941', 'Total loss: 4.2405', 'for batch', 9)
('GAN loss 3.8005 ', 'GAN acc 0.0000', 'Discriminator loss 0.0821', 'Discriminator accuracy 0.9863', 'Total loss: 3.8827', 'for batch', 10)
('GAN loss 3.6197 ', 'GAN acc 0.0000', 'Discriminator loss 0.0551', 'Discriminator accuracy 0.9863', 'Total loss: 3.6748', 'for batch', 11)
('GAN loss 3.9510 ', 'GAN acc 0.0000', 'Discriminator loss 0.0450', 'Discriminator accuracy 0.9922', 'Total loss: 3.9960', 'for batch', 12)
('GAN loss 3.9667 ', 'GAN acc 0.0000', 'Discriminator loss 0.0299', 'Discriminator accuracy 0.9941', 'Total loss: 3.9966', 'for batch', 13)
('GAN loss 3.7239 ', 'GAN acc 0.0000', 'Discriminator loss 0.0770', 'Discriminator accuracy 0.9844', 'Total loss: 3.8008', 'for batch', 14)
('GAN loss 3.6120 ', 'GAN acc 0.0000', 'Discriminator loss 0.0825', 'Discriminator accuracy 0.9844', 'Total loss: 3.6945', 'for batch', 15)
('GAN loss 3.6346 ', 'GAN acc 0.0000', 'Discriminator loss 0.0484', 'Discriminator accuracy 0.9902', 'Total loss: 3.6831', 'for batch', 16)
('GAN loss 3.9939 ', 'GAN acc 0.0000', 'Discriminator loss 0.0423', 'Discriminator accuracy 0.9922', 'Total loss: 4.0362', 'for batch', 17)
('GAN loss 4.3591 ', 'GAN acc 0.0000', 'Discriminator loss 0.0366', 'Discriminator accuracy 0.9941', 'Total loss: 4.3956', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98699665)
('DISCRIMINATOR_Imagem FAKE=', 0.012677659)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.638843')
----------------------------------
('Epoch', 16, 'of', 50)
('Number of batches', 19)
('GAN loss 4.4895 ', 'GAN acc 0.0000', 'Discriminator loss 0.0456', 'Discriminator accuracy 0.9902', 'Total loss: 4.5351', 'for batch', 0)
('GAN loss 4.2296 ', 'GAN acc 0.0000', 'Discriminator loss 0.0420', 'Discriminator accuracy 0.9883', 'Total loss: 4.2716', 'for batch', 1)
('GAN loss 4.2394 ', 'GAN acc 0.0000', 'Discriminator loss 0.0155', 'Discriminator accuracy 0.9980', 'Total loss: 4.2548', 'for batch', 2)
('GAN loss 4.1509 ', 'GAN acc 0.0000', 'Discriminator loss 0.0497', 'Discriminator accuracy 0.9902', 'Total loss: 4.2005', 'for batch', 3)
('GAN loss 4.4720 ', 'GAN acc 0.0000', 'Discriminator loss 0.0230', 'Discriminator accuracy 0.9941', 'Total loss: 4.4951', 'for batch', 4)
('GAN loss 4.2379 ', 'GAN acc 0.0000', 'Discriminator loss 0.0726', 'Discriminator accuracy 0.9844', 'Total loss: 4.3105', 'for batch', 5)
('GAN loss 4.3453 ', 'GAN acc 0.0000', 'Discriminator loss 0.0295', 'Discriminator accuracy 0.9961', 'Total loss: 4.3747', 'for batch', 6)
('GAN loss 4.8198 ', 'GAN acc 0.0000', 'Discriminator loss 0.0208', 'Discriminator accuracy 0.9980', 'Total loss: 4.8405', 'for batch', 7)
('GAN loss 4.5551 ', 'GAN acc 0.0000', 'Discriminator loss 0.0550', 'Discriminator accuracy 0.9883', 'Total loss: 4.6101', 'for batch', 8)
('GAN loss 4.4035 ', 'GAN acc 0.0000', 'Discriminator loss 0.0414', 'Discriminator accuracy 0.9922', 'Total loss: 4.4450', 'for batch', 9)
('GAN loss 4.4790 ', 'GAN acc 0.0000', 'Discriminator loss 0.0799', 'Discriminator accuracy 0.9883', 'Total loss: 4.5589', 'for batch', 10)
('GAN loss 4.1687 ', 'GAN acc 0.0000', 'Discriminator loss 0.0629', 'Discriminator accuracy 0.9863', 'Total loss: 4.2316', 'for batch', 11)
('GAN loss 4.4928 ', 'GAN acc 0.0000', 'Discriminator loss 0.0507', 'Discriminator accuracy 0.9922', 'Total loss: 4.5435', 'for batch', 12)
('GAN loss 4.6816 ', 'GAN acc 0.0000', 'Discriminator loss 0.0292', 'Discriminator accuracy 0.9922', 'Total loss: 4.7108', 'for batch', 13)
('GAN loss 4.2645 ', 'GAN acc 0.0000', 'Discriminator loss 0.0815', 'Discriminator accuracy 0.9824', 'Total loss: 4.3459', 'for batch', 14)
('GAN loss 5.2218 ', 'GAN acc 0.0000', 'Discriminator loss 0.1056', 'Discriminator accuracy 0.9805', 'Total loss: 5.3274', 'for batch', 15)
('GAN loss 5.1184 ', 'GAN acc 0.0000', 'Discriminator loss 0.0691', 'Discriminator accuracy 0.9883', 'Total loss: 5.1874', 'for batch', 16)
('GAN loss 7.5004 ', 'GAN acc 0.0000', 'Discriminator loss 0.1186', 'Discriminator accuracy 0.9668', 'Total loss: 7.6190', 'for batch', 17)
('GAN loss 5.7025 ', 'GAN acc 0.0000', 'Discriminator loss 0.0783', 'Discriminator accuracy 0.9805', 'Total loss: 5.7808', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96499997)
('DISCRIMINATOR_Imagem FAKE=', 0.0039209691)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.099834')
----------------------------------
('Epoch', 17, 'of', 50)
('Number of batches', 19)
('GAN loss 5.0368 ', 'GAN acc 0.0000', 'Discriminator loss 0.0987', 'Discriminator accuracy 0.9805', 'Total loss: 5.1356', 'for batch', 0)
('GAN loss 4.2166 ', 'GAN acc 0.0000', 'Discriminator loss 0.1120', 'Discriminator accuracy 0.9707', 'Total loss: 4.3285', 'for batch', 1)
('GAN loss 3.7879 ', 'GAN acc 0.0000', 'Discriminator loss 0.0240', 'Discriminator accuracy 0.9941', 'Total loss: 3.8119', 'for batch', 2)
('GAN loss 3.4123 ', 'GAN acc 0.0000', 'Discriminator loss 0.0569', 'Discriminator accuracy 0.9824', 'Total loss: 3.4692', 'for batch', 3)
('GAN loss 3.4944 ', 'GAN acc 0.0000', 'Discriminator loss 0.0352', 'Discriminator accuracy 0.9922', 'Total loss: 3.5296', 'for batch', 4)
('GAN loss 3.5256 ', 'GAN acc 0.0000', 'Discriminator loss 0.0690', 'Discriminator accuracy 0.9844', 'Total loss: 3.5946', 'for batch', 5)
('GAN loss 3.9040 ', 'GAN acc 0.0000', 'Discriminator loss 0.0414', 'Discriminator accuracy 0.9941', 'Total loss: 3.9454', 'for batch', 6)
('GAN loss 4.1820 ', 'GAN acc 0.0000', 'Discriminator loss 0.0293', 'Discriminator accuracy 0.9941', 'Total loss: 4.2113', 'for batch', 7)
('GAN loss 4.2043 ', 'GAN acc 0.0000', 'Discriminator loss 0.0508', 'Discriminator accuracy 0.9883', 'Total loss: 4.2551', 'for batch', 8)
('GAN loss 4.2755 ', 'GAN acc 0.0000', 'Discriminator loss 0.0311', 'Discriminator accuracy 0.9941', 'Total loss: 4.3066', 'for batch', 9)
('GAN loss 4.1958 ', 'GAN acc 0.0000', 'Discriminator loss 0.0638', 'Discriminator accuracy 0.9863', 'Total loss: 4.2596', 'for batch', 10)
('GAN loss 3.9621 ', 'GAN acc 0.0000', 'Discriminator loss 0.0487', 'Discriminator accuracy 0.9902', 'Total loss: 4.0108', 'for batch', 11)
('GAN loss 3.9007 ', 'GAN acc 0.0000', 'Discriminator loss 0.0425', 'Discriminator accuracy 0.9922', 'Total loss: 3.9432', 'for batch', 12)
('GAN loss 3.6707 ', 'GAN acc 0.0000', 'Discriminator loss 0.0324', 'Discriminator accuracy 0.9961', 'Total loss: 3.7031', 'for batch', 13)
('GAN loss 3.9800 ', 'GAN acc 0.0000', 'Discriminator loss 0.0694', 'Discriminator accuracy 0.9844', 'Total loss: 4.0493', 'for batch', 14)
('GAN loss 3.4036 ', 'GAN acc 0.0000', 'Discriminator loss 0.0921', 'Discriminator accuracy 0.9824', 'Total loss: 3.4957', 'for batch', 15)
('GAN loss 3.7813 ', 'GAN acc 0.0000', 'Discriminator loss 0.0446', 'Discriminator accuracy 0.9902', 'Total loss: 3.8259', 'for batch', 16)
('GAN loss 3.5716 ', 'GAN acc 0.0000', 'Discriminator loss 0.0418', 'Discriminator accuracy 0.9922', 'Total loss: 3.6134', 'for batch', 17)
('GAN loss 4.4209 ', 'GAN acc 0.0000', 'Discriminator loss 0.0361', 'Discriminator accuracy 0.9922', 'Total loss: 4.4569', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9872964)
('DISCRIMINATOR_Imagem FAKE=', 0.042702634)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.656996')
----------------------------------
('Epoch', 18, 'of', 50)
('Number of batches', 19)
('GAN loss 3.5860 ', 'GAN acc 0.0000', 'Discriminator loss 0.0507', 'Discriminator accuracy 0.9902', 'Total loss: 3.6366', 'for batch', 0)
('GAN loss 4.0902 ', 'GAN acc 0.0000', 'Discriminator loss 0.0410', 'Discriminator accuracy 0.9941', 'Total loss: 4.1312', 'for batch', 1)
('GAN loss 4.4836 ', 'GAN acc 0.0000', 'Discriminator loss 0.0190', 'Discriminator accuracy 0.9961', 'Total loss: 4.5026', 'for batch', 2)
('GAN loss 4.4954 ', 'GAN acc 0.0000', 'Discriminator loss 0.0347', 'Discriminator accuracy 0.9922', 'Total loss: 4.5302', 'for batch', 3)
('GAN loss 4.4179 ', 'GAN acc 0.0000', 'Discriminator loss 0.0224', 'Discriminator accuracy 0.9961', 'Total loss: 4.4403', 'for batch', 4)
('GAN loss 4.0459 ', 'GAN acc 0.0000', 'Discriminator loss 0.0976', 'Discriminator accuracy 0.9766', 'Total loss: 4.1434', 'for batch', 5)
('GAN loss 4.7287 ', 'GAN acc 0.0000', 'Discriminator loss 0.0474', 'Discriminator accuracy 0.9922', 'Total loss: 4.7761', 'for batch', 6)
('GAN loss 4.8816 ', 'GAN acc 0.0000', 'Discriminator loss 0.0350', 'Discriminator accuracy 0.9902', 'Total loss: 4.9167', 'for batch', 7)
('GAN loss 4.4198 ', 'GAN acc 0.0000', 'Discriminator loss 0.0696', 'Discriminator accuracy 0.9863', 'Total loss: 4.4893', 'for batch', 8)
('GAN loss 4.3817 ', 'GAN acc 0.0000', 'Discriminator loss 0.0416', 'Discriminator accuracy 0.9941', 'Total loss: 4.4233', 'for batch', 9)
('GAN loss 4.0662 ', 'GAN acc 0.0000', 'Discriminator loss 0.0882', 'Discriminator accuracy 0.9863', 'Total loss: 4.1544', 'for batch', 10)
('GAN loss 3.6736 ', 'GAN acc 0.0000', 'Discriminator loss 0.0654', 'Discriminator accuracy 0.9863', 'Total loss: 3.7390', 'for batch', 11)
('GAN loss 3.7960 ', 'GAN acc 0.0000', 'Discriminator loss 0.0445', 'Discriminator accuracy 0.9922', 'Total loss: 3.8405', 'for batch', 12)
('GAN loss 3.9846 ', 'GAN acc 0.0000', 'Discriminator loss 0.0265', 'Discriminator accuracy 0.9961', 'Total loss: 4.0111', 'for batch', 13)
('GAN loss 3.4979 ', 'GAN acc 0.0000', 'Discriminator loss 0.0812', 'Discriminator accuracy 0.9805', 'Total loss: 3.5791', 'for batch', 14)
('GAN loss 3.3825 ', 'GAN acc 0.0000', 'Discriminator loss 0.0862', 'Discriminator accuracy 0.9844', 'Total loss: 3.4688', 'for batch', 15)
('GAN loss 3.9672 ', 'GAN acc 0.0000', 'Discriminator loss 0.0507', 'Discriminator accuracy 0.9902', 'Total loss: 4.0178', 'for batch', 16)
('GAN loss 4.3004 ', 'GAN acc 0.0000', 'Discriminator loss 0.0363', 'Discriminator accuracy 0.9902', 'Total loss: 4.3367', 'for batch', 17)
('GAN loss 4.4143 ', 'GAN acc 0.0000', 'Discriminator loss 0.0407', 'Discriminator accuracy 0.9922', 'Total loss: 4.4550', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98492277)
('DISCRIMINATOR_Imagem FAKE=', 0.012017211)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.065604')
----------------------------------
('Epoch', 19, 'of', 50)
('Number of batches', 19)
('GAN loss 4.3108 ', 'GAN acc 0.0000', 'Discriminator loss 0.0428', 'Discriminator accuracy 0.9883', 'Total loss: 4.3536', 'for batch', 0)
('GAN loss 4.0869 ', 'GAN acc 0.0000', 'Discriminator loss 0.0414', 'Discriminator accuracy 0.9883', 'Total loss: 4.1284', 'for batch', 1)
('GAN loss 4.2572 ', 'GAN acc 0.0000', 'Discriminator loss 0.0140', 'Discriminator accuracy 0.9980', 'Total loss: 4.2712', 'for batch', 2)
('GAN loss 4.2178 ', 'GAN acc 0.0000', 'Discriminator loss 0.0404', 'Discriminator accuracy 0.9902', 'Total loss: 4.2582', 'for batch', 3)
('GAN loss 4.3329 ', 'GAN acc 0.0000', 'Discriminator loss 0.0187', 'Discriminator accuracy 0.9961', 'Total loss: 4.3516', 'for batch', 4)
('GAN loss 3.7463 ', 'GAN acc 0.0000', 'Discriminator loss 0.0763', 'Discriminator accuracy 0.9844', 'Total loss: 3.8226', 'for batch', 5)
('GAN loss 4.3963 ', 'GAN acc 0.0000', 'Discriminator loss 0.0284', 'Discriminator accuracy 0.9961', 'Total loss: 4.4247', 'for batch', 6)
('GAN loss 4.3070 ', 'GAN acc 0.0000', 'Discriminator loss 0.0290', 'Discriminator accuracy 0.9941', 'Total loss: 4.3360', 'for batch', 7)
('GAN loss 3.7418 ', 'GAN acc 0.0000', 'Discriminator loss 0.0616', 'Discriminator accuracy 0.9883', 'Total loss: 3.8034', 'for batch', 8)
('GAN loss 4.4033 ', 'GAN acc 0.0000', 'Discriminator loss 0.0345', 'Discriminator accuracy 0.9941', 'Total loss: 4.4378', 'for batch', 9)
('GAN loss 4.0325 ', 'GAN acc 0.0000', 'Discriminator loss 0.0756', 'Discriminator accuracy 0.9863', 'Total loss: 4.1082', 'for batch', 10)
('GAN loss 3.6454 ', 'GAN acc 0.0000', 'Discriminator loss 0.0594', 'Discriminator accuracy 0.9863', 'Total loss: 3.7048', 'for batch', 11)
('GAN loss 4.0915 ', 'GAN acc 0.0000', 'Discriminator loss 0.0456', 'Discriminator accuracy 0.9922', 'Total loss: 4.1372', 'for batch', 12)
('GAN loss 4.3318 ', 'GAN acc 0.0000', 'Discriminator loss 0.0278', 'Discriminator accuracy 0.9961', 'Total loss: 4.3596', 'for batch', 13)
('GAN loss 4.4190 ', 'GAN acc 0.0000', 'Discriminator loss 0.0796', 'Discriminator accuracy 0.9844', 'Total loss: 4.4986', 'for batch', 14)
('GAN loss 3.6377 ', 'GAN acc 0.0000', 'Discriminator loss 0.0961', 'Discriminator accuracy 0.9824', 'Total loss: 3.7338', 'for batch', 15)
('GAN loss 3.9185 ', 'GAN acc 0.0000', 'Discriminator loss 0.0494', 'Discriminator accuracy 0.9902', 'Total loss: 3.9680', 'for batch', 16)
('GAN loss 3.9675 ', 'GAN acc 0.0000', 'Discriminator loss 0.0422', 'Discriminator accuracy 0.9902', 'Total loss: 4.0098', 'for batch', 17)
('GAN loss 4.2000 ', 'GAN acc 0.0000', 'Discriminator loss 0.0456', 'Discriminator accuracy 0.9922', 'Total loss: 4.2456', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98612905)
('DISCRIMINATOR_Imagem FAKE=', 0.020380003)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.658614')
----------------------------------
('Epoch', 20, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1579 ', 'GAN acc 0.0000', 'Discriminator loss 0.0520', 'Discriminator accuracy 0.9883', 'Total loss: 4.2099', 'for batch', 0)
('GAN loss 4.0334 ', 'GAN acc 0.0000', 'Discriminator loss 0.0566', 'Discriminator accuracy 0.9863', 'Total loss: 4.0901', 'for batch', 1)
('GAN loss 4.4958 ', 'GAN acc 0.0000', 'Discriminator loss 0.0159', 'Discriminator accuracy 0.9961', 'Total loss: 4.5117', 'for batch', 2)
('GAN loss 4.2111 ', 'GAN acc 0.0000', 'Discriminator loss 0.0502', 'Discriminator accuracy 0.9883', 'Total loss: 4.2613', 'for batch', 3)
('GAN loss 4.0137 ', 'GAN acc 0.0000', 'Discriminator loss 0.0255', 'Discriminator accuracy 0.9922', 'Total loss: 4.0393', 'for batch', 4)
('GAN loss 3.7780 ', 'GAN acc 0.0000', 'Discriminator loss 0.0715', 'Discriminator accuracy 0.9844', 'Total loss: 3.8495', 'for batch', 5)
('GAN loss 3.9921 ', 'GAN acc 0.0000', 'Discriminator loss 0.0341', 'Discriminator accuracy 0.9961', 'Total loss: 4.0262', 'for batch', 6)
('GAN loss 4.1303 ', 'GAN acc 0.0000', 'Discriminator loss 0.0278', 'Discriminator accuracy 0.9961', 'Total loss: 4.1581', 'for batch', 7)
('GAN loss 4.0581 ', 'GAN acc 0.0000', 'Discriminator loss 0.0506', 'Discriminator accuracy 0.9883', 'Total loss: 4.1087', 'for batch', 8)
('GAN loss 4.1253 ', 'GAN acc 0.0000', 'Discriminator loss 0.0357', 'Discriminator accuracy 0.9941', 'Total loss: 4.1610', 'for batch', 9)
('GAN loss 3.9475 ', 'GAN acc 0.0000', 'Discriminator loss 0.0706', 'Discriminator accuracy 0.9863', 'Total loss: 4.0180', 'for batch', 10)
('GAN loss 3.5342 ', 'GAN acc 0.0000', 'Discriminator loss 0.0471', 'Discriminator accuracy 0.9883', 'Total loss: 3.5813', 'for batch', 11)
('GAN loss 4.0564 ', 'GAN acc 0.0000', 'Discriminator loss 0.0464', 'Discriminator accuracy 0.9922', 'Total loss: 4.1029', 'for batch', 12)
('GAN loss 4.4442 ', 'GAN acc 0.0000', 'Discriminator loss 0.0241', 'Discriminator accuracy 0.9961', 'Total loss: 4.4683', 'for batch', 13)
('GAN loss 4.0676 ', 'GAN acc 0.0000', 'Discriminator loss 0.0763', 'Discriminator accuracy 0.9863', 'Total loss: 4.1440', 'for batch', 14)
('GAN loss 3.1754 ', 'GAN acc 0.0000', 'Discriminator loss 0.0791', 'Discriminator accuracy 0.9844', 'Total loss: 3.2545', 'for batch', 15)
('GAN loss 8.3351 ', 'GAN acc 0.0000', 'Discriminator loss 0.1420', 'Discriminator accuracy 0.9883', 'Total loss: 8.4771', 'for batch', 16)
('GAN loss 9.5776 ', 'GAN acc 0.0000', 'Discriminator loss 0.1221', 'Discriminator accuracy 0.9766', 'Total loss: 9.6997', 'for batch', 17)
('GAN loss 8.6659 ', 'GAN acc 0.0000', 'Discriminator loss 0.1472', 'Discriminator accuracy 0.9707', 'Total loss: 8.8131', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.95373499)
('DISCRIMINATOR_Imagem FAKE=', 0.00024262244)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.112052')
----------------------------------
('Epoch', 21, 'of', 50)
('Number of batches', 19)
('GAN loss 7.2235 ', 'GAN acc 0.0000', 'Discriminator loss 0.1203', 'Discriminator accuracy 0.9766', 'Total loss: 7.3439', 'for batch', 0)
('GAN loss 4.2467 ', 'GAN acc 0.0000', 'Discriminator loss 0.1482', 'Discriminator accuracy 0.9629', 'Total loss: 4.3948', 'for batch', 1)
('GAN loss 3.8000 ', 'GAN acc 0.0000', 'Discriminator loss 0.0309', 'Discriminator accuracy 0.9922', 'Total loss: 3.8308', 'for batch', 2)
('GAN loss 3.8269 ', 'GAN acc 0.0000', 'Discriminator loss 0.0878', 'Discriminator accuracy 0.9746', 'Total loss: 3.9146', 'for batch', 3)
('GAN loss 3.8296 ', 'GAN acc 0.0000', 'Discriminator loss 0.0398', 'Discriminator accuracy 0.9902', 'Total loss: 3.8694', 'for batch', 4)
('GAN loss 3.5215 ', 'GAN acc 0.0000', 'Discriminator loss 0.0910', 'Discriminator accuracy 0.9805', 'Total loss: 3.6125', 'for batch', 5)
('GAN loss 3.7270 ', 'GAN acc 0.0000', 'Discriminator loss 0.0284', 'Discriminator accuracy 0.9961', 'Total loss: 3.7554', 'for batch', 6)
('GAN loss 3.6574 ', 'GAN acc 0.0000', 'Discriminator loss 0.0299', 'Discriminator accuracy 0.9961', 'Total loss: 3.6873', 'for batch', 7)
('GAN loss 3.7959 ', 'GAN acc 0.0000', 'Discriminator loss 0.0638', 'Discriminator accuracy 0.9863', 'Total loss: 3.8597', 'for batch', 8)
('GAN loss 3.8441 ', 'GAN acc 0.0000', 'Discriminator loss 0.0379', 'Discriminator accuracy 0.9941', 'Total loss: 3.8820', 'for batch', 9)
('GAN loss 3.8381 ', 'GAN acc 0.0000', 'Discriminator loss 0.0696', 'Discriminator accuracy 0.9863', 'Total loss: 3.9077', 'for batch', 10)
('GAN loss 3.7933 ', 'GAN acc 0.0000', 'Discriminator loss 0.0663', 'Discriminator accuracy 0.9844', 'Total loss: 3.8596', 'for batch', 11)
('GAN loss 3.8227 ', 'GAN acc 0.0000', 'Discriminator loss 0.0424', 'Discriminator accuracy 0.9922', 'Total loss: 3.8651', 'for batch', 12)
('GAN loss 3.9853 ', 'GAN acc 0.0000', 'Discriminator loss 0.0271', 'Discriminator accuracy 0.9961', 'Total loss: 4.0124', 'for batch', 13)
('GAN loss 3.8873 ', 'GAN acc 0.0000', 'Discriminator loss 0.0723', 'Discriminator accuracy 0.9824', 'Total loss: 3.9596', 'for batch', 14)
('GAN loss 3.7472 ', 'GAN acc 0.0000', 'Discriminator loss 0.0938', 'Discriminator accuracy 0.9805', 'Total loss: 3.8410', 'for batch', 15)
('GAN loss 3.5689 ', 'GAN acc 0.0000', 'Discriminator loss 0.0505', 'Discriminator accuracy 0.9902', 'Total loss: 3.6194', 'for batch', 16)
('GAN loss 3.5942 ', 'GAN acc 0.0000', 'Discriminator loss 0.0456', 'Discriminator accuracy 0.9902', 'Total loss: 3.6399', 'for batch', 17)
('GAN loss 3.7076 ', 'GAN acc 0.0000', 'Discriminator loss 0.0448', 'Discriminator accuracy 0.9922', 'Total loss: 3.7523', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9844439)
('DISCRIMINATOR_Imagem FAKE=', 0.027021822)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.675994')
----------------------------------
('Epoch', 22, 'of', 50)
('Number of batches', 19)
('GAN loss 3.7626 ', 'GAN acc 0.0000', 'Discriminator loss 0.0350', 'Discriminator accuracy 0.9902', 'Total loss: 3.7976', 'for batch', 0)
('GAN loss 3.8196 ', 'GAN acc 0.0000', 'Discriminator loss 0.0426', 'Discriminator accuracy 0.9922', 'Total loss: 3.8623', 'for batch', 1)
('GAN loss 3.8844 ', 'GAN acc 0.0000', 'Discriminator loss 0.0210', 'Discriminator accuracy 0.9941', 'Total loss: 3.9054', 'for batch', 2)
('GAN loss 3.9172 ', 'GAN acc 0.0000', 'Discriminator loss 0.0420', 'Discriminator accuracy 0.9883', 'Total loss: 3.9593', 'for batch', 3)
('GAN loss 3.9357 ', 'GAN acc 0.0000', 'Discriminator loss 0.0232', 'Discriminator accuracy 0.9941', 'Total loss: 3.9588', 'for batch', 4)
('GAN loss 3.8697 ', 'GAN acc 0.0000', 'Discriminator loss 0.0687', 'Discriminator accuracy 0.9824', 'Total loss: 3.9384', 'for batch', 5)
('GAN loss 3.9490 ', 'GAN acc 0.0000', 'Discriminator loss 0.0300', 'Discriminator accuracy 0.9961', 'Total loss: 3.9790', 'for batch', 6)
('GAN loss 4.2451 ', 'GAN acc 0.0000', 'Discriminator loss 0.0227', 'Discriminator accuracy 0.9980', 'Total loss: 4.2677', 'for batch', 7)
('GAN loss 4.6173 ', 'GAN acc 0.0000', 'Discriminator loss 0.0572', 'Discriminator accuracy 0.9863', 'Total loss: 4.6744', 'for batch', 8)
('GAN loss 5.3430 ', 'GAN acc 0.0000', 'Discriminator loss 0.0473', 'Discriminator accuracy 0.9883', 'Total loss: 5.3902', 'for batch', 9)
('GAN loss 5.2703 ', 'GAN acc 0.0000', 'Discriminator loss 0.0820', 'Discriminator accuracy 0.9844', 'Total loss: 5.3522', 'for batch', 10)
('GAN loss 4.7996 ', 'GAN acc 0.0000', 'Discriminator loss 0.0648', 'Discriminator accuracy 0.9824', 'Total loss: 4.8644', 'for batch', 11)
('GAN loss 4.4811 ', 'GAN acc 0.0000', 'Discriminator loss 0.0400', 'Discriminator accuracy 0.9922', 'Total loss: 4.5211', 'for batch', 12)
('GAN loss 4.3985 ', 'GAN acc 0.0000', 'Discriminator loss 0.0242', 'Discriminator accuracy 0.9941', 'Total loss: 4.4228', 'for batch', 13)
('GAN loss 4.1442 ', 'GAN acc 0.0000', 'Discriminator loss 0.0742', 'Discriminator accuracy 0.9824', 'Total loss: 4.2184', 'for batch', 14)
('GAN loss 3.8060 ', 'GAN acc 0.0000', 'Discriminator loss 0.0946', 'Discriminator accuracy 0.9805', 'Total loss: 3.9007', 'for batch', 15)
('GAN loss 3.6450 ', 'GAN acc 0.0000', 'Discriminator loss 0.0469', 'Discriminator accuracy 0.9902', 'Total loss: 3.6919', 'for batch', 16)
('GAN loss 3.6394 ', 'GAN acc 0.0000', 'Discriminator loss 0.0401', 'Discriminator accuracy 0.9922', 'Total loss: 3.6795', 'for batch', 17)
('GAN loss 3.6912 ', 'GAN acc 0.0000', 'Discriminator loss 0.0437', 'Discriminator accuracy 0.9922', 'Total loss: 3.7349', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98678261)
('DISCRIMINATOR_Imagem FAKE=', 0.026156478)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.145131')
----------------------------------
('Epoch', 23, 'of', 50)
('Number of batches', 19)
('GAN loss 3.7490 ', 'GAN acc 0.0000', 'Discriminator loss 0.0348', 'Discriminator accuracy 0.9902', 'Total loss: 3.7838', 'for batch', 0)
('GAN loss 3.8561 ', 'GAN acc 0.0000', 'Discriminator loss 0.0380', 'Discriminator accuracy 0.9941', 'Total loss: 3.8940', 'for batch', 1)
('GAN loss 4.0156 ', 'GAN acc 0.0000', 'Discriminator loss 0.0142', 'Discriminator accuracy 0.9980', 'Total loss: 4.0299', 'for batch', 2)
('GAN loss 4.0693 ', 'GAN acc 0.0000', 'Discriminator loss 0.0368', 'Discriminator accuracy 0.9922', 'Total loss: 4.1061', 'for batch', 3)
('GAN loss 4.1654 ', 'GAN acc 0.0000', 'Discriminator loss 0.0187', 'Discriminator accuracy 0.9961', 'Total loss: 4.1840', 'for batch', 4)
('GAN loss 4.0737 ', 'GAN acc 0.0000', 'Discriminator loss 0.0651', 'Discriminator accuracy 0.9844', 'Total loss: 4.1388', 'for batch', 5)
('GAN loss 4.1105 ', 'GAN acc 0.0000', 'Discriminator loss 0.0271', 'Discriminator accuracy 0.9961', 'Total loss: 4.1376', 'for batch', 6)
('GAN loss 4.2401 ', 'GAN acc 0.0000', 'Discriminator loss 0.0180', 'Discriminator accuracy 0.9980', 'Total loss: 4.2581', 'for batch', 7)
('GAN loss 4.2512 ', 'GAN acc 0.0000', 'Discriminator loss 0.0475', 'Discriminator accuracy 0.9902', 'Total loss: 4.2987', 'for batch', 8)
('GAN loss 4.2954 ', 'GAN acc 0.0000', 'Discriminator loss 0.0273', 'Discriminator accuracy 0.9941', 'Total loss: 4.3227', 'for batch', 9)
('GAN loss 4.2139 ', 'GAN acc 0.0000', 'Discriminator loss 0.0574', 'Discriminator accuracy 0.9883', 'Total loss: 4.2713', 'for batch', 10)
('GAN loss 4.3106 ', 'GAN acc 0.0000', 'Discriminator loss 0.0558', 'Discriminator accuracy 0.9902', 'Total loss: 4.3664', 'for batch', 11)
('GAN loss 4.6625 ', 'GAN acc 0.0039', 'Discriminator loss 0.0484', 'Discriminator accuracy 0.9883', 'Total loss: 4.7109', 'for batch', 12)
('GAN loss 4.9709 ', 'GAN acc 0.0000', 'Discriminator loss 0.0198', 'Discriminator accuracy 0.9980', 'Total loss: 4.9907', 'for batch', 13)
('GAN loss 4.8140 ', 'GAN acc 0.0000', 'Discriminator loss 0.0733', 'Discriminator accuracy 0.9824', 'Total loss: 4.8874', 'for batch', 14)
('GAN loss 4.3668 ', 'GAN acc 0.0000', 'Discriminator loss 0.0966', 'Discriminator accuracy 0.9805', 'Total loss: 4.4634', 'for batch', 15)
('GAN loss 4.1017 ', 'GAN acc 0.0000', 'Discriminator loss 0.0472', 'Discriminator accuracy 0.9902', 'Total loss: 4.1489', 'for batch', 16)
('GAN loss 3.9273 ', 'GAN acc 0.0078', 'Discriminator loss 0.0412', 'Discriminator accuracy 0.9902', 'Total loss: 3.9685', 'for batch', 17)
('GAN loss 4.0060 ', 'GAN acc 0.0000', 'Discriminator loss 0.0434', 'Discriminator accuracy 0.9922', 'Total loss: 4.0494', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98667598)
('DISCRIMINATOR_Imagem FAKE=', 0.02121648)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.676975')
----------------------------------
('Epoch', 24, 'of', 50)
('Number of batches', 19)
('GAN loss 3.8931 ', 'GAN acc 0.0000', 'Discriminator loss 0.0456', 'Discriminator accuracy 0.9902', 'Total loss: 3.9386', 'for batch', 0)
('GAN loss 3.8795 ', 'GAN acc 0.0000', 'Discriminator loss 0.0399', 'Discriminator accuracy 0.9922', 'Total loss: 3.9194', 'for batch', 1)
('GAN loss 4.0109 ', 'GAN acc 0.0000', 'Discriminator loss 0.0146', 'Discriminator accuracy 0.9980', 'Total loss: 4.0255', 'for batch', 2)
('GAN loss 4.0232 ', 'GAN acc 0.0000', 'Discriminator loss 0.0398', 'Discriminator accuracy 0.9902', 'Total loss: 4.0630', 'for batch', 3)
('GAN loss 4.4457 ', 'GAN acc 0.0000', 'Discriminator loss 0.0222', 'Discriminator accuracy 0.9961', 'Total loss: 4.4680', 'for batch', 4)
('GAN loss 4.1343 ', 'GAN acc 0.0000', 'Discriminator loss 0.0637', 'Discriminator accuracy 0.9824', 'Total loss: 4.1980', 'for batch', 5)
('GAN loss 4.1410 ', 'GAN acc 0.0000', 'Discriminator loss 0.0260', 'Discriminator accuracy 0.9941', 'Total loss: 4.1670', 'for batch', 6)
('GAN loss 4.2694 ', 'GAN acc 0.0000', 'Discriminator loss 0.0166', 'Discriminator accuracy 0.9980', 'Total loss: 4.2860', 'for batch', 7)
('GAN loss 4.2170 ', 'GAN acc 0.0000', 'Discriminator loss 0.0449', 'Discriminator accuracy 0.9902', 'Total loss: 4.2619', 'for batch', 8)
('GAN loss 4.2715 ', 'GAN acc 0.0000', 'Discriminator loss 0.0269', 'Discriminator accuracy 0.9941', 'Total loss: 4.2984', 'for batch', 9)
('GAN loss 4.1254 ', 'GAN acc 0.0000', 'Discriminator loss 0.0611', 'Discriminator accuracy 0.9863', 'Total loss: 4.1865', 'for batch', 10)
('GAN loss 4.0232 ', 'GAN acc 0.0000', 'Discriminator loss 0.0466', 'Discriminator accuracy 0.9902', 'Total loss: 4.0698', 'for batch', 11)
('GAN loss 3.9735 ', 'GAN acc 0.0000', 'Discriminator loss 0.0375', 'Discriminator accuracy 0.9922', 'Total loss: 4.0109', 'for batch', 12)
('GAN loss 4.1122 ', 'GAN acc 0.0000', 'Discriminator loss 0.0212', 'Discriminator accuracy 0.9961', 'Total loss: 4.1333', 'for batch', 13)
('GAN loss 4.1032 ', 'GAN acc 0.0000', 'Discriminator loss 0.0624', 'Discriminator accuracy 0.9883', 'Total loss: 4.1656', 'for batch', 14)
('GAN loss 3.8958 ', 'GAN acc 0.0000', 'Discriminator loss 0.0871', 'Discriminator accuracy 0.9844', 'Total loss: 3.9829', 'for batch', 15)
('GAN loss 3.9115 ', 'GAN acc 0.0000', 'Discriminator loss 0.0440', 'Discriminator accuracy 0.9902', 'Total loss: 3.9555', 'for batch', 16)
('GAN loss 3.9284 ', 'GAN acc 0.0000', 'Discriminator loss 0.0345', 'Discriminator accuracy 0.9922', 'Total loss: 3.9629', 'for batch', 17)
('GAN loss 4.1038 ', 'GAN acc 0.0000', 'Discriminator loss 0.0366', 'Discriminator accuracy 0.9922', 'Total loss: 4.1404', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98853189)
('DISCRIMINATOR_Imagem FAKE=', 0.018007034)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.152786')
----------------------------------
('Epoch', 25, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1184 ', 'GAN acc 0.0000', 'Discriminator loss 0.0358', 'Discriminator accuracy 0.9902', 'Total loss: 4.1542', 'for batch', 0)
('GAN loss 4.0684 ', 'GAN acc 0.0000', 'Discriminator loss 0.0432', 'Discriminator accuracy 0.9922', 'Total loss: 4.1117', 'for batch', 1)
('GAN loss 4.2857 ', 'GAN acc 0.0000', 'Discriminator loss 0.0136', 'Discriminator accuracy 0.9980', 'Total loss: 4.2993', 'for batch', 2)
('GAN loss 4.3035 ', 'GAN acc 0.0000', 'Discriminator loss 0.0369', 'Discriminator accuracy 0.9922', 'Total loss: 4.3404', 'for batch', 3)
('GAN loss 4.4982 ', 'GAN acc 0.0000', 'Discriminator loss 0.0196', 'Discriminator accuracy 0.9961', 'Total loss: 4.5178', 'for batch', 4)
('GAN loss 4.3107 ', 'GAN acc 0.0000', 'Discriminator loss 0.0682', 'Discriminator accuracy 0.9863', 'Total loss: 4.3789', 'for batch', 5)
('GAN loss 4.4579 ', 'GAN acc 0.0000', 'Discriminator loss 0.0380', 'Discriminator accuracy 0.9941', 'Total loss: 4.4959', 'for batch', 6)
('GAN loss 4.7000 ', 'GAN acc 0.0000', 'Discriminator loss 0.0258', 'Discriminator accuracy 0.9980', 'Total loss: 4.7258', 'for batch', 7)
('GAN loss 4.6065 ', 'GAN acc 0.0000', 'Discriminator loss 0.0557', 'Discriminator accuracy 0.9863', 'Total loss: 4.6621', 'for batch', 8)
('GAN loss 4.4535 ', 'GAN acc 0.0000', 'Discriminator loss 0.0357', 'Discriminator accuracy 0.9941', 'Total loss: 4.4892', 'for batch', 9)
('GAN loss 4.1531 ', 'GAN acc 0.0000', 'Discriminator loss 0.0728', 'Discriminator accuracy 0.9863', 'Total loss: 4.2259', 'for batch', 10)
('GAN loss 3.9366 ', 'GAN acc 0.0000', 'Discriminator loss 0.0535', 'Discriminator accuracy 0.9902', 'Total loss: 3.9901', 'for batch', 11)
('GAN loss 3.8689 ', 'GAN acc 0.0000', 'Discriminator loss 0.0443', 'Discriminator accuracy 0.9922', 'Total loss: 3.9132', 'for batch', 12)
('GAN loss 3.8660 ', 'GAN acc 0.0000', 'Discriminator loss 0.0257', 'Discriminator accuracy 0.9961', 'Total loss: 3.8917', 'for batch', 13)
('GAN loss 3.7909 ', 'GAN acc 0.0000', 'Discriminator loss 0.0736', 'Discriminator accuracy 0.9863', 'Total loss: 3.8645', 'for batch', 14)
('GAN loss 3.6814 ', 'GAN acc 0.0000', 'Discriminator loss 0.0870', 'Discriminator accuracy 0.9824', 'Total loss: 3.7685', 'for batch', 15)
('GAN loss 3.6178 ', 'GAN acc 0.0000', 'Discriminator loss 0.0480', 'Discriminator accuracy 0.9902', 'Total loss: 3.6658', 'for batch', 16)
('GAN loss 3.7048 ', 'GAN acc 0.0000', 'Discriminator loss 0.0324', 'Discriminator accuracy 0.9922', 'Total loss: 3.7372', 'for batch', 17)
('GAN loss 3.7869 ', 'GAN acc 0.0000', 'Discriminator loss 0.0355', 'Discriminator accuracy 0.9922', 'Total loss: 3.8224', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99062425)
('DISCRIMINATOR_Imagem FAKE=', 0.02476038)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.694707')
----------------------------------
('Epoch', 26, 'of', 50)
('Number of batches', 19)
('GAN loss 3.9019 ', 'GAN acc 0.0000', 'Discriminator loss 0.0415', 'Discriminator accuracy 0.9922', 'Total loss: 3.9433', 'for batch', 0)
('GAN loss 3.9852 ', 'GAN acc 0.0000', 'Discriminator loss 0.0373', 'Discriminator accuracy 0.9941', 'Total loss: 4.0224', 'for batch', 1)
('GAN loss 4.2490 ', 'GAN acc 0.0000', 'Discriminator loss 0.0101', 'Discriminator accuracy 1.0000', 'Total loss: 4.2591', 'for batch', 2)
('GAN loss 4.2405 ', 'GAN acc 0.0000', 'Discriminator loss 0.0391', 'Discriminator accuracy 0.9902', 'Total loss: 4.2796', 'for batch', 3)
('GAN loss 4.3369 ', 'GAN acc 0.0000', 'Discriminator loss 0.0154', 'Discriminator accuracy 0.9980', 'Total loss: 4.3522', 'for batch', 4)
('GAN loss 4.1276 ', 'GAN acc 0.0000', 'Discriminator loss 0.0608', 'Discriminator accuracy 0.9863', 'Total loss: 4.1884', 'for batch', 5)
('GAN loss 4.1715 ', 'GAN acc 0.0000', 'Discriminator loss 0.0307', 'Discriminator accuracy 0.9961', 'Total loss: 4.2022', 'for batch', 6)
('GAN loss 4.4178 ', 'GAN acc 0.0000', 'Discriminator loss 0.0182', 'Discriminator accuracy 0.9980', 'Total loss: 4.4360', 'for batch', 7)
('GAN loss 4.4611 ', 'GAN acc 0.0000', 'Discriminator loss 0.0408', 'Discriminator accuracy 0.9922', 'Total loss: 4.5019', 'for batch', 8)
('GAN loss 4.5053 ', 'GAN acc 0.0000', 'Discriminator loss 0.0318', 'Discriminator accuracy 0.9941', 'Total loss: 4.5370', 'for batch', 9)
('GAN loss 4.2907 ', 'GAN acc 0.0000', 'Discriminator loss 0.0713', 'Discriminator accuracy 0.9863', 'Total loss: 4.3621', 'for batch', 10)
('GAN loss 3.8299 ', 'GAN acc 0.0000', 'Discriminator loss 0.0504', 'Discriminator accuracy 0.9883', 'Total loss: 3.8803', 'for batch', 11)
('GAN loss 4.4752 ', 'GAN acc 0.0000', 'Discriminator loss 0.0502', 'Discriminator accuracy 0.9922', 'Total loss: 4.5254', 'for batch', 12)
('GAN loss 4.9233 ', 'GAN acc 0.0000', 'Discriminator loss 0.0199', 'Discriminator accuracy 0.9980', 'Total loss: 4.9433', 'for batch', 13)
('GAN loss 4.7775 ', 'GAN acc 0.0000', 'Discriminator loss 0.0737', 'Discriminator accuracy 0.9863', 'Total loss: 4.8512', 'for batch', 14)
('GAN loss 4.7079 ', 'GAN acc 0.0000', 'Discriminator loss 0.0987', 'Discriminator accuracy 0.9844', 'Total loss: 4.8066', 'for batch', 15)
('GAN loss 5.1823 ', 'GAN acc 0.0000', 'Discriminator loss 0.0532', 'Discriminator accuracy 0.9902', 'Total loss: 5.2355', 'for batch', 16)
('GAN loss 4.7531 ', 'GAN acc 0.0000', 'Discriminator loss 0.0400', 'Discriminator accuracy 0.9902', 'Total loss: 4.7930', 'for batch', 17)
('GAN loss 4.5352 ', 'GAN acc 0.0000', 'Discriminator loss 0.0386', 'Discriminator accuracy 0.9922', 'Total loss: 4.5737', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98455715)
('DISCRIMINATOR_Imagem FAKE=', 0.012188314)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.153400')
----------------------------------
('Epoch', 27, 'of', 50)
('Number of batches', 19)
('GAN loss 4.3045 ', 'GAN acc 0.0000', 'Discriminator loss 0.0507', 'Discriminator accuracy 0.9902', 'Total loss: 4.3552', 'for batch', 0)
('GAN loss 4.0996 ', 'GAN acc 0.0000', 'Discriminator loss 0.0423', 'Discriminator accuracy 0.9883', 'Total loss: 4.1419', 'for batch', 1)
('GAN loss 4.1082 ', 'GAN acc 0.0000', 'Discriminator loss 0.0125', 'Discriminator accuracy 0.9980', 'Total loss: 4.1206', 'for batch', 2)
('GAN loss 4.1143 ', 'GAN acc 0.0000', 'Discriminator loss 0.0423', 'Discriminator accuracy 0.9922', 'Total loss: 4.1566', 'for batch', 3)
('GAN loss 4.1855 ', 'GAN acc 0.0000', 'Discriminator loss 0.0183', 'Discriminator accuracy 0.9961', 'Total loss: 4.2039', 'for batch', 4)
('GAN loss 4.0539 ', 'GAN acc 0.0000', 'Discriminator loss 0.0610', 'Discriminator accuracy 0.9863', 'Total loss: 4.1149', 'for batch', 5)
('GAN loss 4.1458 ', 'GAN acc 0.0000', 'Discriminator loss 0.0231', 'Discriminator accuracy 0.9961', 'Total loss: 4.1690', 'for batch', 6)
('GAN loss 4.3347 ', 'GAN acc 0.0000', 'Discriminator loss 0.0169', 'Discriminator accuracy 0.9980', 'Total loss: 4.3516', 'for batch', 7)
('GAN loss 4.3562 ', 'GAN acc 0.0000', 'Discriminator loss 0.0432', 'Discriminator accuracy 0.9922', 'Total loss: 4.3994', 'for batch', 8)
('GAN loss 4.4083 ', 'GAN acc 0.0000', 'Discriminator loss 0.0298', 'Discriminator accuracy 0.9941', 'Total loss: 4.4381', 'for batch', 9)
('GAN loss 4.2345 ', 'GAN acc 0.0000', 'Discriminator loss 0.0606', 'Discriminator accuracy 0.9863', 'Total loss: 4.2951', 'for batch', 10)
('GAN loss 3.9354 ', 'GAN acc 0.0000', 'Discriminator loss 0.0516', 'Discriminator accuracy 0.9883', 'Total loss: 3.9869', 'for batch', 11)
('GAN loss 6.7306 ', 'GAN acc 0.0000', 'Discriminator loss 0.0565', 'Discriminator accuracy 0.9922', 'Total loss: 6.7870', 'for batch', 12)
('GAN loss 5.5675 ', 'GAN acc 0.0000', 'Discriminator loss 0.0190', 'Discriminator accuracy 0.9961', 'Total loss: 5.5865', 'for batch', 13)
('GAN loss 4.6364 ', 'GAN acc 0.0000', 'Discriminator loss 0.0779', 'Discriminator accuracy 0.9844', 'Total loss: 4.7143', 'for batch', 14)
('GAN loss 4.2810 ', 'GAN acc 0.0000', 'Discriminator loss 0.0899', 'Discriminator accuracy 0.9824', 'Total loss: 4.3709', 'for batch', 15)
('GAN loss 4.0483 ', 'GAN acc 0.0000', 'Discriminator loss 0.0480', 'Discriminator accuracy 0.9902', 'Total loss: 4.0963', 'for batch', 16)
('GAN loss 3.9169 ', 'GAN acc 0.0000', 'Discriminator loss 0.0374', 'Discriminator accuracy 0.9922', 'Total loss: 3.9544', 'for batch', 17)
('GAN loss 3.8907 ', 'GAN acc 0.0000', 'Discriminator loss 0.0386', 'Discriminator accuracy 0.9922', 'Total loss: 3.9292', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98746467)
('DISCRIMINATOR_Imagem FAKE=', 0.021083161)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.670782')
----------------------------------
('Epoch', 28, 'of', 50)
('Number of batches', 19)
('GAN loss 3.9021 ', 'GAN acc 0.0000', 'Discriminator loss 0.0408', 'Discriminator accuracy 0.9902', 'Total loss: 3.9429', 'for batch', 0)
('GAN loss 3.9406 ', 'GAN acc 0.0000', 'Discriminator loss 0.0357', 'Discriminator accuracy 0.9941', 'Total loss: 3.9764', 'for batch', 1)
('GAN loss 4.1654 ', 'GAN acc 0.0000', 'Discriminator loss 0.0107', 'Discriminator accuracy 1.0000', 'Total loss: 4.1761', 'for batch', 2)
('GAN loss 4.2855 ', 'GAN acc 0.0000', 'Discriminator loss 0.0335', 'Discriminator accuracy 0.9941', 'Total loss: 4.3190', 'for batch', 3)
('GAN loss 4.3929 ', 'GAN acc 0.0000', 'Discriminator loss 0.0178', 'Discriminator accuracy 0.9961', 'Total loss: 4.4107', 'for batch', 4)
('GAN loss 4.2965 ', 'GAN acc 0.0000', 'Discriminator loss 0.0596', 'Discriminator accuracy 0.9863', 'Total loss: 4.3561', 'for batch', 5)
('GAN loss 4.3452 ', 'GAN acc 0.0000', 'Discriminator loss 0.0224', 'Discriminator accuracy 0.9961', 'Total loss: 4.3677', 'for batch', 6)
('GAN loss 4.4985 ', 'GAN acc 0.0000', 'Discriminator loss 0.0158', 'Discriminator accuracy 0.9980', 'Total loss: 4.5143', 'for batch', 7)
('GAN loss 4.5092 ', 'GAN acc 0.0000', 'Discriminator loss 0.0415', 'Discriminator accuracy 0.9922', 'Total loss: 4.5507', 'for batch', 8)
('GAN loss 4.5253 ', 'GAN acc 0.0000', 'Discriminator loss 0.0264', 'Discriminator accuracy 0.9941', 'Total loss: 4.5517', 'for batch', 9)
('GAN loss 4.3981 ', 'GAN acc 0.0000', 'Discriminator loss 0.0528', 'Discriminator accuracy 0.9883', 'Total loss: 4.4509', 'for batch', 10)
('GAN loss 4.1773 ', 'GAN acc 0.0000', 'Discriminator loss 0.0443', 'Discriminator accuracy 0.9902', 'Total loss: 4.2216', 'for batch', 11)
('GAN loss 4.1875 ', 'GAN acc 0.0000', 'Discriminator loss 0.0358', 'Discriminator accuracy 0.9922', 'Total loss: 4.2233', 'for batch', 12)
('GAN loss 4.4822 ', 'GAN acc 0.0000', 'Discriminator loss 0.0206', 'Discriminator accuracy 0.9980', 'Total loss: 4.5027', 'for batch', 13)
('GAN loss 4.5621 ', 'GAN acc 0.0000', 'Discriminator loss 0.0664', 'Discriminator accuracy 0.9863', 'Total loss: 4.6285', 'for batch', 14)
('GAN loss 5.8256 ', 'GAN acc 0.0000', 'Discriminator loss 0.1156', 'Discriminator accuracy 0.9707', 'Total loss: 5.9412', 'for batch', 15)
('GAN loss 5.3306 ', 'GAN acc 0.0000', 'Discriminator loss 0.0535', 'Discriminator accuracy 0.9902', 'Total loss: 5.3840', 'for batch', 16)
('GAN loss 4.8776 ', 'GAN acc 0.0000', 'Discriminator loss 0.0515', 'Discriminator accuracy 0.9902', 'Total loss: 4.9292', 'for batch', 17)
('GAN loss 4.5256 ', 'GAN acc 0.0000', 'Discriminator loss 0.0455', 'Discriminator accuracy 0.9883', 'Total loss: 4.5711', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9809562)
('DISCRIMINATOR_Imagem FAKE=', 0.014817771)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.118476')
----------------------------------
('Epoch', 29, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2496 ', 'GAN acc 0.0000', 'Discriminator loss 0.0493', 'Discriminator accuracy 0.9863', 'Total loss: 4.2990', 'for batch', 0)
('GAN loss 4.0277 ', 'GAN acc 0.0000', 'Discriminator loss 0.0443', 'Discriminator accuracy 0.9863', 'Total loss: 4.0720', 'for batch', 1)
('GAN loss 4.0495 ', 'GAN acc 0.0000', 'Discriminator loss 0.0104', 'Discriminator accuracy 1.0000', 'Total loss: 4.0599', 'for batch', 2)
('GAN loss 3.9556 ', 'GAN acc 0.0000', 'Discriminator loss 0.0478', 'Discriminator accuracy 0.9863', 'Total loss: 4.0034', 'for batch', 3)
('GAN loss 3.9676 ', 'GAN acc 0.0000', 'Discriminator loss 0.0211', 'Discriminator accuracy 0.9961', 'Total loss: 3.9887', 'for batch', 4)
('GAN loss 3.8927 ', 'GAN acc 0.0000', 'Discriminator loss 0.0618', 'Discriminator accuracy 0.9863', 'Total loss: 3.9545', 'for batch', 5)
('GAN loss 3.9746 ', 'GAN acc 0.0000', 'Discriminator loss 0.0257', 'Discriminator accuracy 0.9961', 'Total loss: 4.0003', 'for batch', 6)
('GAN loss 4.1419 ', 'GAN acc 0.0000', 'Discriminator loss 0.0175', 'Discriminator accuracy 0.9980', 'Total loss: 4.1595', 'for batch', 7)
('GAN loss 4.1612 ', 'GAN acc 0.0000', 'Discriminator loss 0.0403', 'Discriminator accuracy 0.9902', 'Total loss: 4.2015', 'for batch', 8)
('GAN loss 4.2229 ', 'GAN acc 0.0000', 'Discriminator loss 0.0294', 'Discriminator accuracy 0.9941', 'Total loss: 4.2522', 'for batch', 9)
('GAN loss 4.1210 ', 'GAN acc 0.0000', 'Discriminator loss 0.0586', 'Discriminator accuracy 0.9863', 'Total loss: 4.1797', 'for batch', 10)
('GAN loss 3.9123 ', 'GAN acc 0.0000', 'Discriminator loss 0.0438', 'Discriminator accuracy 0.9883', 'Total loss: 3.9560', 'for batch', 11)
('GAN loss 3.7836 ', 'GAN acc 0.0000', 'Discriminator loss 0.0424', 'Discriminator accuracy 0.9922', 'Total loss: 3.8260', 'for batch', 12)
('GAN loss 3.8818 ', 'GAN acc 0.0000', 'Discriminator loss 0.0185', 'Discriminator accuracy 0.9980', 'Total loss: 3.9003', 'for batch', 13)
('GAN loss 3.5177 ', 'GAN acc 0.0000', 'Discriminator loss 0.0627', 'Discriminator accuracy 0.9863', 'Total loss: 3.5804', 'for batch', 14)
('GAN loss 5.5802 ', 'GAN acc 0.0000', 'Discriminator loss 0.1017', 'Discriminator accuracy 0.9844', 'Total loss: 5.6818', 'for batch', 15)
('GAN loss 6.1739 ', 'GAN acc 0.0000', 'Discriminator loss 0.0549', 'Discriminator accuracy 0.9902', 'Total loss: 6.2288', 'for batch', 16)
('GAN loss 6.1172 ', 'GAN acc 0.0000', 'Discriminator loss 0.0546', 'Discriminator accuracy 0.9883', 'Total loss: 6.1719', 'for batch', 17)
('GAN loss 5.7991 ', 'GAN acc 0.0000', 'Discriminator loss 0.0512', 'Discriminator accuracy 0.9902', 'Total loss: 5.8503', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98049521)
('DISCRIMINATOR_Imagem FAKE=', 0.0031856976)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.677493')
----------------------------------
('Epoch', 30, 'of', 50)
('Number of batches', 19)
('GAN loss 5.3842 ', 'GAN acc 0.0000', 'Discriminator loss 0.0416', 'Discriminator accuracy 0.9883', 'Total loss: 5.4258', 'for batch', 0)
('GAN loss 4.9826 ', 'GAN acc 0.0000', 'Discriminator loss 0.0474', 'Discriminator accuracy 0.9883', 'Total loss: 5.0299', 'for batch', 1)
('GAN loss 4.8190 ', 'GAN acc 0.0000', 'Discriminator loss 0.0077', 'Discriminator accuracy 0.9980', 'Total loss: 4.8267', 'for batch', 2)
('GAN loss 4.5486 ', 'GAN acc 0.0000', 'Discriminator loss 0.0490', 'Discriminator accuracy 0.9883', 'Total loss: 4.5975', 'for batch', 3)
('GAN loss 4.4694 ', 'GAN acc 0.0000', 'Discriminator loss 0.0133', 'Discriminator accuracy 0.9980', 'Total loss: 4.4828', 'for batch', 4)
('GAN loss 4.2075 ', 'GAN acc 0.0000', 'Discriminator loss 0.0638', 'Discriminator accuracy 0.9863', 'Total loss: 4.2712', 'for batch', 5)
('GAN loss 4.2067 ', 'GAN acc 0.0000', 'Discriminator loss 0.0183', 'Discriminator accuracy 0.9961', 'Total loss: 4.2250', 'for batch', 6)
('GAN loss 4.3266 ', 'GAN acc 0.0000', 'Discriminator loss 0.0166', 'Discriminator accuracy 0.9980', 'Total loss: 4.3432', 'for batch', 7)
('GAN loss 4.3131 ', 'GAN acc 0.0000', 'Discriminator loss 0.0421', 'Discriminator accuracy 0.9902', 'Total loss: 4.3553', 'for batch', 8)
('GAN loss 4.3637 ', 'GAN acc 0.0000', 'Discriminator loss 0.0258', 'Discriminator accuracy 0.9941', 'Total loss: 4.3895', 'for batch', 9)
('GAN loss 4.3442 ', 'GAN acc 0.0000', 'Discriminator loss 0.0487', 'Discriminator accuracy 0.9883', 'Total loss: 4.3929', 'for batch', 10)
('GAN loss 4.2637 ', 'GAN acc 0.0000', 'Discriminator loss 0.0435', 'Discriminator accuracy 0.9902', 'Total loss: 4.3072', 'for batch', 11)
('GAN loss 4.2653 ', 'GAN acc 0.0000', 'Discriminator loss 0.0318', 'Discriminator accuracy 0.9941', 'Total loss: 4.2971', 'for batch', 12)
('GAN loss 4.3263 ', 'GAN acc 0.0000', 'Discriminator loss 0.0165', 'Discriminator accuracy 0.9980', 'Total loss: 4.3428', 'for batch', 13)
('GAN loss 4.3163 ', 'GAN acc 0.0000', 'Discriminator loss 0.0546', 'Discriminator accuracy 0.9863', 'Total loss: 4.3708', 'for batch', 14)
('GAN loss 4.1687 ', 'GAN acc 0.0000', 'Discriminator loss 0.0664', 'Discriminator accuracy 0.9844', 'Total loss: 4.2351', 'for batch', 15)
('GAN loss 4.0467 ', 'GAN acc 0.0000', 'Discriminator loss 0.0420', 'Discriminator accuracy 0.9902', 'Total loss: 4.0887', 'for batch', 16)
('GAN loss 4.0768 ', 'GAN acc 0.0000', 'Discriminator loss 0.0303', 'Discriminator accuracy 0.9941', 'Total loss: 4.1071', 'for batch', 17)
('GAN loss 4.1167 ', 'GAN acc 0.0000', 'Discriminator loss 0.0341', 'Discriminator accuracy 0.9941', 'Total loss: 4.1507', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99219716)
('DISCRIMINATOR_Imagem FAKE=', 0.016516365)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.122128')
----------------------------------
('Epoch', 31, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2662 ', 'GAN acc 0.0000', 'Discriminator loss 0.0190', 'Discriminator accuracy 0.9961', 'Total loss: 4.2852', 'for batch', 0)
('GAN loss 4.3526 ', 'GAN acc 0.0000', 'Discriminator loss 0.0276', 'Discriminator accuracy 0.9941', 'Total loss: 4.3802', 'for batch', 1)
('GAN loss 4.5825 ', 'GAN acc 0.0000', 'Discriminator loss 0.0065', 'Discriminator accuracy 1.0000', 'Total loss: 4.5890', 'for batch', 2)
('GAN loss 4.7096 ', 'GAN acc 0.0000', 'Discriminator loss 0.0232', 'Discriminator accuracy 0.9941', 'Total loss: 4.7328', 'for batch', 3)
('GAN loss 4.8425 ', 'GAN acc 0.0000', 'Discriminator loss 0.0067', 'Discriminator accuracy 1.0000', 'Total loss: 4.8492', 'for batch', 4)
('GAN loss 4.7062 ', 'GAN acc 0.0000', 'Discriminator loss 0.0571', 'Discriminator accuracy 0.9883', 'Total loss: 4.7634', 'for batch', 5)
('GAN loss 4.6897 ', 'GAN acc 0.0000', 'Discriminator loss 0.0128', 'Discriminator accuracy 0.9961', 'Total loss: 4.7025', 'for batch', 6)
('GAN loss 4.7642 ', 'GAN acc 0.0000', 'Discriminator loss 0.0130', 'Discriminator accuracy 0.9980', 'Total loss: 4.7772', 'for batch', 7)
('GAN loss 4.7066 ', 'GAN acc 0.0000', 'Discriminator loss 0.0421', 'Discriminator accuracy 0.9922', 'Total loss: 4.7487', 'for batch', 8)
('GAN loss 4.6896 ', 'GAN acc 0.0000', 'Discriminator loss 0.0240', 'Discriminator accuracy 0.9961', 'Total loss: 4.7136', 'for batch', 9)
('GAN loss 4.6199 ', 'GAN acc 0.0000', 'Discriminator loss 0.0383', 'Discriminator accuracy 0.9922', 'Total loss: 4.6583', 'for batch', 10)
('GAN loss 4.4468 ', 'GAN acc 0.0000', 'Discriminator loss 0.0378', 'Discriminator accuracy 0.9902', 'Total loss: 4.4846', 'for batch', 11)
('GAN loss 4.3528 ', 'GAN acc 0.0000', 'Discriminator loss 0.0282', 'Discriminator accuracy 0.9922', 'Total loss: 4.3810', 'for batch', 12)
('GAN loss 5.1721 ', 'GAN acc 0.0000', 'Discriminator loss 0.0480', 'Discriminator accuracy 0.9844', 'Total loss: 5.2201', 'for batch', 13)
('GAN loss 7.2113 ', 'GAN acc 0.0000', 'Discriminator loss 0.0979', 'Discriminator accuracy 0.9805', 'Total loss: 7.3092', 'for batch', 14)
('GAN loss 6.3744 ', 'GAN acc 0.0000', 'Discriminator loss 0.0882', 'Discriminator accuracy 0.9824', 'Total loss: 6.4626', 'for batch', 15)
('GAN loss 5.7464 ', 'GAN acc 0.0000', 'Discriminator loss 0.0575', 'Discriminator accuracy 0.9902', 'Total loss: 5.8039', 'for batch', 16)
('GAN loss 5.2030 ', 'GAN acc 0.0000', 'Discriminator loss 0.0482', 'Discriminator accuracy 0.9863', 'Total loss: 5.2512', 'for batch', 17)
('GAN loss 4.7240 ', 'GAN acc 0.0000', 'Discriminator loss 0.0456', 'Discriminator accuracy 0.9902', 'Total loss: 4.7696', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98500061)
('DISCRIMINATOR_Imagem FAKE=', 0.014586354)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.118607')
----------------------------------
('Epoch', 32, 'of', 50)
('Number of batches', 19)
('GAN loss 4.3204 ', 'GAN acc 0.0000', 'Discriminator loss 0.0348', 'Discriminator accuracy 0.9902', 'Total loss: 4.3552', 'for batch', 0)
('GAN loss 4.0032 ', 'GAN acc 0.0000', 'Discriminator loss 0.0381', 'Discriminator accuracy 0.9902', 'Total loss: 4.0414', 'for batch', 1)
('GAN loss 4.0512 ', 'GAN acc 0.0000', 'Discriminator loss 0.0135', 'Discriminator accuracy 0.9980', 'Total loss: 4.0646', 'for batch', 2)
('GAN loss 4.0304 ', 'GAN acc 0.0000', 'Discriminator loss 0.0487', 'Discriminator accuracy 0.9863', 'Total loss: 4.0791', 'for batch', 3)
('GAN loss 4.0481 ', 'GAN acc 0.0000', 'Discriminator loss 0.0198', 'Discriminator accuracy 0.9961', 'Total loss: 4.0678', 'for batch', 4)
('GAN loss 3.9998 ', 'GAN acc 0.0000', 'Discriminator loss 0.0649', 'Discriminator accuracy 0.9863', 'Total loss: 4.0647', 'for batch', 5)
('GAN loss 4.0929 ', 'GAN acc 0.0000', 'Discriminator loss 0.0230', 'Discriminator accuracy 0.9961', 'Total loss: 4.1159', 'for batch', 6)
('GAN loss 4.2862 ', 'GAN acc 0.0000', 'Discriminator loss 0.0182', 'Discriminator accuracy 0.9980', 'Total loss: 4.3044', 'for batch', 7)
('GAN loss 4.2675 ', 'GAN acc 0.0000', 'Discriminator loss 0.0454', 'Discriminator accuracy 0.9902', 'Total loss: 4.3129', 'for batch', 8)
('GAN loss 4.3196 ', 'GAN acc 0.0000', 'Discriminator loss 0.0319', 'Discriminator accuracy 0.9941', 'Total loss: 4.3515', 'for batch', 9)
('GAN loss 4.2268 ', 'GAN acc 0.0000', 'Discriminator loss 0.0551', 'Discriminator accuracy 0.9883', 'Total loss: 4.2819', 'for batch', 10)
('GAN loss 4.1120 ', 'GAN acc 0.0000', 'Discriminator loss 0.0444', 'Discriminator accuracy 0.9902', 'Total loss: 4.1563', 'for batch', 11)
('GAN loss 4.1060 ', 'GAN acc 0.0000', 'Discriminator loss 0.0383', 'Discriminator accuracy 0.9922', 'Total loss: 4.1443', 'for batch', 12)
('GAN loss 4.1779 ', 'GAN acc 0.0000', 'Discriminator loss 0.0184', 'Discriminator accuracy 0.9980', 'Total loss: 4.1963', 'for batch', 13)
('GAN loss 4.0936 ', 'GAN acc 0.0000', 'Discriminator loss 0.0639', 'Discriminator accuracy 0.9863', 'Total loss: 4.1575', 'for batch', 14)
('GAN loss 3.9424 ', 'GAN acc 0.0000', 'Discriminator loss 0.0668', 'Discriminator accuracy 0.9844', 'Total loss: 4.0092', 'for batch', 15)
('GAN loss 3.8843 ', 'GAN acc 0.0000', 'Discriminator loss 0.0428', 'Discriminator accuracy 0.9902', 'Total loss: 3.9271', 'for batch', 16)
('GAN loss 3.8643 ', 'GAN acc 0.0000', 'Discriminator loss 0.0304', 'Discriminator accuracy 0.9941', 'Total loss: 3.8946', 'for batch', 17)
('GAN loss 3.9267 ', 'GAN acc 0.0000', 'Discriminator loss 0.0336', 'Discriminator accuracy 0.9941', 'Total loss: 3.9603', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99257821)
('DISCRIMINATOR_Imagem FAKE=', 0.020272052)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.716608')
----------------------------------
('Epoch', 33, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0342 ', 'GAN acc 0.0000', 'Discriminator loss 0.0292', 'Discriminator accuracy 0.9941', 'Total loss: 4.0634', 'for batch', 0)
('GAN loss 4.1739 ', 'GAN acc 0.0000', 'Discriminator loss 0.0286', 'Discriminator accuracy 0.9941', 'Total loss: 4.2025', 'for batch', 1)
('GAN loss 4.3873 ', 'GAN acc 0.0000', 'Discriminator loss 0.0087', 'Discriminator accuracy 1.0000', 'Total loss: 4.3960', 'for batch', 2)
('GAN loss 4.4474 ', 'GAN acc 0.0000', 'Discriminator loss 0.0306', 'Discriminator accuracy 0.9941', 'Total loss: 4.4780', 'for batch', 3)
('GAN loss 4.6205 ', 'GAN acc 0.0000', 'Discriminator loss 0.0087', 'Discriminator accuracy 0.9980', 'Total loss: 4.6291', 'for batch', 4)
('GAN loss 4.4923 ', 'GAN acc 0.0000', 'Discriminator loss 0.0577', 'Discriminator accuracy 0.9883', 'Total loss: 4.5500', 'for batch', 5)
('GAN loss 4.5418 ', 'GAN acc 0.0000', 'Discriminator loss 0.0182', 'Discriminator accuracy 0.9961', 'Total loss: 4.5601', 'for batch', 6)
('GAN loss 4.7104 ', 'GAN acc 0.0000', 'Discriminator loss 0.0154', 'Discriminator accuracy 0.9980', 'Total loss: 4.7259', 'for batch', 7)
('GAN loss 4.7137 ', 'GAN acc 0.0000', 'Discriminator loss 0.0437', 'Discriminator accuracy 0.9922', 'Total loss: 4.7574', 'for batch', 8)
('GAN loss 4.7679 ', 'GAN acc 0.0000', 'Discriminator loss 0.0283', 'Discriminator accuracy 0.9941', 'Total loss: 4.7962', 'for batch', 9)
('GAN loss 4.6921 ', 'GAN acc 0.0000', 'Discriminator loss 0.0474', 'Discriminator accuracy 0.9902', 'Total loss: 4.7395', 'for batch', 10)
('GAN loss 4.4600 ', 'GAN acc 0.0000', 'Discriminator loss 0.0422', 'Discriminator accuracy 0.9902', 'Total loss: 4.5022', 'for batch', 11)
('GAN loss 4.4066 ', 'GAN acc 0.0000', 'Discriminator loss 0.0358', 'Discriminator accuracy 0.9922', 'Total loss: 4.4425', 'for batch', 12)
('GAN loss 4.7575 ', 'GAN acc 0.0000', 'Discriminator loss 0.0192', 'Discriminator accuracy 0.9980', 'Total loss: 4.7767', 'for batch', 13)
('GAN loss 4.9140 ', 'GAN acc 0.0000', 'Discriminator loss 0.0667', 'Discriminator accuracy 0.9844', 'Total loss: 4.9807', 'for batch', 14)
('GAN loss 4.7813 ', 'GAN acc 0.0000', 'Discriminator loss 0.0746', 'Discriminator accuracy 0.9844', 'Total loss: 4.8559', 'for batch', 15)
('GAN loss 5.3586 ', 'GAN acc 0.0000', 'Discriminator loss 0.0569', 'Discriminator accuracy 0.9844', 'Total loss: 5.4156', 'for batch', 16)
('GAN loss 5.2947 ', 'GAN acc 0.0000', 'Discriminator loss 0.0324', 'Discriminator accuracy 0.9922', 'Total loss: 5.3271', 'for batch', 17)
('GAN loss 4.8512 ', 'GAN acc 0.0000', 'Discriminator loss 0.0340', 'Discriminator accuracy 0.9922', 'Total loss: 4.8852', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99004734)
('DISCRIMINATOR_Imagem FAKE=', 0.0088135442)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.123703')
----------------------------------
('Epoch', 34, 'of', 50)
('Number of batches', 19)
('GAN loss 4.7182 ', 'GAN acc 0.0000', 'Discriminator loss 0.0257', 'Discriminator accuracy 0.9941', 'Total loss: 4.7439', 'for batch', 0)
('GAN loss 4.5525 ', 'GAN acc 0.0000', 'Discriminator loss 0.0319', 'Discriminator accuracy 0.9922', 'Total loss: 4.5844', 'for batch', 1)
('GAN loss 4.5884 ', 'GAN acc 0.0000', 'Discriminator loss 0.0064', 'Discriminator accuracy 1.0000', 'Total loss: 4.5947', 'for batch', 2)
('GAN loss 4.5826 ', 'GAN acc 0.0000', 'Discriminator loss 0.0285', 'Discriminator accuracy 0.9941', 'Total loss: 4.6111', 'for batch', 3)
('GAN loss 4.6216 ', 'GAN acc 0.0000', 'Discriminator loss 0.0112', 'Discriminator accuracy 0.9980', 'Total loss: 4.6329', 'for batch', 4)
('GAN loss 4.4285 ', 'GAN acc 0.0000', 'Discriminator loss 0.0578', 'Discriminator accuracy 0.9863', 'Total loss: 4.4863', 'for batch', 5)
('GAN loss 4.4553 ', 'GAN acc 0.0000', 'Discriminator loss 0.0158', 'Discriminator accuracy 0.9961', 'Total loss: 4.4711', 'for batch', 6)
('GAN loss 4.5246 ', 'GAN acc 0.0000', 'Discriminator loss 0.0155', 'Discriminator accuracy 0.9980', 'Total loss: 4.5401', 'for batch', 7)
('GAN loss 4.4748 ', 'GAN acc 0.0000', 'Discriminator loss 0.0425', 'Discriminator accuracy 0.9922', 'Total loss: 4.5172', 'for batch', 8)
('GAN loss 4.4875 ', 'GAN acc 0.0000', 'Discriminator loss 0.0252', 'Discriminator accuracy 0.9961', 'Total loss: 4.5127', 'for batch', 9)
('GAN loss 4.2896 ', 'GAN acc 0.0000', 'Discriminator loss 0.0490', 'Discriminator accuracy 0.9902', 'Total loss: 4.3386', 'for batch', 10)
('GAN loss 4.5280 ', 'GAN acc 0.0000', 'Discriminator loss 0.0826', 'Discriminator accuracy 0.9902', 'Total loss: 4.6105', 'for batch', 11)
('GAN loss 5.3766 ', 'GAN acc 0.0000', 'Discriminator loss 0.0645', 'Discriminator accuracy 0.9922', 'Total loss: 5.4410', 'for batch', 12)
('GAN loss 6.5181 ', 'GAN acc 0.0000', 'Discriminator loss 0.0210', 'Discriminator accuracy 0.9961', 'Total loss: 6.5391', 'for batch', 13)
('GAN loss 5.5775 ', 'GAN acc 0.0000', 'Discriminator loss 0.0874', 'Discriminator accuracy 0.9844', 'Total loss: 5.6648', 'for batch', 14)
('GAN loss 4.7828 ', 'GAN acc 0.0000', 'Discriminator loss 0.0911', 'Discriminator accuracy 0.9824', 'Total loss: 4.8740', 'for batch', 15)
('GAN loss 4.4450 ', 'GAN acc 0.0000', 'Discriminator loss 0.0511', 'Discriminator accuracy 0.9902', 'Total loss: 4.4961', 'for batch', 16)
('GAN loss 4.1338 ', 'GAN acc 0.0000', 'Discriminator loss 0.0355', 'Discriminator accuracy 0.9922', 'Total loss: 4.1693', 'for batch', 17)
('GAN loss 4.0203 ', 'GAN acc 0.0000', 'Discriminator loss 0.0387', 'Discriminator accuracy 0.9922', 'Total loss: 4.0590', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98792082)
('DISCRIMINATOR_Imagem FAKE=', 0.020953964)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.710261')
----------------------------------
('Epoch', 35, 'of', 50)
('Number of batches', 19)
('GAN loss 3.9309 ', 'GAN acc 0.0000', 'Discriminator loss 0.0381', 'Discriminator accuracy 0.9902', 'Total loss: 3.9691', 'for batch', 0)
('GAN loss 3.9561 ', 'GAN acc 0.0000', 'Discriminator loss 0.0366', 'Discriminator accuracy 0.9941', 'Total loss: 3.9926', 'for batch', 1)
('GAN loss 4.0783 ', 'GAN acc 0.0000', 'Discriminator loss 0.0113', 'Discriminator accuracy 1.0000', 'Total loss: 4.0896', 'for batch', 2)
('GAN loss 4.1414 ', 'GAN acc 0.0000', 'Discriminator loss 0.0336', 'Discriminator accuracy 0.9922', 'Total loss: 4.1750', 'for batch', 3)
('GAN loss 4.2414 ', 'GAN acc 0.0000', 'Discriminator loss 0.0166', 'Discriminator accuracy 0.9961', 'Total loss: 4.2580', 'for batch', 4)
('GAN loss 4.1577 ', 'GAN acc 0.0000', 'Discriminator loss 0.0629', 'Discriminator accuracy 0.9863', 'Total loss: 4.2206', 'for batch', 5)
('GAN loss 4.2135 ', 'GAN acc 0.0000', 'Discriminator loss 0.0223', 'Discriminator accuracy 0.9961', 'Total loss: 4.2358', 'for batch', 6)
('GAN loss 4.3212 ', 'GAN acc 0.0000', 'Discriminator loss 0.0165', 'Discriminator accuracy 0.9980', 'Total loss: 4.3377', 'for batch', 7)
('GAN loss 4.3701 ', 'GAN acc 0.0000', 'Discriminator loss 0.0418', 'Discriminator accuracy 0.9922', 'Total loss: 4.4119', 'for batch', 8)
('GAN loss 4.4134 ', 'GAN acc 0.0000', 'Discriminator loss 0.0261', 'Discriminator accuracy 0.9941', 'Total loss: 4.4395', 'for batch', 9)
('GAN loss 4.3437 ', 'GAN acc 0.0000', 'Discriminator loss 0.0448', 'Discriminator accuracy 0.9902', 'Total loss: 4.3885', 'for batch', 10)
('GAN loss 4.2331 ', 'GAN acc 0.0000', 'Discriminator loss 0.0381', 'Discriminator accuracy 0.9902', 'Total loss: 4.2712', 'for batch', 11)
('GAN loss 4.1741 ', 'GAN acc 0.0000', 'Discriminator loss 0.0369', 'Discriminator accuracy 0.9922', 'Total loss: 4.2110', 'for batch', 12)
('GAN loss 4.2932 ', 'GAN acc 0.0000', 'Discriminator loss 0.0161', 'Discriminator accuracy 0.9980', 'Total loss: 4.3093', 'for batch', 13)
('GAN loss 4.2299 ', 'GAN acc 0.0000', 'Discriminator loss 0.0608', 'Discriminator accuracy 0.9863', 'Total loss: 4.2908', 'for batch', 14)
('GAN loss 3.9870 ', 'GAN acc 0.0000', 'Discriminator loss 0.0745', 'Discriminator accuracy 0.9844', 'Total loss: 4.0614', 'for batch', 15)
('GAN loss 3.8386 ', 'GAN acc 0.0000', 'Discriminator loss 0.0370', 'Discriminator accuracy 0.9922', 'Total loss: 3.8756', 'for batch', 16)
('GAN loss 3.9670 ', 'GAN acc 0.0000', 'Discriminator loss 0.0298', 'Discriminator accuracy 0.9941', 'Total loss: 3.9968', 'for batch', 17)
('GAN loss 4.0838 ', 'GAN acc 0.0000', 'Discriminator loss 0.0357', 'Discriminator accuracy 0.9922', 'Total loss: 4.1195', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9916079)
('DISCRIMINATOR_Imagem FAKE=', 0.01713204)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.208931')
----------------------------------
('Epoch', 36, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2272 ', 'GAN acc 0.0000', 'Discriminator loss 0.0245', 'Discriminator accuracy 0.9941', 'Total loss: 4.2517', 'for batch', 0)
('GAN loss 4.4143 ', 'GAN acc 0.0000', 'Discriminator loss 0.0333', 'Discriminator accuracy 0.9941', 'Total loss: 4.4475', 'for batch', 1)
('GAN loss 4.6498 ', 'GAN acc 0.0000', 'Discriminator loss 0.0065', 'Discriminator accuracy 1.0000', 'Total loss: 4.6564', 'for batch', 2)
('GAN loss 4.7372 ', 'GAN acc 0.0000', 'Discriminator loss 0.0227', 'Discriminator accuracy 0.9941', 'Total loss: 4.7599', 'for batch', 3)
('GAN loss 4.8377 ', 'GAN acc 0.0000', 'Discriminator loss 0.0105', 'Discriminator accuracy 0.9961', 'Total loss: 4.8482', 'for batch', 4)
('GAN loss 4.5086 ', 'GAN acc 0.0000', 'Discriminator loss 0.0625', 'Discriminator accuracy 0.9863', 'Total loss: 4.5711', 'for batch', 5)
('GAN loss 4.4947 ', 'GAN acc 0.0000', 'Discriminator loss 0.0164', 'Discriminator accuracy 0.9961', 'Total loss: 4.5110', 'for batch', 6)
('GAN loss 4.5868 ', 'GAN acc 0.0000', 'Discriminator loss 0.0158', 'Discriminator accuracy 0.9980', 'Total loss: 4.6025', 'for batch', 7)
('GAN loss 6.2303 ', 'GAN acc 0.0000', 'Discriminator loss 0.1385', 'Discriminator accuracy 0.9648', 'Total loss: 6.3688', 'for batch', 8)
('GAN loss 6.8468 ', 'GAN acc 0.0000', 'Discriminator loss 0.0360', 'Discriminator accuracy 0.9941', 'Total loss: 6.8828', 'for batch', 9)
('GAN loss 6.5404 ', 'GAN acc 0.0000', 'Discriminator loss 0.1037', 'Discriminator accuracy 0.9844', 'Total loss: 6.6441', 'for batch', 10)
('GAN loss 5.5622 ', 'GAN acc 0.0000', 'Discriminator loss 0.1238', 'Discriminator accuracy 0.9805', 'Total loss: 5.6860', 'for batch', 11)
('GAN loss 4.9774 ', 'GAN acc 0.0000', 'Discriminator loss 0.0588', 'Discriminator accuracy 0.9902', 'Total loss: 5.0362', 'for batch', 12)
('GAN loss 4.4425 ', 'GAN acc 0.0000', 'Discriminator loss 0.0472', 'Discriminator accuracy 0.9902', 'Total loss: 4.4897', 'for batch', 13)
('GAN loss 3.9337 ', 'GAN acc 0.0000', 'Discriminator loss 0.1004', 'Discriminator accuracy 0.9766', 'Total loss: 4.0341', 'for batch', 14)
('GAN loss 3.5181 ', 'GAN acc 0.0000', 'Discriminator loss 0.0976', 'Discriminator accuracy 0.9746', 'Total loss: 3.6156', 'for batch', 15)
('GAN loss 3.4444 ', 'GAN acc 0.0000', 'Discriminator loss 0.0552', 'Discriminator accuracy 0.9863', 'Total loss: 3.4996', 'for batch', 16)
('GAN loss 3.5494 ', 'GAN acc 0.0000', 'Discriminator loss 0.0499', 'Discriminator accuracy 0.9883', 'Total loss: 3.5993', 'for batch', 17)
('GAN loss 3.7294 ', 'GAN acc 0.0000', 'Discriminator loss 0.0405', 'Discriminator accuracy 0.9922', 'Total loss: 3.7700', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98385859)
('DISCRIMINATOR_Imagem FAKE=', 0.027962571)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.724232')
----------------------------------
('Epoch', 37, 'of', 50)
('Number of batches', 19)
('GAN loss 3.7831 ', 'GAN acc 0.0000', 'Discriminator loss 0.0449', 'Discriminator accuracy 0.9902', 'Total loss: 3.8279', 'for batch', 0)
('GAN loss 3.7565 ', 'GAN acc 0.0000', 'Discriminator loss 0.0466', 'Discriminator accuracy 0.9902', 'Total loss: 3.8032', 'for batch', 1)
('GAN loss 3.7788 ', 'GAN acc 0.0000', 'Discriminator loss 0.0174', 'Discriminator accuracy 0.9980', 'Total loss: 3.7963', 'for batch', 2)
('GAN loss 3.8537 ', 'GAN acc 0.0000', 'Discriminator loss 0.0499', 'Discriminator accuracy 0.9902', 'Total loss: 3.9036', 'for batch', 3)
('GAN loss 4.0232 ', 'GAN acc 0.0000', 'Discriminator loss 0.0239', 'Discriminator accuracy 0.9941', 'Total loss: 4.0471', 'for batch', 4)
('GAN loss 3.9814 ', 'GAN acc 0.0000', 'Discriminator loss 0.0648', 'Discriminator accuracy 0.9844', 'Total loss: 4.0462', 'for batch', 5)
('GAN loss 4.0794 ', 'GAN acc 0.0000', 'Discriminator loss 0.0237', 'Discriminator accuracy 0.9961', 'Total loss: 4.1031', 'for batch', 6)
('GAN loss 4.2432 ', 'GAN acc 0.0000', 'Discriminator loss 0.0166', 'Discriminator accuracy 0.9980', 'Total loss: 4.2599', 'for batch', 7)
('GAN loss 4.2981 ', 'GAN acc 0.0000', 'Discriminator loss 0.0449', 'Discriminator accuracy 0.9883', 'Total loss: 4.3429', 'for batch', 8)
('GAN loss 4.3344 ', 'GAN acc 0.0000', 'Discriminator loss 0.0297', 'Discriminator accuracy 0.9941', 'Total loss: 4.3641', 'for batch', 9)
('GAN loss 4.2647 ', 'GAN acc 0.0000', 'Discriminator loss 0.0609', 'Discriminator accuracy 0.9863', 'Total loss: 4.3256', 'for batch', 10)
('GAN loss 4.1338 ', 'GAN acc 0.0000', 'Discriminator loss 0.0492', 'Discriminator accuracy 0.9883', 'Total loss: 4.1829', 'for batch', 11)
('GAN loss 4.1025 ', 'GAN acc 0.0000', 'Discriminator loss 0.0349', 'Discriminator accuracy 0.9922', 'Total loss: 4.1374', 'for batch', 12)
('GAN loss 4.2271 ', 'GAN acc 0.0000', 'Discriminator loss 0.0206', 'Discriminator accuracy 0.9961', 'Total loss: 4.2476', 'for batch', 13)
('GAN loss 4.1719 ', 'GAN acc 0.0000', 'Discriminator loss 0.0675', 'Discriminator accuracy 0.9863', 'Total loss: 4.2394', 'for batch', 14)
('GAN loss 4.0330 ', 'GAN acc 0.0000', 'Discriminator loss 0.0695', 'Discriminator accuracy 0.9844', 'Total loss: 4.1026', 'for batch', 15)
('GAN loss 3.9741 ', 'GAN acc 0.0000', 'Discriminator loss 0.0441', 'Discriminator accuracy 0.9902', 'Total loss: 4.0182', 'for batch', 16)
('GAN loss 3.9884 ', 'GAN acc 0.0000', 'Discriminator loss 0.0310', 'Discriminator accuracy 0.9941', 'Total loss: 4.0194', 'for batch', 17)
('GAN loss 4.0623 ', 'GAN acc 0.0000', 'Discriminator loss 0.0335', 'Discriminator accuracy 0.9941', 'Total loss: 4.0958', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99095714)
('DISCRIMINATOR_Imagem FAKE=', 0.017421978)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.126279')
----------------------------------
('Epoch', 38, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2033 ', 'GAN acc 0.0000', 'Discriminator loss 0.0234', 'Discriminator accuracy 0.9961', 'Total loss: 4.2267', 'for batch', 0)
('GAN loss 4.3070 ', 'GAN acc 0.0000', 'Discriminator loss 0.0289', 'Discriminator accuracy 0.9941', 'Total loss: 4.3359', 'for batch', 1)
('GAN loss 4.5346 ', 'GAN acc 0.0000', 'Discriminator loss 0.0074', 'Discriminator accuracy 1.0000', 'Total loss: 4.5420', 'for batch', 2)
('GAN loss 4.6156 ', 'GAN acc 0.0000', 'Discriminator loss 0.0289', 'Discriminator accuracy 0.9941', 'Total loss: 4.6446', 'for batch', 3)
('GAN loss 4.7133 ', 'GAN acc 0.0000', 'Discriminator loss 0.0100', 'Discriminator accuracy 0.9980', 'Total loss: 4.7234', 'for batch', 4)
('GAN loss 4.6165 ', 'GAN acc 0.0000', 'Discriminator loss 0.0616', 'Discriminator accuracy 0.9863', 'Total loss: 4.6781', 'for batch', 5)
('GAN loss 4.5650 ', 'GAN acc 0.0000', 'Discriminator loss 0.0156', 'Discriminator accuracy 0.9961', 'Total loss: 4.5806', 'for batch', 6)
('GAN loss 4.6292 ', 'GAN acc 0.0000', 'Discriminator loss 0.0156', 'Discriminator accuracy 0.9980', 'Total loss: 4.6448', 'for batch', 7)
('GAN loss 4.5744 ', 'GAN acc 0.0000', 'Discriminator loss 0.0407', 'Discriminator accuracy 0.9922', 'Total loss: 4.6151', 'for batch', 8)
('GAN loss 4.5701 ', 'GAN acc 0.0000', 'Discriminator loss 0.0252', 'Discriminator accuracy 0.9961', 'Total loss: 4.5952', 'for batch', 9)
('GAN loss 4.3738 ', 'GAN acc 0.0000', 'Discriminator loss 0.0438', 'Discriminator accuracy 0.9902', 'Total loss: 4.4176', 'for batch', 10)
('GAN loss 5.0613 ', 'GAN acc 0.0000', 'Discriminator loss 0.0849', 'Discriminator accuracy 0.9863', 'Total loss: 5.1462', 'for batch', 11)
('GAN loss 5.4580 ', 'GAN acc 0.0000', 'Discriminator loss 0.0397', 'Discriminator accuracy 0.9922', 'Total loss: 5.4977', 'for batch', 12)
('GAN loss 5.8545 ', 'GAN acc 0.0000', 'Discriminator loss 0.0190', 'Discriminator accuracy 0.9961', 'Total loss: 5.8736', 'for batch', 13)
('GAN loss 5.2648 ', 'GAN acc 0.0000', 'Discriminator loss 0.0708', 'Discriminator accuracy 0.9844', 'Total loss: 5.3356', 'for batch', 14)
('GAN loss 4.6953 ', 'GAN acc 0.0000', 'Discriminator loss 0.0878', 'Discriminator accuracy 0.9805', 'Total loss: 4.7831', 'for batch', 15)
('GAN loss 4.3369 ', 'GAN acc 0.0000', 'Discriminator loss 0.0466', 'Discriminator accuracy 0.9902', 'Total loss: 4.3835', 'for batch', 16)
('GAN loss 3.9900 ', 'GAN acc 0.0000', 'Discriminator loss 0.0321', 'Discriminator accuracy 0.9922', 'Total loss: 4.0221', 'for batch', 17)
('GAN loss 3.9846 ', 'GAN acc 0.0000', 'Discriminator loss 0.0358', 'Discriminator accuracy 0.9922', 'Total loss: 4.0203', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98849046)
('DISCRIMINATOR_Imagem FAKE=', 0.019164719)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.692829')
----------------------------------
('Epoch', 39, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0233 ', 'GAN acc 0.0000', 'Discriminator loss 0.0287', 'Discriminator accuracy 0.9922', 'Total loss: 4.0520', 'for batch', 0)
('GAN loss 4.0846 ', 'GAN acc 0.0000', 'Discriminator loss 0.0340', 'Discriminator accuracy 0.9941', 'Total loss: 4.1185', 'for batch', 1)
('GAN loss 4.3160 ', 'GAN acc 0.0000', 'Discriminator loss 0.0110', 'Discriminator accuracy 0.9980', 'Total loss: 4.3270', 'for batch', 2)
('GAN loss 4.4258 ', 'GAN acc 0.0000', 'Discriminator loss 0.0270', 'Discriminator accuracy 0.9941', 'Total loss: 4.4528', 'for batch', 3)
('GAN loss 4.5791 ', 'GAN acc 0.0000', 'Discriminator loss 0.0087', 'Discriminator accuracy 0.9980', 'Total loss: 4.5878', 'for batch', 4)
('GAN loss 4.5182 ', 'GAN acc 0.0000', 'Discriminator loss 0.0566', 'Discriminator accuracy 0.9863', 'Total loss: 4.5748', 'for batch', 5)
('GAN loss 4.5617 ', 'GAN acc 0.0000', 'Discriminator loss 0.0168', 'Discriminator accuracy 0.9961', 'Total loss: 4.5785', 'for batch', 6)
('GAN loss 4.6652 ', 'GAN acc 0.0000', 'Discriminator loss 0.0151', 'Discriminator accuracy 0.9980', 'Total loss: 4.6803', 'for batch', 7)
('GAN loss 4.6168 ', 'GAN acc 0.0000', 'Discriminator loss 0.0420', 'Discriminator accuracy 0.9922', 'Total loss: 4.6588', 'for batch', 8)
('GAN loss 4.6267 ', 'GAN acc 0.0000', 'Discriminator loss 0.0270', 'Discriminator accuracy 0.9941', 'Total loss: 4.6537', 'for batch', 9)
('GAN loss 4.5070 ', 'GAN acc 0.0000', 'Discriminator loss 0.0424', 'Discriminator accuracy 0.9883', 'Total loss: 4.5494', 'for batch', 10)
('GAN loss 4.3694 ', 'GAN acc 0.0000', 'Discriminator loss 0.0391', 'Discriminator accuracy 0.9902', 'Total loss: 4.4085', 'for batch', 11)
('GAN loss 4.3047 ', 'GAN acc 0.0000', 'Discriminator loss 0.0316', 'Discriminator accuracy 0.9922', 'Total loss: 4.3363', 'for batch', 12)
('GAN loss 4.3839 ', 'GAN acc 0.0000', 'Discriminator loss 0.0158', 'Discriminator accuracy 0.9980', 'Total loss: 4.3997', 'for batch', 13)
('GAN loss 4.3323 ', 'GAN acc 0.0000', 'Discriminator loss 0.0587', 'Discriminator accuracy 0.9863', 'Total loss: 4.3910', 'for batch', 14)
('GAN loss 4.1292 ', 'GAN acc 0.0000', 'Discriminator loss 0.0652', 'Discriminator accuracy 0.9844', 'Total loss: 4.1944', 'for batch', 15)
('GAN loss 3.9937 ', 'GAN acc 0.0000', 'Discriminator loss 0.0386', 'Discriminator accuracy 0.9922', 'Total loss: 4.0323', 'for batch', 16)
('GAN loss 4.0483 ', 'GAN acc 0.0000', 'Discriminator loss 0.0254', 'Discriminator accuracy 0.9961', 'Total loss: 4.0737', 'for batch', 17)
('GAN loss 4.1500 ', 'GAN acc 0.0000', 'Discriminator loss 0.0340', 'Discriminator accuracy 0.9941', 'Total loss: 4.1840', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99322206)
('DISCRIMINATOR_Imagem FAKE=', 0.014517254)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.126206')
----------------------------------
('Epoch', 40, 'of', 50)
('Number of batches', 19)
('GAN loss 4.3542 ', 'GAN acc 0.0000', 'Discriminator loss 0.0190', 'Discriminator accuracy 0.9961', 'Total loss: 4.3733', 'for batch', 0)
('GAN loss 4.4809 ', 'GAN acc 0.0000', 'Discriminator loss 0.0278', 'Discriminator accuracy 0.9941', 'Total loss: 4.5087', 'for batch', 1)
('GAN loss 4.7345 ', 'GAN acc 0.0000', 'Discriminator loss 0.0056', 'Discriminator accuracy 1.0000', 'Total loss: 4.7401', 'for batch', 2)
('GAN loss 4.8310 ', 'GAN acc 0.0000', 'Discriminator loss 0.0193', 'Discriminator accuracy 0.9941', 'Total loss: 4.8504', 'for batch', 3)
('GAN loss 4.9761 ', 'GAN acc 0.0000', 'Discriminator loss 0.0053', 'Discriminator accuracy 1.0000', 'Total loss: 4.9814', 'for batch', 4)
('GAN loss 4.8171 ', 'GAN acc 0.0000', 'Discriminator loss 0.0551', 'Discriminator accuracy 0.9883', 'Total loss: 4.8722', 'for batch', 5)
('GAN loss 4.8308 ', 'GAN acc 0.0000', 'Discriminator loss 0.0105', 'Discriminator accuracy 0.9961', 'Total loss: 4.8414', 'for batch', 6)
('GAN loss 4.8828 ', 'GAN acc 0.0000', 'Discriminator loss 0.0134', 'Discriminator accuracy 0.9980', 'Total loss: 4.8962', 'for batch', 7)
('GAN loss 4.7849 ', 'GAN acc 0.0000', 'Discriminator loss 0.0443', 'Discriminator accuracy 0.9922', 'Total loss: 4.8291', 'for batch', 8)
('GAN loss 4.7345 ', 'GAN acc 0.0000', 'Discriminator loss 0.0247', 'Discriminator accuracy 0.9961', 'Total loss: 4.7592', 'for batch', 9)
('GAN loss 4.6125 ', 'GAN acc 0.0000', 'Discriminator loss 0.0404', 'Discriminator accuracy 0.9902', 'Total loss: 4.6529', 'for batch', 10)
('GAN loss 4.4319 ', 'GAN acc 0.0000', 'Discriminator loss 0.0394', 'Discriminator accuracy 0.9902', 'Total loss: 4.4713', 'for batch', 11)
('GAN loss 4.6596 ', 'GAN acc 0.0000', 'Discriminator loss 0.0384', 'Discriminator accuracy 0.9902', 'Total loss: 4.6980', 'for batch', 12)
('GAN loss 5.1332 ', 'GAN acc 0.0000', 'Discriminator loss 0.0234', 'Discriminator accuracy 0.9941', 'Total loss: 5.1566', 'for batch', 13)
('GAN loss 5.3045 ', 'GAN acc 0.0000', 'Discriminator loss 0.0675', 'Discriminator accuracy 0.9844', 'Total loss: 5.3719', 'for batch', 14)
('GAN loss 5.1233 ', 'GAN acc 0.0000', 'Discriminator loss 0.0753', 'Discriminator accuracy 0.9824', 'Total loss: 5.1987', 'for batch', 15)
('GAN loss 4.7929 ', 'GAN acc 0.0000', 'Discriminator loss 0.0482', 'Discriminator accuracy 0.9902', 'Total loss: 4.8411', 'for batch', 16)
('GAN loss 4.4831 ', 'GAN acc 0.0000', 'Discriminator loss 0.0292', 'Discriminator accuracy 0.9941', 'Total loss: 4.5123', 'for batch', 17)
('GAN loss 3.8924 ', 'GAN acc 0.0000', 'Discriminator loss 0.0506', 'Discriminator accuracy 0.9941', 'Total loss: 3.9430', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98954064)
('DISCRIMINATOR_Imagem FAKE=', 0.066508129)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.751420')
----------------------------------
('Epoch', 41, 'of', 50)
('Number of batches', 19)
('GAN loss 5.1348 ', 'GAN acc 0.0000', 'Discriminator loss 0.0314', 'Discriminator accuracy 0.9961', 'Total loss: 5.1662', 'for batch', 0)
('GAN loss 5.7249 ', 'GAN acc 0.0000', 'Discriminator loss 0.0292', 'Discriminator accuracy 0.9941', 'Total loss: 5.7541', 'for batch', 1)
('GAN loss 5.4679 ', 'GAN acc 0.0000', 'Discriminator loss 0.0040', 'Discriminator accuracy 1.0000', 'Total loss: 5.4719', 'for batch', 2)
('GAN loss 4.8799 ', 'GAN acc 0.0000', 'Discriminator loss 0.0257', 'Discriminator accuracy 0.9922', 'Total loss: 4.9056', 'for batch', 3)
('GAN loss 4.8824 ', 'GAN acc 0.0000', 'Discriminator loss 0.0090', 'Discriminator accuracy 0.9980', 'Total loss: 4.8914', 'for batch', 4)
('GAN loss 4.6622 ', 'GAN acc 0.0000', 'Discriminator loss 0.0641', 'Discriminator accuracy 0.9863', 'Total loss: 4.7263', 'for batch', 5)
('GAN loss 4.5936 ', 'GAN acc 0.0000', 'Discriminator loss 0.0186', 'Discriminator accuracy 0.9961', 'Total loss: 4.6122', 'for batch', 6)
('GAN loss 4.5744 ', 'GAN acc 0.0000', 'Discriminator loss 0.0153', 'Discriminator accuracy 0.9980', 'Total loss: 4.5897', 'for batch', 7)
('GAN loss 4.5312 ', 'GAN acc 0.0000', 'Discriminator loss 0.0430', 'Discriminator accuracy 0.9922', 'Total loss: 4.5742', 'for batch', 8)
('GAN loss 4.5547 ', 'GAN acc 0.0000', 'Discriminator loss 0.0240', 'Discriminator accuracy 0.9961', 'Total loss: 4.5787', 'for batch', 9)
('GAN loss 4.5195 ', 'GAN acc 0.0000', 'Discriminator loss 0.0425', 'Discriminator accuracy 0.9922', 'Total loss: 4.5620', 'for batch', 10)
('GAN loss 4.4228 ', 'GAN acc 0.0000', 'Discriminator loss 0.0399', 'Discriminator accuracy 0.9902', 'Total loss: 4.4627', 'for batch', 11)
('GAN loss 4.2995 ', 'GAN acc 0.0000', 'Discriminator loss 0.0355', 'Discriminator accuracy 0.9922', 'Total loss: 4.3350', 'for batch', 12)
('GAN loss 4.3678 ', 'GAN acc 0.0000', 'Discriminator loss 0.0185', 'Discriminator accuracy 0.9961', 'Total loss: 4.3864', 'for batch', 13)
('GAN loss 4.2910 ', 'GAN acc 0.0000', 'Discriminator loss 0.0671', 'Discriminator accuracy 0.9863', 'Total loss: 4.3581', 'for batch', 14)
('GAN loss 4.1372 ', 'GAN acc 0.0000', 'Discriminator loss 0.0717', 'Discriminator accuracy 0.9844', 'Total loss: 4.2089', 'for batch', 15)
('GAN loss 4.1358 ', 'GAN acc 0.0000', 'Discriminator loss 0.0405', 'Discriminator accuracy 0.9902', 'Total loss: 4.1762', 'for batch', 16)
('GAN loss 4.1724 ', 'GAN acc 0.0000', 'Discriminator loss 0.0303', 'Discriminator accuracy 0.9941', 'Total loss: 4.2027', 'for batch', 17)
('GAN loss 4.1697 ', 'GAN acc 0.0000', 'Discriminator loss 0.0381', 'Discriminator accuracy 0.9922', 'Total loss: 4.2078', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99137563)
('DISCRIMINATOR_Imagem FAKE=', 0.038382456)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.149014')
----------------------------------
('Epoch', 42, 'of', 50)
('Number of batches', 19)
('GAN loss 4.3796 ', 'GAN acc 0.0000', 'Discriminator loss 0.0272', 'Discriminator accuracy 0.9961', 'Total loss: 4.4068', 'for batch', 0)
('GAN loss 4.7909 ', 'GAN acc 0.0000', 'Discriminator loss 0.0325', 'Discriminator accuracy 0.9941', 'Total loss: 4.8234', 'for batch', 1)
('GAN loss 5.1175 ', 'GAN acc 0.0000', 'Discriminator loss 0.0052', 'Discriminator accuracy 1.0000', 'Total loss: 5.1228', 'for batch', 2)
('GAN loss 4.9132 ', 'GAN acc 0.0000', 'Discriminator loss 0.0241', 'Discriminator accuracy 0.9941', 'Total loss: 4.9372', 'for batch', 3)
('GAN loss 4.8388 ', 'GAN acc 0.0000', 'Discriminator loss 0.0079', 'Discriminator accuracy 0.9980', 'Total loss: 4.8467', 'for batch', 4)
('GAN loss 4.3351 ', 'GAN acc 0.0000', 'Discriminator loss 0.0560', 'Discriminator accuracy 0.9883', 'Total loss: 4.3912', 'for batch', 5)
('GAN loss 4.3685 ', 'GAN acc 0.0000', 'Discriminator loss 0.0266', 'Discriminator accuracy 0.9961', 'Total loss: 4.3951', 'for batch', 6)
('GAN loss 4.5444 ', 'GAN acc 0.0000', 'Discriminator loss 0.0148', 'Discriminator accuracy 0.9980', 'Total loss: 4.5592', 'for batch', 7)
('GAN loss 4.5821 ', 'GAN acc 0.0000', 'Discriminator loss 0.0403', 'Discriminator accuracy 0.9922', 'Total loss: 4.6224', 'for batch', 8)
('GAN loss 4.6216 ', 'GAN acc 0.0000', 'Discriminator loss 0.0256', 'Discriminator accuracy 0.9941', 'Total loss: 4.6471', 'for batch', 9)
('GAN loss 4.4781 ', 'GAN acc 0.0000', 'Discriminator loss 0.0499', 'Discriminator accuracy 0.9863', 'Total loss: 4.5281', 'for batch', 10)
('GAN loss 4.2784 ', 'GAN acc 0.0000', 'Discriminator loss 0.0369', 'Discriminator accuracy 0.9902', 'Total loss: 4.3153', 'for batch', 11)
('GAN loss 4.2385 ', 'GAN acc 0.0000', 'Discriminator loss 0.0355', 'Discriminator accuracy 0.9922', 'Total loss: 4.2740', 'for batch', 12)
('GAN loss 4.3817 ', 'GAN acc 0.0000', 'Discriminator loss 0.0167', 'Discriminator accuracy 0.9980', 'Total loss: 4.3984', 'for batch', 13)
('GAN loss 4.3614 ', 'GAN acc 0.0000', 'Discriminator loss 0.0703', 'Discriminator accuracy 0.9863', 'Total loss: 4.4317', 'for batch', 14)
('GAN loss 4.3716 ', 'GAN acc 0.0000', 'Discriminator loss 0.0724', 'Discriminator accuracy 0.9844', 'Total loss: 4.4440', 'for batch', 15)
('GAN loss 4.3674 ', 'GAN acc 0.0000', 'Discriminator loss 0.0414', 'Discriminator accuracy 0.9902', 'Total loss: 4.4088', 'for batch', 16)
('GAN loss 4.5785 ', 'GAN acc 0.0039', 'Discriminator loss 0.0305', 'Discriminator accuracy 0.9961', 'Total loss: 4.6090', 'for batch', 17)
('GAN loss 4.7684 ', 'GAN acc 0.0000', 'Discriminator loss 0.0337', 'Discriminator accuracy 0.9941', 'Total loss: 4.8021', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99041247)
('DISCRIMINATOR_Imagem FAKE=', 0.0090898992)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.692965')
----------------------------------
('Epoch', 43, 'of', 50)
('Number of batches', 19)
('GAN loss 4.8078 ', 'GAN acc 0.0000', 'Discriminator loss 0.0279', 'Discriminator accuracy 0.9941', 'Total loss: 4.8357', 'for batch', 0)
('GAN loss 4.7387 ', 'GAN acc 0.0000', 'Discriminator loss 0.0287', 'Discriminator accuracy 0.9941', 'Total loss: 4.7674', 'for batch', 1)
('GAN loss 4.8487 ', 'GAN acc 0.0000', 'Discriminator loss 0.0050', 'Discriminator accuracy 1.0000', 'Total loss: 4.8537', 'for batch', 2)
('GAN loss 4.8556 ', 'GAN acc 0.0000', 'Discriminator loss 0.0248', 'Discriminator accuracy 0.9941', 'Total loss: 4.8804', 'for batch', 3)
('GAN loss 4.9432 ', 'GAN acc 0.0000', 'Discriminator loss 0.0060', 'Discriminator accuracy 0.9980', 'Total loss: 4.9493', 'for batch', 4)
('GAN loss 4.6742 ', 'GAN acc 0.0000', 'Discriminator loss 0.0665', 'Discriminator accuracy 0.9844', 'Total loss: 4.7407', 'for batch', 5)
('GAN loss 4.6359 ', 'GAN acc 0.0000', 'Discriminator loss 0.0163', 'Discriminator accuracy 0.9961', 'Total loss: 4.6521', 'for batch', 6)
('GAN loss 4.6825 ', 'GAN acc 0.0000', 'Discriminator loss 0.0136', 'Discriminator accuracy 0.9980', 'Total loss: 4.6961', 'for batch', 7)
('GAN loss 4.6202 ', 'GAN acc 0.0000', 'Discriminator loss 0.0420', 'Discriminator accuracy 0.9922', 'Total loss: 4.6622', 'for batch', 8)
('GAN loss 4.6026 ', 'GAN acc 0.0000', 'Discriminator loss 0.0232', 'Discriminator accuracy 0.9961', 'Total loss: 4.6258', 'for batch', 9)
('GAN loss 4.5516 ', 'GAN acc 0.0000', 'Discriminator loss 0.0403', 'Discriminator accuracy 0.9902', 'Total loss: 4.5919', 'for batch', 10)
('GAN loss 4.4244 ', 'GAN acc 0.0000', 'Discriminator loss 0.0319', 'Discriminator accuracy 0.9922', 'Total loss: 4.4563', 'for batch', 11)
('GAN loss 4.3928 ', 'GAN acc 0.0000', 'Discriminator loss 0.0337', 'Discriminator accuracy 0.9922', 'Total loss: 4.4265', 'for batch', 12)
('GAN loss 4.4606 ', 'GAN acc 0.0000', 'Discriminator loss 0.0143', 'Discriminator accuracy 0.9980', 'Total loss: 4.4749', 'for batch', 13)
('GAN loss 4.3622 ', 'GAN acc 0.0000', 'Discriminator loss 0.0611', 'Discriminator accuracy 0.9863', 'Total loss: 4.4232', 'for batch', 14)
('GAN loss 4.1835 ', 'GAN acc 0.0000', 'Discriminator loss 0.0633', 'Discriminator accuracy 0.9844', 'Total loss: 4.2468', 'for batch', 15)
('GAN loss 4.0014 ', 'GAN acc 0.0000', 'Discriminator loss 0.0363', 'Discriminator accuracy 0.9902', 'Total loss: 4.0377', 'for batch', 16)
('GAN loss 4.0490 ', 'GAN acc 0.0000', 'Discriminator loss 0.0262', 'Discriminator accuracy 0.9961', 'Total loss: 4.0752', 'for batch', 17)
('GAN loss 4.2273 ', 'GAN acc 0.0000', 'Discriminator loss 0.0322', 'Discriminator accuracy 0.9941', 'Total loss: 4.2596', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99477661)
('DISCRIMINATOR_Imagem FAKE=', 0.014525045)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.130199')
----------------------------------
('Epoch', 44, 'of', 50)
('Number of batches', 19)
('GAN loss 4.3941 ', 'GAN acc 0.0000', 'Discriminator loss 0.0190', 'Discriminator accuracy 0.9961', 'Total loss: 4.4130', 'for batch', 0)
('GAN loss 4.5200 ', 'GAN acc 0.0000', 'Discriminator loss 0.0256', 'Discriminator accuracy 0.9941', 'Total loss: 4.5456', 'for batch', 1)
('GAN loss 4.7339 ', 'GAN acc 0.0000', 'Discriminator loss 0.0066', 'Discriminator accuracy 1.0000', 'Total loss: 4.7405', 'for batch', 2)
('GAN loss 4.8172 ', 'GAN acc 0.0000', 'Discriminator loss 0.0182', 'Discriminator accuracy 0.9961', 'Total loss: 4.8354', 'for batch', 3)
('GAN loss 5.0033 ', 'GAN acc 0.0000', 'Discriminator loss 0.0045', 'Discriminator accuracy 1.0000', 'Total loss: 5.0078', 'for batch', 4)
('GAN loss 4.8422 ', 'GAN acc 0.0000', 'Discriminator loss 0.0552', 'Discriminator accuracy 0.9883', 'Total loss: 4.8974', 'for batch', 5)
('GAN loss 4.9056 ', 'GAN acc 0.0000', 'Discriminator loss 0.0116', 'Discriminator accuracy 0.9961', 'Total loss: 4.9172', 'for batch', 6)
('GAN loss 4.9651 ', 'GAN acc 0.0000', 'Discriminator loss 0.0139', 'Discriminator accuracy 0.9980', 'Total loss: 4.9791', 'for batch', 7)
('GAN loss 4.9355 ', 'GAN acc 0.0000', 'Discriminator loss 0.0425', 'Discriminator accuracy 0.9922', 'Total loss: 4.9780', 'for batch', 8)
('GAN loss 4.9225 ', 'GAN acc 0.0000', 'Discriminator loss 0.0251', 'Discriminator accuracy 0.9961', 'Total loss: 4.9476', 'for batch', 9)
('GAN loss 5.0649 ', 'GAN acc 0.0078', 'Discriminator loss 0.0445', 'Discriminator accuracy 0.9902', 'Total loss: 5.1094', 'for batch', 10)
('GAN loss 6.2667 ', 'GAN acc 0.0039', 'Discriminator loss 0.0620', 'Discriminator accuracy 0.9785', 'Total loss: 6.3287', 'for batch', 11)
('GAN loss 6.1230 ', 'GAN acc 0.0000', 'Discriminator loss 0.0333', 'Discriminator accuracy 0.9922', 'Total loss: 6.1564', 'for batch', 12)
('GAN loss 5.7244 ', 'GAN acc 0.0000', 'Discriminator loss 0.0194', 'Discriminator accuracy 0.9961', 'Total loss: 5.7437', 'for batch', 13)
('GAN loss 5.3007 ', 'GAN acc 0.0000', 'Discriminator loss 0.0655', 'Discriminator accuracy 0.9863', 'Total loss: 5.3662', 'for batch', 14)
('GAN loss 4.8164 ', 'GAN acc 0.0000', 'Discriminator loss 0.0724', 'Discriminator accuracy 0.9844', 'Total loss: 4.8888', 'for batch', 15)
('GAN loss 4.4599 ', 'GAN acc 0.0000', 'Discriminator loss 0.0452', 'Discriminator accuracy 0.9902', 'Total loss: 4.5051', 'for batch', 16)
('GAN loss 4.2611 ', 'GAN acc 0.0000', 'Discriminator loss 0.0319', 'Discriminator accuracy 0.9941', 'Total loss: 4.2930', 'for batch', 17)
('GAN loss 4.1859 ', 'GAN acc 0.0000', 'Discriminator loss 0.0320', 'Discriminator accuracy 0.9941', 'Total loss: 4.2179', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99092382)
('DISCRIMINATOR_Imagem FAKE=', 0.015958983)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.698134')
----------------------------------
('Epoch', 45, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2399 ', 'GAN acc 0.0000', 'Discriminator loss 0.0230', 'Discriminator accuracy 0.9941', 'Total loss: 4.2629', 'for batch', 0)
('GAN loss 4.3206 ', 'GAN acc 0.0000', 'Discriminator loss 0.0270', 'Discriminator accuracy 0.9941', 'Total loss: 4.3476', 'for batch', 1)
('GAN loss 4.5276 ', 'GAN acc 0.0000', 'Discriminator loss 0.0071', 'Discriminator accuracy 1.0000', 'Total loss: 4.5347', 'for batch', 2)
('GAN loss 4.6433 ', 'GAN acc 0.0000', 'Discriminator loss 0.0234', 'Discriminator accuracy 0.9941', 'Total loss: 4.6667', 'for batch', 3)
('GAN loss 4.7837 ', 'GAN acc 0.0000', 'Discriminator loss 0.0092', 'Discriminator accuracy 0.9980', 'Total loss: 4.7929', 'for batch', 4)
('GAN loss 4.6172 ', 'GAN acc 0.0000', 'Discriminator loss 0.0580', 'Discriminator accuracy 0.9863', 'Total loss: 4.6751', 'for batch', 5)
('GAN loss 4.6457 ', 'GAN acc 0.0000', 'Discriminator loss 0.0111', 'Discriminator accuracy 0.9961', 'Total loss: 4.6568', 'for batch', 6)
('GAN loss 4.7282 ', 'GAN acc 0.0000', 'Discriminator loss 0.0140', 'Discriminator accuracy 0.9980', 'Total loss: 4.7422', 'for batch', 7)
('GAN loss 4.6865 ', 'GAN acc 0.0000', 'Discriminator loss 0.0417', 'Discriminator accuracy 0.9922', 'Total loss: 4.7282', 'for batch', 8)
('GAN loss 4.6484 ', 'GAN acc 0.0000', 'Discriminator loss 0.0243', 'Discriminator accuracy 0.9961', 'Total loss: 4.6727', 'for batch', 9)
('GAN loss 4.5664 ', 'GAN acc 0.0000', 'Discriminator loss 0.0384', 'Discriminator accuracy 0.9902', 'Total loss: 4.6048', 'for batch', 10)
('GAN loss 4.4054 ', 'GAN acc 0.0000', 'Discriminator loss 0.0364', 'Discriminator accuracy 0.9902', 'Total loss: 4.4417', 'for batch', 11)
('GAN loss 4.3715 ', 'GAN acc 0.0000', 'Discriminator loss 0.0285', 'Discriminator accuracy 0.9941', 'Total loss: 4.3999', 'for batch', 12)
('GAN loss 4.3568 ', 'GAN acc 0.0000', 'Discriminator loss 0.0161', 'Discriminator accuracy 0.9980', 'Total loss: 4.3729', 'for batch', 13)
('GAN loss 3.8361 ', 'GAN acc 0.0000', 'Discriminator loss 0.0646', 'Discriminator accuracy 0.9863', 'Total loss: 3.9007', 'for batch', 14)
('GAN loss 4.4570 ', 'GAN acc 0.0000', 'Discriminator loss 0.1366', 'Discriminator accuracy 0.9844', 'Total loss: 4.5935', 'for batch', 15)
('GAN loss 6.5756 ', 'GAN acc 0.0000', 'Discriminator loss 0.0435', 'Discriminator accuracy 0.9922', 'Total loss: 6.6191', 'for batch', 16)
('GAN loss 6.5939 ', 'GAN acc 0.0000', 'Discriminator loss 0.0210', 'Discriminator accuracy 0.9961', 'Total loss: 6.6148', 'for batch', 17)
('GAN loss 5.2830 ', 'GAN acc 0.0000', 'Discriminator loss 0.0299', 'Discriminator accuracy 0.9941', 'Total loss: 5.3129', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99302244)
('DISCRIMINATOR_Imagem FAKE=', 0.012240809)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.198473')
----------------------------------
('Epoch', 46, 'of', 50)
('Number of batches', 19)
('GAN loss 4.3683 ', 'GAN acc 0.0000', 'Discriminator loss 0.0295', 'Discriminator accuracy 0.9941', 'Total loss: 4.3978', 'for batch', 0)
('GAN loss 4.4385 ', 'GAN acc 0.0000', 'Discriminator loss 0.0299', 'Discriminator accuracy 0.9941', 'Total loss: 4.4684', 'for batch', 1)
('GAN loss 5.0181 ', 'GAN acc 0.0000', 'Discriminator loss 0.0208', 'Discriminator accuracy 1.0000', 'Total loss: 5.0389', 'for batch', 2)
('GAN loss 4.9609 ', 'GAN acc 0.0000', 'Discriminator loss 0.0344', 'Discriminator accuracy 0.9941', 'Total loss: 4.9953', 'for batch', 3)
('GAN loss 5.1530 ', 'GAN acc 0.0000', 'Discriminator loss 0.0119', 'Discriminator accuracy 0.9980', 'Total loss: 5.1649', 'for batch', 4)
('GAN loss 4.8174 ', 'GAN acc 0.0000', 'Discriminator loss 0.0775', 'Discriminator accuracy 0.9844', 'Total loss: 4.8949', 'for batch', 5)
('GAN loss 4.7792 ', 'GAN acc 0.0000', 'Discriminator loss 0.0207', 'Discriminator accuracy 0.9961', 'Total loss: 4.7999', 'for batch', 6)
('GAN loss 4.7831 ', 'GAN acc 0.0000', 'Discriminator loss 0.0170', 'Discriminator accuracy 0.9980', 'Total loss: 4.8001', 'for batch', 7)
('GAN loss 4.6070 ', 'GAN acc 0.0000', 'Discriminator loss 0.0449', 'Discriminator accuracy 0.9922', 'Total loss: 4.6519', 'for batch', 8)
('GAN loss 4.6110 ', 'GAN acc 0.0000', 'Discriminator loss 0.0265', 'Discriminator accuracy 0.9941', 'Total loss: 4.6375', 'for batch', 9)
('GAN loss 4.5131 ', 'GAN acc 0.0000', 'Discriminator loss 0.0573', 'Discriminator accuracy 0.9863', 'Total loss: 4.5705', 'for batch', 10)
('GAN loss 4.4883 ', 'GAN acc 0.0000', 'Discriminator loss 0.0412', 'Discriminator accuracy 0.9902', 'Total loss: 4.5295', 'for batch', 11)
('GAN loss 4.0938 ', 'GAN acc 0.0000', 'Discriminator loss 0.0415', 'Discriminator accuracy 0.9922', 'Total loss: 4.1354', 'for batch', 12)
('GAN loss 4.2979 ', 'GAN acc 0.0000', 'Discriminator loss 0.0193', 'Discriminator accuracy 0.9961', 'Total loss: 4.3172', 'for batch', 13)
('GAN loss 4.1824 ', 'GAN acc 0.0000', 'Discriminator loss 0.0678', 'Discriminator accuracy 0.9863', 'Total loss: 4.2502', 'for batch', 14)
('GAN loss 4.0075 ', 'GAN acc 0.0000', 'Discriminator loss 0.0691', 'Discriminator accuracy 0.9844', 'Total loss: 4.0766', 'for batch', 15)
('GAN loss 3.9096 ', 'GAN acc 0.0000', 'Discriminator loss 0.0386', 'Discriminator accuracy 0.9922', 'Total loss: 3.9482', 'for batch', 16)
('GAN loss 3.9898 ', 'GAN acc 0.0000', 'Discriminator loss 0.0271', 'Discriminator accuracy 0.9961', 'Total loss: 4.0169', 'for batch', 17)
('GAN loss 4.1294 ', 'GAN acc 0.0000', 'Discriminator loss 0.0334', 'Discriminator accuracy 0.9941', 'Total loss: 4.1628', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99232787)
('DISCRIMINATOR_Imagem FAKE=', 0.016504701)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.695667')
----------------------------------
('Epoch', 47, 'of', 50)
('Number of batches', 19)
('GAN loss 4.3372 ', 'GAN acc 0.0000', 'Discriminator loss 0.0263', 'Discriminator accuracy 0.9961', 'Total loss: 4.3635', 'for batch', 0)
('GAN loss 4.4468 ', 'GAN acc 0.0000', 'Discriminator loss 0.0309', 'Discriminator accuracy 0.9941', 'Total loss: 4.4777', 'for batch', 1)
('GAN loss 4.6784 ', 'GAN acc 0.0000', 'Discriminator loss 0.0061', 'Discriminator accuracy 1.0000', 'Total loss: 4.6845', 'for batch', 2)
('GAN loss 4.7666 ', 'GAN acc 0.0000', 'Discriminator loss 0.0249', 'Discriminator accuracy 0.9941', 'Total loss: 4.7916', 'for batch', 3)
('GAN loss 4.8603 ', 'GAN acc 0.0000', 'Discriminator loss 0.0063', 'Discriminator accuracy 1.0000', 'Total loss: 4.8666', 'for batch', 4)
('GAN loss 4.6879 ', 'GAN acc 0.0000', 'Discriminator loss 0.0559', 'Discriminator accuracy 0.9883', 'Total loss: 4.7439', 'for batch', 5)
('GAN loss 4.5338 ', 'GAN acc 0.0000', 'Discriminator loss 0.0195', 'Discriminator accuracy 0.9961', 'Total loss: 4.5533', 'for batch', 6)
('GAN loss 4.9623 ', 'GAN acc 0.0000', 'Discriminator loss 0.0129', 'Discriminator accuracy 0.9980', 'Total loss: 4.9752', 'for batch', 7)
('GAN loss 4.6858 ', 'GAN acc 0.0000', 'Discriminator loss 0.0410', 'Discriminator accuracy 0.9922', 'Total loss: 4.7268', 'for batch', 8)
('GAN loss 4.7147 ', 'GAN acc 0.0000', 'Discriminator loss 0.0222', 'Discriminator accuracy 0.9961', 'Total loss: 4.7369', 'for batch', 9)
('GAN loss 4.6881 ', 'GAN acc 0.0000', 'Discriminator loss 0.0390', 'Discriminator accuracy 0.9922', 'Total loss: 4.7271', 'for batch', 10)
('GAN loss 4.4836 ', 'GAN acc 0.0000', 'Discriminator loss 0.0388', 'Discriminator accuracy 0.9902', 'Total loss: 4.5224', 'for batch', 11)
('GAN loss 4.3748 ', 'GAN acc 0.0000', 'Discriminator loss 0.0346', 'Discriminator accuracy 0.9922', 'Total loss: 4.4094', 'for batch', 12)
('GAN loss 4.4075 ', 'GAN acc 0.0000', 'Discriminator loss 0.0162', 'Discriminator accuracy 0.9980', 'Total loss: 4.4236', 'for batch', 13)
('GAN loss 4.2947 ', 'GAN acc 0.0000', 'Discriminator loss 0.0621', 'Discriminator accuracy 0.9863', 'Total loss: 4.3569', 'for batch', 14)
('GAN loss 4.0964 ', 'GAN acc 0.0000', 'Discriminator loss 0.0666', 'Discriminator accuracy 0.9844', 'Total loss: 4.1630', 'for batch', 15)
('GAN loss 3.9649 ', 'GAN acc 0.0000', 'Discriminator loss 0.0403', 'Discriminator accuracy 0.9922', 'Total loss: 4.0052', 'for batch', 16)
('GAN loss 4.1339 ', 'GAN acc 0.0000', 'Discriminator loss 0.0263', 'Discriminator accuracy 0.9961', 'Total loss: 4.1602', 'for batch', 17)
('GAN loss 4.3096 ', 'GAN acc 0.0000', 'Discriminator loss 0.0345', 'Discriminator accuracy 0.9941', 'Total loss: 4.3440', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99297684)
('DISCRIMINATOR_Imagem FAKE=', 0.013872647)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.153402')
----------------------------------
('Epoch', 48, 'of', 50)
('Number of batches', 19)
('GAN loss 4.4579 ', 'GAN acc 0.0000', 'Discriminator loss 0.0185', 'Discriminator accuracy 0.9961', 'Total loss: 4.4764', 'for batch', 0)
('GAN loss 4.5700 ', 'GAN acc 0.0000', 'Discriminator loss 0.0293', 'Discriminator accuracy 0.9941', 'Total loss: 4.5993', 'for batch', 1)
('GAN loss 4.7671 ', 'GAN acc 0.0000', 'Discriminator loss 0.0053', 'Discriminator accuracy 1.0000', 'Total loss: 4.7724', 'for batch', 2)
('GAN loss 4.8949 ', 'GAN acc 0.0000', 'Discriminator loss 0.0171', 'Discriminator accuracy 0.9941', 'Total loss: 4.9120', 'for batch', 3)
('GAN loss 5.0137 ', 'GAN acc 0.0000', 'Discriminator loss 0.0061', 'Discriminator accuracy 0.9980', 'Total loss: 5.0199', 'for batch', 4)
('GAN loss 4.8129 ', 'GAN acc 0.0000', 'Discriminator loss 0.0572', 'Discriminator accuracy 0.9883', 'Total loss: 4.8700', 'for batch', 5)
('GAN loss 4.7805 ', 'GAN acc 0.0000', 'Discriminator loss 0.0134', 'Discriminator accuracy 0.9961', 'Total loss: 4.7940', 'for batch', 6)
('GAN loss 4.8248 ', 'GAN acc 0.0000', 'Discriminator loss 0.0126', 'Discriminator accuracy 0.9980', 'Total loss: 4.8374', 'for batch', 7)
('GAN loss 4.7501 ', 'GAN acc 0.0000', 'Discriminator loss 0.0427', 'Discriminator accuracy 0.9922', 'Total loss: 4.7928', 'for batch', 8)
('GAN loss 4.7390 ', 'GAN acc 0.0000', 'Discriminator loss 0.0226', 'Discriminator accuracy 0.9961', 'Total loss: 4.7616', 'for batch', 9)
('GAN loss 4.6777 ', 'GAN acc 0.0000', 'Discriminator loss 0.0367', 'Discriminator accuracy 0.9922', 'Total loss: 4.7145', 'for batch', 10)
('GAN loss 4.5546 ', 'GAN acc 0.0000', 'Discriminator loss 0.0316', 'Discriminator accuracy 0.9922', 'Total loss: 4.5862', 'for batch', 11)
('GAN loss 4.4899 ', 'GAN acc 0.0000', 'Discriminator loss 0.0301', 'Discriminator accuracy 0.9941', 'Total loss: 4.5201', 'for batch', 12)
('GAN loss 4.5781 ', 'GAN acc 0.0000', 'Discriminator loss 0.0151', 'Discriminator accuracy 0.9980', 'Total loss: 4.5932', 'for batch', 13)
('GAN loss 4.4789 ', 'GAN acc 0.0000', 'Discriminator loss 0.0573', 'Discriminator accuracy 0.9883', 'Total loss: 4.5362', 'for batch', 14)
('GAN loss 4.2564 ', 'GAN acc 0.0000', 'Discriminator loss 0.0639', 'Discriminator accuracy 0.9844', 'Total loss: 4.3204', 'for batch', 15)
('GAN loss 4.0705 ', 'GAN acc 0.0000', 'Discriminator loss 0.0384', 'Discriminator accuracy 0.9922', 'Total loss: 4.1089', 'for batch', 16)
('GAN loss 4.1931 ', 'GAN acc 0.0000', 'Discriminator loss 0.0260', 'Discriminator accuracy 0.9961', 'Total loss: 4.2190', 'for batch', 17)
('GAN loss 4.2883 ', 'GAN acc 0.0000', 'Discriminator loss 0.0328', 'Discriminator accuracy 0.9941', 'Total loss: 4.3212', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99362361)
('DISCRIMINATOR_Imagem FAKE=', 0.01367975)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.719580')
----------------------------------
('Epoch', 49, 'of', 50)
('Number of batches', 19)
('GAN loss 4.4667 ', 'GAN acc 0.0000', 'Discriminator loss 0.0164', 'Discriminator accuracy 0.9980', 'Total loss: 4.4831', 'for batch', 0)
('GAN loss 4.5782 ', 'GAN acc 0.0000', 'Discriminator loss 0.0273', 'Discriminator accuracy 0.9941', 'Total loss: 4.6055', 'for batch', 1)
('GAN loss 4.7600 ', 'GAN acc 0.0000', 'Discriminator loss 0.0053', 'Discriminator accuracy 1.0000', 'Total loss: 4.7653', 'for batch', 2)
('GAN loss 4.8526 ', 'GAN acc 0.0000', 'Discriminator loss 0.0200', 'Discriminator accuracy 0.9941', 'Total loss: 4.8726', 'for batch', 3)
('GAN loss 4.9544 ', 'GAN acc 0.0000', 'Discriminator loss 0.0050', 'Discriminator accuracy 1.0000', 'Total loss: 4.9594', 'for batch', 4)
('GAN loss 4.7692 ', 'GAN acc 0.0000', 'Discriminator loss 0.0551', 'Discriminator accuracy 0.9863', 'Total loss: 4.8243', 'for batch', 5)
('GAN loss 4.7643 ', 'GAN acc 0.0000', 'Discriminator loss 0.0106', 'Discriminator accuracy 0.9961', 'Total loss: 4.7749', 'for batch', 6)
('GAN loss 4.8564 ', 'GAN acc 0.0000', 'Discriminator loss 0.0127', 'Discriminator accuracy 0.9980', 'Total loss: 4.8691', 'for batch', 7)
('GAN loss 4.7728 ', 'GAN acc 0.0000', 'Discriminator loss 0.0418', 'Discriminator accuracy 0.9922', 'Total loss: 4.8146', 'for batch', 8)
('GAN loss 4.7891 ', 'GAN acc 0.0000', 'Discriminator loss 0.0234', 'Discriminator accuracy 0.9961', 'Total loss: 4.8124', 'for batch', 9)
('GAN loss 4.7199 ', 'GAN acc 0.0000', 'Discriminator loss 0.0357', 'Discriminator accuracy 0.9922', 'Total loss: 4.7556', 'for batch', 10)
('GAN loss 4.5856 ', 'GAN acc 0.0000', 'Discriminator loss 0.0294', 'Discriminator accuracy 0.9922', 'Total loss: 4.6150', 'for batch', 11)
('GAN loss 4.5182 ', 'GAN acc 0.0000', 'Discriminator loss 0.0282', 'Discriminator accuracy 0.9941', 'Total loss: 4.5464', 'for batch', 12)
('GAN loss 4.6613 ', 'GAN acc 0.0000', 'Discriminator loss 0.0141', 'Discriminator accuracy 0.9980', 'Total loss: 4.6754', 'for batch', 13)
('GAN loss 4.5616 ', 'GAN acc 0.0000', 'Discriminator loss 0.0539', 'Discriminator accuracy 0.9883', 'Total loss: 4.6155', 'for batch', 14)
('GAN loss 4.3246 ', 'GAN acc 0.0000', 'Discriminator loss 0.0621', 'Discriminator accuracy 0.9844', 'Total loss: 4.3867', 'for batch', 15)
('GAN loss 4.1330 ', 'GAN acc 0.0000', 'Discriminator loss 0.0392', 'Discriminator accuracy 0.9922', 'Total loss: 4.1722', 'for batch', 16)
('GAN loss 4.2288 ', 'GAN acc 0.0000', 'Discriminator loss 0.0244', 'Discriminator accuracy 0.9961', 'Total loss: 4.2531', 'for batch', 17)
('GAN loss 4.3077 ', 'GAN acc 0.0000', 'Discriminator loss 0.0328', 'Discriminator accuracy 0.9941', 'Total loss: 4.3405', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99408042)
('DISCRIMINATOR_Imagem FAKE=', 0.012940448)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:19.123664')
----------------------------------
('Epoch', 50, 'of', 50)
('Number of batches', 19)
('GAN loss 4.4919 ', 'GAN acc 0.0000', 'Discriminator loss 0.0153', 'Discriminator accuracy 0.9980', 'Total loss: 4.5072', 'for batch', 0)
('GAN loss 4.6182 ', 'GAN acc 0.0000', 'Discriminator loss 0.0252', 'Discriminator accuracy 0.9941', 'Total loss: 4.6435', 'for batch', 1)
('GAN loss 4.8488 ', 'GAN acc 0.0000', 'Discriminator loss 0.0055', 'Discriminator accuracy 1.0000', 'Total loss: 4.8543', 'for batch', 2)
('GAN loss 4.9620 ', 'GAN acc 0.0000', 'Discriminator loss 0.0152', 'Discriminator accuracy 0.9980', 'Total loss: 4.9773', 'for batch', 3)
('GAN loss 5.1812 ', 'GAN acc 0.0000', 'Discriminator loss 0.0040', 'Discriminator accuracy 1.0000', 'Total loss: 5.1852', 'for batch', 4)
('GAN loss 4.9593 ', 'GAN acc 0.0000', 'Discriminator loss 0.0545', 'Discriminator accuracy 0.9883', 'Total loss: 5.0139', 'for batch', 5)
('GAN loss 4.9490 ', 'GAN acc 0.0000', 'Discriminator loss 0.0095', 'Discriminator accuracy 0.9961', 'Total loss: 4.9586', 'for batch', 6)
('GAN loss 5.0478 ', 'GAN acc 0.0000', 'Discriminator loss 0.0142', 'Discriminator accuracy 0.9980', 'Total loss: 5.0620', 'for batch', 7)
('GAN loss 4.8903 ', 'GAN acc 0.0000', 'Discriminator loss 0.0436', 'Discriminator accuracy 0.9922', 'Total loss: 4.9339', 'for batch', 8)
('GAN loss 4.8127 ', 'GAN acc 0.0000', 'Discriminator loss 0.0236', 'Discriminator accuracy 0.9961', 'Total loss: 4.8363', 'for batch', 9)
('GAN loss 4.7740 ', 'GAN acc 0.0000', 'Discriminator loss 0.0348', 'Discriminator accuracy 0.9922', 'Total loss: 4.8088', 'for batch', 10)
('GAN loss 4.7502 ', 'GAN acc 0.0039', 'Discriminator loss 0.0337', 'Discriminator accuracy 0.9902', 'Total loss: 4.7839', 'for batch', 11)
('GAN loss 4.8396 ', 'GAN acc 0.0000', 'Discriminator loss 0.0275', 'Discriminator accuracy 0.9961', 'Total loss: 4.8670', 'for batch', 12)
('GAN loss 5.0359 ', 'GAN acc 0.0000', 'Discriminator loss 0.0159', 'Discriminator accuracy 0.9980', 'Total loss: 5.0517', 'for batch', 13)
('GAN loss 4.9016 ', 'GAN acc 0.0000', 'Discriminator loss 0.0560', 'Discriminator accuracy 0.9883', 'Total loss: 4.9576', 'for batch', 14)
('GAN loss 4.6634 ', 'GAN acc 0.0000', 'Discriminator loss 0.0629', 'Discriminator accuracy 0.9844', 'Total loss: 4.7263', 'for batch', 15)
('GAN loss 4.4461 ', 'GAN acc 0.0000', 'Discriminator loss 0.0420', 'Discriminator accuracy 0.9922', 'Total loss: 4.4881', 'for batch', 16)
('GAN loss 4.3923 ', 'GAN acc 0.0000', 'Discriminator loss 0.0242', 'Discriminator accuracy 0.9961', 'Total loss: 4.4165', 'for batch', 17)
('GAN loss 4.4378 ', 'GAN acc 0.0000', 'Discriminator loss 0.0325', 'Discriminator accuracy 0.9941', 'Total loss: 4.4703', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99179673)
('DISCRIMINATOR_Imagem FAKE=', 0.01296903)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
Storing to histogram values
('Elapsed time in epoch = ', '0:00:18.697838')
----------------------------------
End of training
Saving histograms
----------------------------------
('Training with dataset based on class - ', 'horse', 'with', 5000, 'samples')
----------------------------------
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_2 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_1 (Sequential)        (None, 1)             0           lambda_1[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_1 (Convolution2D)  (None, 32, 16, 16)    608         convolution2d_input_1[0][0]      
____________________________________________________________________________________________________
leakyrelu_1 (LeakyReLU)          (None, 32, 16, 16)    0           convolution2d_1[0][0]            
____________________________________________________________________________________________________
dropout_1 (Dropout)              (None, 32, 16, 16)    0           leakyrelu_1[0][0]                
____________________________________________________________________________________________________
convolution2d_2 (Convolution2D)  (None, 64, 8, 8)      18496       dropout_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_2 (LeakyReLU)          (None, 64, 8, 8)      0           convolution2d_2[0][0]            
____________________________________________________________________________________________________
dropout_2 (Dropout)              (None, 64, 8, 8)      0           leakyrelu_2[0][0]                
____________________________________________________________________________________________________
convolution2d_3 (Convolution2D)  (None, 128, 4, 4)     73856       dropout_2[0][0]                  
____________________________________________________________________________________________________
leakyrelu_3 (LeakyReLU)          (None, 128, 4, 4)     0           convolution2d_3[0][0]            
____________________________________________________________________________________________________
dropout_3 (Dropout)              (None, 128, 4, 4)     0           leakyrelu_3[0][0]                
____________________________________________________________________________________________________
convolution2d_4 (Convolution2D)  (None, 256, 2, 2)     295168      dropout_3[0][0]                  
____________________________________________________________________________________________________
leakyrelu_4 (LeakyReLU)          (None, 256, 2, 2)     0           convolution2d_4[0][0]            
____________________________________________________________________________________________________
dropout_4 (Dropout)              (None, 256, 2, 2)     0           leakyrelu_4[0][0]                
____________________________________________________________________________________________________
flatten_1 (Flatten)              (None, 1024)          0           dropout_4[0][0]                  
____________________________________________________________________________________________________
dense_1 (Dense)                  (None, 1024)          1049600     flatten_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_5 (LeakyReLU)          (None, 1024)          0           dense_1[0][0]                    
____________________________________________________________________________________________________
dropout_5 (Dropout)              (None, 1024)          0           leakyrelu_5[0][0]                
____________________________________________________________________________________________________
dense_2 (Dense)                  (None, 1)             1025        dropout_5[0][0]                  
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
('Epoch', 1, 'of', 50)
('Number of batches', 19)
('GAN loss 1.7907 ', 'GAN acc 0.0039', 'Discriminator loss 0.6959', 'Discriminator accuracy 0.4512', 'Total loss: 2.4867', 'for batch', 0)
('GAN loss 2.4971 ', 'GAN acc 0.0000', 'Discriminator loss 0.5411', 'Discriminator accuracy 0.5039', 'Total loss: 3.0381', 'for batch', 1)
('GAN loss 2.8361 ', 'GAN acc 0.0000', 'Discriminator loss 0.5051', 'Discriminator accuracy 0.5000', 'Total loss: 3.3412', 'for batch', 2)
('GAN loss 2.9156 ', 'GAN acc 0.0000', 'Discriminator loss 0.4784', 'Discriminator accuracy 0.5059', 'Total loss: 3.3941', 'for batch', 3)
('GAN loss 2.7337 ', 'GAN acc 0.0000', 'Discriminator loss 0.4847', 'Discriminator accuracy 0.5059', 'Total loss: 3.2184', 'for batch', 4)
('GAN loss 2.4323 ', 'GAN acc 0.0000', 'Discriminator loss 0.4683', 'Discriminator accuracy 0.5820', 'Total loss: 2.9006', 'for batch', 5)
('GAN loss 2.1656 ', 'GAN acc 0.0000', 'Discriminator loss 0.4460', 'Discriminator accuracy 0.7324', 'Total loss: 2.6116', 'for batch', 6)
('GAN loss 2.0627 ', 'GAN acc 0.0000', 'Discriminator loss 0.4364', 'Discriminator accuracy 0.8477', 'Total loss: 2.4991', 'for batch', 7)
('GAN loss 2.1470 ', 'GAN acc 0.0000', 'Discriminator loss 0.3933', 'Discriminator accuracy 0.9453', 'Total loss: 2.5403', 'for batch', 8)
('GAN loss 2.3531 ', 'GAN acc 0.0000', 'Discriminator loss 0.3340', 'Discriminator accuracy 0.9707', 'Total loss: 2.6871', 'for batch', 9)
('GAN loss 2.5911 ', 'GAN acc 0.0000', 'Discriminator loss 0.2929', 'Discriminator accuracy 0.9727', 'Total loss: 2.8840', 'for batch', 10)
('GAN loss 2.7396 ', 'GAN acc 0.0000', 'Discriminator loss 0.2490', 'Discriminator accuracy 0.9902', 'Total loss: 2.9886', 'for batch', 11)
('GAN loss 3.0182 ', 'GAN acc 0.0000', 'Discriminator loss 0.1885', 'Discriminator accuracy 0.9922', 'Total loss: 3.2067', 'for batch', 12)
('GAN loss 3.2105 ', 'GAN acc 0.0000', 'Discriminator loss 0.1744', 'Discriminator accuracy 0.9883', 'Total loss: 3.3849', 'for batch', 13)
('GAN loss 4.0432 ', 'GAN acc 0.0156', 'Discriminator loss 0.1942', 'Discriminator accuracy 0.9609', 'Total loss: 4.2374', 'for batch', 14)
('GAN loss 5.0921 ', 'GAN acc 0.0039', 'Discriminator loss 0.1686', 'Discriminator accuracy 0.9805', 'Total loss: 5.2607', 'for batch', 15)
('GAN loss 4.5111 ', 'GAN acc 0.0039', 'Discriminator loss 0.1460', 'Discriminator accuracy 0.9922', 'Total loss: 4.6572', 'for batch', 16)
('GAN loss 4.3383 ', 'GAN acc 0.0195', 'Discriminator loss 0.1407', 'Discriminator accuracy 0.9805', 'Total loss: 4.4789', 'for batch', 17)
('GAN loss 3.0766 ', 'GAN acc 0.0625', 'Discriminator loss 0.1625', 'Discriminator accuracy 0.9707', 'Total loss: 3.2391', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.89702952)
('DISCRIMINATOR_Imagem FAKE=', 0.20144042)
('Discriminator trained', 7, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:33.992502')
----------------------------------
('Epoch', 2, 'of', 50)
('Number of batches', 19)
('GAN loss 2.8581 ', 'GAN acc 0.0430', 'Discriminator loss 0.1857', 'Discriminator accuracy 0.9473', 'Total loss: 3.0437', 'for batch', 0)
('GAN loss 2.2139 ', 'GAN acc 0.3672', 'Discriminator loss 0.3049', 'Discriminator accuracy 0.8086', 'Total loss: 2.5188', 'for batch', 1)
('GAN loss 1.2672 ', 'GAN acc 0.6094', 'Discriminator loss 0.4216', 'Discriminator accuracy 0.6504', 'Total loss: 1.6888', 'for batch', 2)
('GAN loss 0.7961 ', 'GAN acc 0.4141', 'Discriminator loss 0.4692', 'Discriminator accuracy 0.6445', 'Total loss: 1.2653', 'for batch', 3)
('GAN loss 0.7124 ', 'GAN acc 0.4961', 'Discriminator loss 0.4863', 'Discriminator accuracy 0.5742', 'Total loss: 1.1987', 'for batch', 4)
('GAN loss 0.7212 ', 'GAN acc 0.4062', 'Discriminator loss 0.4983', 'Discriminator accuracy 0.5430', 'Total loss: 1.2195', 'for batch', 5)
('GAN loss 0.7816 ', 'GAN acc 0.0000', 'Discriminator loss 0.4718', 'Discriminator accuracy 0.6289', 'Total loss: 1.2534', 'for batch', 6)
('GAN loss 0.8639 ', 'GAN acc 0.0000', 'Discriminator loss 0.4215', 'Discriminator accuracy 0.9668', 'Total loss: 1.2854', 'for batch', 7)
('GAN loss 0.9564 ', 'GAN acc 0.0000', 'Discriminator loss 0.3580', 'Discriminator accuracy 0.9727', 'Total loss: 1.3144', 'for batch', 8)
('GAN loss 1.0758 ', 'GAN acc 0.0000', 'Discriminator loss 0.3161', 'Discriminator accuracy 0.9707', 'Total loss: 1.3919', 'for batch', 9)
('GAN loss 1.2231 ', 'GAN acc 0.0000', 'Discriminator loss 0.2944', 'Discriminator accuracy 0.9570', 'Total loss: 1.5174', 'for batch', 10)
('GAN loss 1.3879 ', 'GAN acc 0.0000', 'Discriminator loss 0.2501', 'Discriminator accuracy 0.9629', 'Total loss: 1.6380', 'for batch', 11)
('GAN loss 1.5994 ', 'GAN acc 0.0000', 'Discriminator loss 0.1966', 'Discriminator accuracy 0.9824', 'Total loss: 1.7961', 'for batch', 12)
('GAN loss 1.8349 ', 'GAN acc 0.0000', 'Discriminator loss 0.1730', 'Discriminator accuracy 0.9766', 'Total loss: 2.0079', 'for batch', 13)
('GAN loss 2.4452 ', 'GAN acc 0.0000', 'Discriminator loss 0.2866', 'Discriminator accuracy 0.8945', 'Total loss: 2.7318', 'for batch', 14)
('GAN loss 2.5547 ', 'GAN acc 0.0000', 'Discriminator loss 0.1925', 'Discriminator accuracy 0.9395', 'Total loss: 2.7472', 'for batch', 15)
('GAN loss 2.6091 ', 'GAN acc 0.0000', 'Discriminator loss 0.1495', 'Discriminator accuracy 0.9414', 'Total loss: 2.7586', 'for batch', 16)
('GAN loss 2.5216 ', 'GAN acc 0.0000', 'Discriminator loss 0.1698', 'Discriminator accuracy 0.9434', 'Total loss: 2.6914', 'for batch', 17)
('GAN loss 2.3753 ', 'GAN acc 0.0000', 'Discriminator loss 0.1308', 'Discriminator accuracy 0.9570', 'Total loss: 2.5061', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.92946255)
('DISCRIMINATOR_Imagem FAKE=', 0.13437256)
('Discriminator trained', 4, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.707645')
----------------------------------
('Epoch', 3, 'of', 50)
('Number of batches', 19)
('GAN loss 2.5723 ', 'GAN acc 0.0000', 'Discriminator loss 0.1301', 'Discriminator accuracy 0.9727', 'Total loss: 2.7023', 'for batch', 0)
('GAN loss 2.9364 ', 'GAN acc 0.0000', 'Discriminator loss 0.1650', 'Discriminator accuracy 0.9512', 'Total loss: 3.1014', 'for batch', 1)
('GAN loss 2.8536 ', 'GAN acc 0.0000', 'Discriminator loss 0.0828', 'Discriminator accuracy 0.9863', 'Total loss: 2.9364', 'for batch', 2)
('GAN loss 2.6973 ', 'GAN acc 0.0000', 'Discriminator loss 0.1444', 'Discriminator accuracy 0.9473', 'Total loss: 2.8417', 'for batch', 3)
('GAN loss 2.7348 ', 'GAN acc 0.0000', 'Discriminator loss 0.0982', 'Discriminator accuracy 0.9766', 'Total loss: 2.8329', 'for batch', 4)
('GAN loss 2.7028 ', 'GAN acc 0.0000', 'Discriminator loss 0.1361', 'Discriminator accuracy 0.9590', 'Total loss: 2.8390', 'for batch', 5)
('GAN loss 2.8732 ', 'GAN acc 0.0000', 'Discriminator loss 0.1036', 'Discriminator accuracy 0.9746', 'Total loss: 2.9768', 'for batch', 6)
('GAN loss 2.9564 ', 'GAN acc 0.0000', 'Discriminator loss 0.0958', 'Discriminator accuracy 0.9824', 'Total loss: 3.0522', 'for batch', 7)
('GAN loss 3.2664 ', 'GAN acc 0.0000', 'Discriminator loss 0.1013', 'Discriminator accuracy 0.9785', 'Total loss: 3.3677', 'for batch', 8)
('GAN loss 3.3221 ', 'GAN acc 0.0000', 'Discriminator loss 0.0953', 'Discriminator accuracy 0.9668', 'Total loss: 3.4174', 'for batch', 9)
('GAN loss 3.1676 ', 'GAN acc 0.0000', 'Discriminator loss 0.1244', 'Discriminator accuracy 0.9629', 'Total loss: 3.2921', 'for batch', 10)
('GAN loss 2.8900 ', 'GAN acc 0.0000', 'Discriminator loss 0.1066', 'Discriminator accuracy 0.9668', 'Total loss: 2.9966', 'for batch', 11)
('GAN loss 3.0636 ', 'GAN acc 0.0000', 'Discriminator loss 0.0725', 'Discriminator accuracy 0.9863', 'Total loss: 3.1361', 'for batch', 12)
('GAN loss 3.2487 ', 'GAN acc 0.0000', 'Discriminator loss 0.0706', 'Discriminator accuracy 0.9824', 'Total loss: 3.3193', 'for batch', 13)
('GAN loss 3.1951 ', 'GAN acc 0.0000', 'Discriminator loss 0.1049', 'Discriminator accuracy 0.9707', 'Total loss: 3.3000', 'for batch', 14)
('GAN loss 3.2868 ', 'GAN acc 0.0000', 'Discriminator loss 0.1478', 'Discriminator accuracy 0.9688', 'Total loss: 3.4346', 'for batch', 15)
('GAN loss 3.4030 ', 'GAN acc 0.0000', 'Discriminator loss 0.0724', 'Discriminator accuracy 0.9824', 'Total loss: 3.4754', 'for batch', 16)
('GAN loss 3.1345 ', 'GAN acc 0.0000', 'Discriminator loss 0.0920', 'Discriminator accuracy 0.9707', 'Total loss: 3.2265', 'for batch', 17)
('GAN loss 3.3573 ', 'GAN acc 0.0000', 'Discriminator loss 0.0766', 'Discriminator accuracy 0.9824', 'Total loss: 3.4340', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.95990384)
('DISCRIMINATOR_Imagem FAKE=', 0.04113112)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.391578')
----------------------------------
('Epoch', 4, 'of', 50)
('Number of batches', 19)
('GAN loss 3.2189 ', 'GAN acc 0.0000', 'Discriminator loss 0.0833', 'Discriminator accuracy 0.9805', 'Total loss: 3.3022', 'for batch', 0)
('GAN loss 3.6280 ', 'GAN acc 0.0000', 'Discriminator loss 0.0943', 'Discriminator accuracy 0.9746', 'Total loss: 3.7223', 'for batch', 1)
('GAN loss 3.5999 ', 'GAN acc 0.0000', 'Discriminator loss 0.0442', 'Discriminator accuracy 0.9902', 'Total loss: 3.6441', 'for batch', 2)
('GAN loss 3.3028 ', 'GAN acc 0.0000', 'Discriminator loss 0.0875', 'Discriminator accuracy 0.9746', 'Total loss: 3.3902', 'for batch', 3)
('GAN loss 3.2459 ', 'GAN acc 0.0000', 'Discriminator loss 0.0582', 'Discriminator accuracy 0.9824', 'Total loss: 3.3041', 'for batch', 4)
('GAN loss 3.0661 ', 'GAN acc 0.0000', 'Discriminator loss 0.0901', 'Discriminator accuracy 0.9785', 'Total loss: 3.1562', 'for batch', 5)
('GAN loss 4.0405 ', 'GAN acc 0.0000', 'Discriminator loss 0.0650', 'Discriminator accuracy 0.9941', 'Total loss: 4.1055', 'for batch', 6)
('GAN loss 4.0129 ', 'GAN acc 0.0000', 'Discriminator loss 0.0570', 'Discriminator accuracy 0.9844', 'Total loss: 4.0699', 'for batch', 7)
('GAN loss 3.8226 ', 'GAN acc 0.0000', 'Discriminator loss 0.0710', 'Discriminator accuracy 0.9766', 'Total loss: 3.8936', 'for batch', 8)
('GAN loss 3.4584 ', 'GAN acc 0.0000', 'Discriminator loss 0.0600', 'Discriminator accuracy 0.9844', 'Total loss: 3.5184', 'for batch', 9)
('GAN loss 3.3127 ', 'GAN acc 0.0000', 'Discriminator loss 0.0947', 'Discriminator accuracy 0.9824', 'Total loss: 3.4074', 'for batch', 10)
('GAN loss 3.2656 ', 'GAN acc 0.0000', 'Discriminator loss 0.0827', 'Discriminator accuracy 0.9785', 'Total loss: 3.3483', 'for batch', 11)
('GAN loss 3.8804 ', 'GAN acc 0.0000', 'Discriminator loss 0.0623', 'Discriminator accuracy 0.9922', 'Total loss: 3.9427', 'for batch', 12)
('GAN loss 4.0021 ', 'GAN acc 0.0000', 'Discriminator loss 0.0393', 'Discriminator accuracy 0.9922', 'Total loss: 4.0414', 'for batch', 13)
('GAN loss 3.7709 ', 'GAN acc 0.0000', 'Discriminator loss 0.0896', 'Discriminator accuracy 0.9766', 'Total loss: 3.8605', 'for batch', 14)
('GAN loss 3.3469 ', 'GAN acc 0.0000', 'Discriminator loss 0.1213', 'Discriminator accuracy 0.9746', 'Total loss: 3.4682', 'for batch', 15)
('GAN loss 4.0455 ', 'GAN acc 0.0000', 'Discriminator loss 0.0804', 'Discriminator accuracy 0.9863', 'Total loss: 4.1259', 'for batch', 16)
('GAN loss 4.0867 ', 'GAN acc 0.0000', 'Discriminator loss 0.0800', 'Discriminator accuracy 0.9824', 'Total loss: 4.1668', 'for batch', 17)
('GAN loss 3.6672 ', 'GAN acc 0.0000', 'Discriminator loss 0.0571', 'Discriminator accuracy 0.9844', 'Total loss: 3.7243', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97149026)
('DISCRIMINATOR_Imagem FAKE=', 0.031678624)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.897324')
----------------------------------
('Epoch', 5, 'of', 50)
('Number of batches', 19)
('GAN loss 3.3730 ', 'GAN acc 0.0000', 'Discriminator loss 0.0625', 'Discriminator accuracy 0.9844', 'Total loss: 3.4354', 'for batch', 0)
('GAN loss 3.5106 ', 'GAN acc 0.0039', 'Discriminator loss 0.0759', 'Discriminator accuracy 0.9766', 'Total loss: 3.5865', 'for batch', 1)
('GAN loss 3.7857 ', 'GAN acc 0.0000', 'Discriminator loss 0.0320', 'Discriminator accuracy 0.9961', 'Total loss: 3.8177', 'for batch', 2)
('GAN loss 3.6759 ', 'GAN acc 0.0000', 'Discriminator loss 0.0811', 'Discriminator accuracy 0.9766', 'Total loss: 3.7570', 'for batch', 3)
('GAN loss 3.4672 ', 'GAN acc 0.0000', 'Discriminator loss 0.0478', 'Discriminator accuracy 0.9805', 'Total loss: 3.5150', 'for batch', 4)
('GAN loss 4.7596 ', 'GAN acc 0.0000', 'Discriminator loss 0.0912', 'Discriminator accuracy 0.9785', 'Total loss: 4.8508', 'for batch', 5)
('GAN loss 3.7779 ', 'GAN acc 0.0000', 'Discriminator loss 0.0497', 'Discriminator accuracy 0.9902', 'Total loss: 3.8277', 'for batch', 6)
('GAN loss 3.8142 ', 'GAN acc 0.0000', 'Discriminator loss 0.0593', 'Discriminator accuracy 0.9883', 'Total loss: 3.8735', 'for batch', 7)
('GAN loss 3.5188 ', 'GAN acc 0.0000', 'Discriminator loss 0.0670', 'Discriminator accuracy 0.9824', 'Total loss: 3.5858', 'for batch', 8)
('GAN loss 3.8346 ', 'GAN acc 0.0000', 'Discriminator loss 0.0658', 'Discriminator accuracy 0.9883', 'Total loss: 3.9004', 'for batch', 9)
('GAN loss 3.6575 ', 'GAN acc 0.0000', 'Discriminator loss 0.0999', 'Discriminator accuracy 0.9766', 'Total loss: 3.7574', 'for batch', 10)
('GAN loss 3.7041 ', 'GAN acc 0.0000', 'Discriminator loss 0.0697', 'Discriminator accuracy 0.9785', 'Total loss: 3.7738', 'for batch', 11)
('GAN loss 3.6817 ', 'GAN acc 0.0000', 'Discriminator loss 0.0413', 'Discriminator accuracy 0.9922', 'Total loss: 3.7230', 'for batch', 12)
('GAN loss 3.9487 ', 'GAN acc 0.0000', 'Discriminator loss 0.0318', 'Discriminator accuracy 0.9941', 'Total loss: 3.9805', 'for batch', 13)
('GAN loss 3.7752 ', 'GAN acc 0.0000', 'Discriminator loss 0.0682', 'Discriminator accuracy 0.9844', 'Total loss: 3.8434', 'for batch', 14)
('GAN loss 3.3361 ', 'GAN acc 0.0000', 'Discriminator loss 0.0952', 'Discriminator accuracy 0.9805', 'Total loss: 3.4313', 'for batch', 15)
('GAN loss 3.7617 ', 'GAN acc 0.0000', 'Discriminator loss 0.0542', 'Discriminator accuracy 0.9922', 'Total loss: 3.8159', 'for batch', 16)
('GAN loss 4.0338 ', 'GAN acc 0.0000', 'Discriminator loss 0.0483', 'Discriminator accuracy 0.9902', 'Total loss: 4.0821', 'for batch', 17)
('GAN loss 4.0859 ', 'GAN acc 0.0000', 'Discriminator loss 0.0437', 'Discriminator accuracy 0.9902', 'Total loss: 4.1296', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98242372)
('DISCRIMINATOR_Imagem FAKE=', 0.018993504)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.504596')
----------------------------------
('Epoch', 6, 'of', 50)
('Number of batches', 19)
('GAN loss 3.9987 ', 'GAN acc 0.0000', 'Discriminator loss 0.0477', 'Discriminator accuracy 0.9883', 'Total loss: 4.0464', 'for batch', 0)
('GAN loss 3.7683 ', 'GAN acc 0.0000', 'Discriminator loss 0.0485', 'Discriminator accuracy 0.9902', 'Total loss: 3.8168', 'for batch', 1)
('GAN loss 4.1611 ', 'GAN acc 0.0000', 'Discriminator loss 0.0233', 'Discriminator accuracy 0.9980', 'Total loss: 4.1844', 'for batch', 2)
('GAN loss 4.3630 ', 'GAN acc 0.0000', 'Discriminator loss 0.0616', 'Discriminator accuracy 0.9844', 'Total loss: 4.4246', 'for batch', 3)
('GAN loss 6.2842 ', 'GAN acc 0.0000', 'Discriminator loss 0.0541', 'Discriminator accuracy 0.9805', 'Total loss: 6.3383', 'for batch', 4)
('GAN loss 5.0216 ', 'GAN acc 0.0000', 'Discriminator loss 0.1037', 'Discriminator accuracy 0.9707', 'Total loss: 5.1253', 'for batch', 5)
('GAN loss 4.0349 ', 'GAN acc 0.0000', 'Discriminator loss 0.0430', 'Discriminator accuracy 0.9883', 'Total loss: 4.0779', 'for batch', 6)
('GAN loss 3.7567 ', 'GAN acc 0.0000', 'Discriminator loss 0.0456', 'Discriminator accuracy 0.9922', 'Total loss: 3.8023', 'for batch', 7)
('GAN loss 3.4877 ', 'GAN acc 0.0000', 'Discriminator loss 0.0508', 'Discriminator accuracy 0.9902', 'Total loss: 3.5386', 'for batch', 8)
('GAN loss 3.8872 ', 'GAN acc 0.0000', 'Discriminator loss 0.0511', 'Discriminator accuracy 0.9941', 'Total loss: 3.9383', 'for batch', 9)
('GAN loss 4.0325 ', 'GAN acc 0.0000', 'Discriminator loss 0.0777', 'Discriminator accuracy 0.9863', 'Total loss: 4.1102', 'for batch', 10)
('GAN loss 3.6342 ', 'GAN acc 0.0000', 'Discriminator loss 0.0675', 'Discriminator accuracy 0.9805', 'Total loss: 3.7016', 'for batch', 11)
('GAN loss 4.4818 ', 'GAN acc 0.0000', 'Discriminator loss 0.0512', 'Discriminator accuracy 0.9922', 'Total loss: 4.5330', 'for batch', 12)
('GAN loss 4.4337 ', 'GAN acc 0.0000', 'Discriminator loss 0.0309', 'Discriminator accuracy 0.9922', 'Total loss: 4.4646', 'for batch', 13)
('GAN loss 3.6358 ', 'GAN acc 0.0000', 'Discriminator loss 0.0838', 'Discriminator accuracy 0.9785', 'Total loss: 3.7196', 'for batch', 14)
('GAN loss 3.0805 ', 'GAN acc 0.0000', 'Discriminator loss 0.1084', 'Discriminator accuracy 0.9785', 'Total loss: 3.1889', 'for batch', 15)
('GAN loss 4.2902 ', 'GAN acc 0.0000', 'Discriminator loss 0.0614', 'Discriminator accuracy 0.9902', 'Total loss: 4.3516', 'for batch', 16)
('GAN loss 3.9036 ', 'GAN acc 0.0000', 'Discriminator loss 0.0567', 'Discriminator accuracy 0.9844', 'Total loss: 3.9602', 'for batch', 17)
('GAN loss 3.7385 ', 'GAN acc 0.0000', 'Discriminator loss 0.0466', 'Discriminator accuracy 0.9883', 'Total loss: 3.7851', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98214442)
('DISCRIMINATOR_Imagem FAKE=', 0.028576363)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.006985')
----------------------------------
('Epoch', 7, 'of', 50)
('Number of batches', 19)
('GAN loss 3.6983 ', 'GAN acc 0.0000', 'Discriminator loss 0.0606', 'Discriminator accuracy 0.9863', 'Total loss: 3.7589', 'for batch', 0)
('GAN loss 3.5117 ', 'GAN acc 0.0000', 'Discriminator loss 0.0602', 'Discriminator accuracy 0.9844', 'Total loss: 3.5720', 'for batch', 1)
('GAN loss 5.0823 ', 'GAN acc 0.0000', 'Discriminator loss 0.0322', 'Discriminator accuracy 0.9980', 'Total loss: 5.1146', 'for batch', 2)
('GAN loss 4.6932 ', 'GAN acc 0.0000', 'Discriminator loss 0.0551', 'Discriminator accuracy 0.9863', 'Total loss: 4.7483', 'for batch', 3)
('GAN loss 4.2615 ', 'GAN acc 0.0000', 'Discriminator loss 0.0241', 'Discriminator accuracy 0.9902', 'Total loss: 4.2856', 'for batch', 4)
('GAN loss 7.0916 ', 'GAN acc 0.0000', 'Discriminator loss 0.0945', 'Discriminator accuracy 0.9707', 'Total loss: 7.1861', 'for batch', 5)
('GAN loss 4.8396 ', 'GAN acc 0.0000', 'Discriminator loss 0.0419', 'Discriminator accuracy 0.9922', 'Total loss: 4.8815', 'for batch', 6)
('GAN loss 4.5567 ', 'GAN acc 0.0000', 'Discriminator loss 0.0489', 'Discriminator accuracy 0.9902', 'Total loss: 4.6056', 'for batch', 7)
('GAN loss 3.8866 ', 'GAN acc 0.0000', 'Discriminator loss 0.0573', 'Discriminator accuracy 0.9863', 'Total loss: 3.9439', 'for batch', 8)
('GAN loss 3.8023 ', 'GAN acc 0.0000', 'Discriminator loss 0.0396', 'Discriminator accuracy 0.9941', 'Total loss: 3.8419', 'for batch', 9)
('GAN loss 3.7529 ', 'GAN acc 0.0000', 'Discriminator loss 0.0719', 'Discriminator accuracy 0.9863', 'Total loss: 3.8248', 'for batch', 10)
('GAN loss 3.6319 ', 'GAN acc 0.0000', 'Discriminator loss 0.0534', 'Discriminator accuracy 0.9824', 'Total loss: 3.6853', 'for batch', 11)
('GAN loss 4.1158 ', 'GAN acc 0.0000', 'Discriminator loss 0.0366', 'Discriminator accuracy 0.9922', 'Total loss: 4.1524', 'for batch', 12)
('GAN loss 4.5220 ', 'GAN acc 0.0000', 'Discriminator loss 0.0215', 'Discriminator accuracy 0.9961', 'Total loss: 4.5434', 'for batch', 13)
('GAN loss 4.2324 ', 'GAN acc 0.0000', 'Discriminator loss 0.0640', 'Discriminator accuracy 0.9824', 'Total loss: 4.2964', 'for batch', 14)
('GAN loss 3.6138 ', 'GAN acc 0.0000', 'Discriminator loss 0.0912', 'Discriminator accuracy 0.9824', 'Total loss: 3.7050', 'for batch', 15)
('GAN loss 3.7583 ', 'GAN acc 0.0000', 'Discriminator loss 0.0452', 'Discriminator accuracy 0.9922', 'Total loss: 3.8035', 'for batch', 16)
('GAN loss 4.1133 ', 'GAN acc 0.0000', 'Discriminator loss 0.0390', 'Discriminator accuracy 0.9922', 'Total loss: 4.1522', 'for batch', 17)
('GAN loss 4.4117 ', 'GAN acc 0.0000', 'Discriminator loss 0.0406', 'Discriminator accuracy 0.9922', 'Total loss: 4.4523', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98578298)
('DISCRIMINATOR_Imagem FAKE=', 0.018876538)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.040383')
----------------------------------
('Epoch', 8, 'of', 50)
('Number of batches', 19)
('GAN loss 4.6030 ', 'GAN acc 0.0000', 'Discriminator loss 0.0400', 'Discriminator accuracy 0.9922', 'Total loss: 4.6430', 'for batch', 0)
('GAN loss 4.3349 ', 'GAN acc 0.0000', 'Discriminator loss 0.0486', 'Discriminator accuracy 0.9902', 'Total loss: 4.3835', 'for batch', 1)
('GAN loss 4.9236 ', 'GAN acc 0.0039', 'Discriminator loss 0.0288', 'Discriminator accuracy 0.9922', 'Total loss: 4.9524', 'for batch', 2)
('GAN loss 4.7469 ', 'GAN acc 0.0000', 'Discriminator loss 0.0557', 'Discriminator accuracy 0.9863', 'Total loss: 4.8026', 'for batch', 3)
('GAN loss 5.3002 ', 'GAN acc 0.0000', 'Discriminator loss 0.0362', 'Discriminator accuracy 0.9902', 'Total loss: 5.3364', 'for batch', 4)
('GAN loss 4.2028 ', 'GAN acc 0.0000', 'Discriminator loss 0.0881', 'Discriminator accuracy 0.9824', 'Total loss: 4.2909', 'for batch', 5)
('GAN loss 3.9017 ', 'GAN acc 0.0000', 'Discriminator loss 0.0356', 'Discriminator accuracy 0.9941', 'Total loss: 3.9373', 'for batch', 6)
('GAN loss 4.2409 ', 'GAN acc 0.0000', 'Discriminator loss 0.0490', 'Discriminator accuracy 0.9941', 'Total loss: 4.2899', 'for batch', 7)
('GAN loss 4.1451 ', 'GAN acc 0.0000', 'Discriminator loss 0.0540', 'Discriminator accuracy 0.9883', 'Total loss: 4.1990', 'for batch', 8)
('GAN loss 4.1286 ', 'GAN acc 0.0000', 'Discriminator loss 0.0559', 'Discriminator accuracy 0.9941', 'Total loss: 4.1845', 'for batch', 9)
('GAN loss 4.0156 ', 'GAN acc 0.0000', 'Discriminator loss 0.0864', 'Discriminator accuracy 0.9785', 'Total loss: 4.1020', 'for batch', 10)
('GAN loss 3.1423 ', 'GAN acc 0.0000', 'Discriminator loss 0.0567', 'Discriminator accuracy 0.9805', 'Total loss: 3.1990', 'for batch', 11)
('GAN loss 4.3114 ', 'GAN acc 0.0000', 'Discriminator loss 0.0485', 'Discriminator accuracy 0.9922', 'Total loss: 4.3599', 'for batch', 12)
('GAN loss 4.8767 ', 'GAN acc 0.0000', 'Discriminator loss 0.0278', 'Discriminator accuracy 0.9941', 'Total loss: 4.9045', 'for batch', 13)
('GAN loss 4.2072 ', 'GAN acc 0.0000', 'Discriminator loss 0.0809', 'Discriminator accuracy 0.9785', 'Total loss: 4.2881', 'for batch', 14)
('GAN loss 3.4735 ', 'GAN acc 0.0000', 'Discriminator loss 0.0935', 'Discriminator accuracy 0.9844', 'Total loss: 3.5670', 'for batch', 15)
('GAN loss 3.8315 ', 'GAN acc 0.0000', 'Discriminator loss 0.0546', 'Discriminator accuracy 0.9902', 'Total loss: 3.8861', 'for batch', 16)
('GAN loss 4.2329 ', 'GAN acc 0.0000', 'Discriminator loss 0.0445', 'Discriminator accuracy 0.9922', 'Total loss: 4.2774', 'for batch', 17)
('GAN loss 4.4055 ', 'GAN acc 0.0000', 'Discriminator loss 0.0444', 'Discriminator accuracy 0.9922', 'Total loss: 4.4499', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98471224)
('DISCRIMINATOR_Imagem FAKE=', 0.01839518)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.620610')
----------------------------------
('Epoch', 9, 'of', 50)
('Number of batches', 19)
('GAN loss 4.3918 ', 'GAN acc 0.0000', 'Discriminator loss 0.0402', 'Discriminator accuracy 0.9883', 'Total loss: 4.4320', 'for batch', 0)
('GAN loss 3.9094 ', 'GAN acc 0.0000', 'Discriminator loss 0.0516', 'Discriminator accuracy 0.9883', 'Total loss: 3.9611', 'for batch', 1)
('GAN loss 4.1227 ', 'GAN acc 0.0000', 'Discriminator loss 0.0198', 'Discriminator accuracy 0.9980', 'Total loss: 4.1425', 'for batch', 2)
('GAN loss 5.1360 ', 'GAN acc 0.0000', 'Discriminator loss 0.0379', 'Discriminator accuracy 0.9883', 'Total loss: 5.1739', 'for batch', 3)
('GAN loss 4.3228 ', 'GAN acc 0.0000', 'Discriminator loss 0.0128', 'Discriminator accuracy 0.9961', 'Total loss: 4.3356', 'for batch', 4)
('GAN loss 3.4963 ', 'GAN acc 0.0000', 'Discriminator loss 0.0527', 'Discriminator accuracy 0.9844', 'Total loss: 3.5490', 'for batch', 5)
('GAN loss 4.5091 ', 'GAN acc 0.0000', 'Discriminator loss 0.0309', 'Discriminator accuracy 0.9961', 'Total loss: 4.5399', 'for batch', 6)
('GAN loss 4.9947 ', 'GAN acc 0.0000', 'Discriminator loss 0.0273', 'Discriminator accuracy 0.9961', 'Total loss: 5.0221', 'for batch', 7)
('GAN loss 4.8171 ', 'GAN acc 0.0000', 'Discriminator loss 0.0512', 'Discriminator accuracy 0.9902', 'Total loss: 4.8682', 'for batch', 8)
('GAN loss 5.0679 ', 'GAN acc 0.0000', 'Discriminator loss 0.0263', 'Discriminator accuracy 0.9941', 'Total loss: 5.0942', 'for batch', 9)
('GAN loss 4.2658 ', 'GAN acc 0.0000', 'Discriminator loss 0.0565', 'Discriminator accuracy 0.9902', 'Total loss: 4.3223', 'for batch', 10)
('GAN loss 4.3916 ', 'GAN acc 0.0000', 'Discriminator loss 0.0573', 'Discriminator accuracy 0.9883', 'Total loss: 4.4489', 'for batch', 11)
('GAN loss 6.5505 ', 'GAN acc 0.0000', 'Discriminator loss 0.0685', 'Discriminator accuracy 0.9785', 'Total loss: 6.6190', 'for batch', 12)
('GAN loss 6.0969 ', 'GAN acc 0.0000', 'Discriminator loss 0.0233', 'Discriminator accuracy 0.9941', 'Total loss: 6.1202', 'for batch', 13)
('GAN loss 4.8082 ', 'GAN acc 0.0000', 'Discriminator loss 0.1025', 'Discriminator accuracy 0.9746', 'Total loss: 4.9107', 'for batch', 14)
('GAN loss 3.9442 ', 'GAN acc 0.0000', 'Discriminator loss 0.1077', 'Discriminator accuracy 0.9766', 'Total loss: 4.0519', 'for batch', 15)
('GAN loss 3.2589 ', 'GAN acc 0.0000', 'Discriminator loss 0.0565', 'Discriminator accuracy 0.9883', 'Total loss: 3.3154', 'for batch', 16)
('GAN loss 5.4453 ', 'GAN acc 0.0000', 'Discriminator loss 0.0414', 'Discriminator accuracy 0.9902', 'Total loss: 5.4867', 'for batch', 17)
('GAN loss 4.0428 ', 'GAN acc 0.0000', 'Discriminator loss 0.0602', 'Discriminator accuracy 0.9922', 'Total loss: 4.1030', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98101622)
('DISCRIMINATOR_Imagem FAKE=', 0.010906969)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.121939')
----------------------------------
('Epoch', 10, 'of', 50)
('Number of batches', 19)
('GAN loss 4.6076 ', 'GAN acc 0.0000', 'Discriminator loss 0.0565', 'Discriminator accuracy 0.9844', 'Total loss: 4.6641', 'for batch', 0)
('GAN loss 3.9717 ', 'GAN acc 0.0000', 'Discriminator loss 0.0758', 'Discriminator accuracy 0.9785', 'Total loss: 4.0474', 'for batch', 1)
('GAN loss 3.9891 ', 'GAN acc 0.0000', 'Discriminator loss 0.0164', 'Discriminator accuracy 0.9980', 'Total loss: 4.0055', 'for batch', 2)
('GAN loss 3.8821 ', 'GAN acc 0.0000', 'Discriminator loss 0.0388', 'Discriminator accuracy 0.9902', 'Total loss: 3.9208', 'for batch', 3)
('GAN loss 4.1651 ', 'GAN acc 0.0000', 'Discriminator loss 0.0144', 'Discriminator accuracy 0.9980', 'Total loss: 4.1795', 'for batch', 4)
('GAN loss 3.9103 ', 'GAN acc 0.0000', 'Discriminator loss 0.0553', 'Discriminator accuracy 0.9824', 'Total loss: 3.9655', 'for batch', 5)
('GAN loss 4.1193 ', 'GAN acc 0.0000', 'Discriminator loss 0.0249', 'Discriminator accuracy 0.9961', 'Total loss: 4.1442', 'for batch', 6)
('GAN loss 4.5523 ', 'GAN acc 0.0000', 'Discriminator loss 0.0179', 'Discriminator accuracy 0.9980', 'Total loss: 4.5702', 'for batch', 7)
('GAN loss 4.5203 ', 'GAN acc 0.0000', 'Discriminator loss 0.0490', 'Discriminator accuracy 0.9902', 'Total loss: 4.5693', 'for batch', 8)
('GAN loss 4.4857 ', 'GAN acc 0.0000', 'Discriminator loss 0.0289', 'Discriminator accuracy 0.9941', 'Total loss: 4.5145', 'for batch', 9)
('GAN loss 4.2567 ', 'GAN acc 0.0000', 'Discriminator loss 0.0558', 'Discriminator accuracy 0.9883', 'Total loss: 4.3125', 'for batch', 10)
('GAN loss 3.9345 ', 'GAN acc 0.0000', 'Discriminator loss 0.0455', 'Discriminator accuracy 0.9883', 'Total loss: 3.9800', 'for batch', 11)
('GAN loss 4.2488 ', 'GAN acc 0.0039', 'Discriminator loss 0.0430', 'Discriminator accuracy 0.9941', 'Total loss: 4.2918', 'for batch', 12)
('GAN loss 4.9722 ', 'GAN acc 0.0000', 'Discriminator loss 0.0315', 'Discriminator accuracy 0.9980', 'Total loss: 5.0038', 'for batch', 13)
('GAN loss 7.0907 ', 'GAN acc 0.0000', 'Discriminator loss 0.1214', 'Discriminator accuracy 0.9707', 'Total loss: 7.2121', 'for batch', 14)
('GAN loss 5.1950 ', 'GAN acc 0.0000', 'Discriminator loss 0.1346', 'Discriminator accuracy 0.9727', 'Total loss: 5.3296', 'for batch', 15)
('GAN loss 4.9168 ', 'GAN acc 0.0000', 'Discriminator loss 0.0571', 'Discriminator accuracy 0.9863', 'Total loss: 4.9739', 'for batch', 16)
('GAN loss 4.1859 ', 'GAN acc 0.0000', 'Discriminator loss 0.0463', 'Discriminator accuracy 0.9844', 'Total loss: 4.2323', 'for batch', 17)
('GAN loss 3.6709 ', 'GAN acc 0.0000', 'Discriminator loss 0.0393', 'Discriminator accuracy 0.9922', 'Total loss: 3.7102', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98643041)
('DISCRIMINATOR_Imagem FAKE=', 0.029285101)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.656996')
----------------------------------
('Epoch', 11, 'of', 50)
('Number of batches', 19)
('GAN loss 3.7942 ', 'GAN acc 0.0000', 'Discriminator loss 0.0516', 'Discriminator accuracy 0.9922', 'Total loss: 3.8458', 'for batch', 0)
('GAN loss 3.8056 ', 'GAN acc 0.0000', 'Discriminator loss 0.0582', 'Discriminator accuracy 0.9902', 'Total loss: 3.8637', 'for batch', 1)
('GAN loss 7.1624 ', 'GAN acc 0.0000', 'Discriminator loss 0.0381', 'Discriminator accuracy 0.9902', 'Total loss: 7.2006', 'for batch', 2)
('GAN loss 4.5121 ', 'GAN acc 0.0000', 'Discriminator loss 0.0767', 'Discriminator accuracy 0.9805', 'Total loss: 4.5889', 'for batch', 3)
('GAN loss 4.4717 ', 'GAN acc 0.0000', 'Discriminator loss 0.0391', 'Discriminator accuracy 0.9824', 'Total loss: 4.5108', 'for batch', 4)
('GAN loss 3.5746 ', 'GAN acc 0.0000', 'Discriminator loss 0.0771', 'Discriminator accuracy 0.9785', 'Total loss: 3.6517', 'for batch', 5)
('GAN loss 3.6364 ', 'GAN acc 0.0000', 'Discriminator loss 0.0459', 'Discriminator accuracy 0.9941', 'Total loss: 3.6823', 'for batch', 6)
('GAN loss 3.9156 ', 'GAN acc 0.0000', 'Discriminator loss 0.0491', 'Discriminator accuracy 0.9922', 'Total loss: 3.9647', 'for batch', 7)
('GAN loss 3.8293 ', 'GAN acc 0.0000', 'Discriminator loss 0.0544', 'Discriminator accuracy 0.9863', 'Total loss: 3.8837', 'for batch', 8)
('GAN loss 3.9339 ', 'GAN acc 0.0000', 'Discriminator loss 0.0434', 'Discriminator accuracy 0.9941', 'Total loss: 3.9773', 'for batch', 9)
('GAN loss 4.0637 ', 'GAN acc 0.0000', 'Discriminator loss 0.0773', 'Discriminator accuracy 0.9863', 'Total loss: 4.1410', 'for batch', 10)
('GAN loss 4.7135 ', 'GAN acc 0.0000', 'Discriminator loss 0.0524', 'Discriminator accuracy 0.9863', 'Total loss: 4.7659', 'for batch', 11)
('GAN loss 3.5015 ', 'GAN acc 0.0000', 'Discriminator loss 0.0475', 'Discriminator accuracy 0.9922', 'Total loss: 3.5489', 'for batch', 12)
('GAN loss 4.3186 ', 'GAN acc 0.0000', 'Discriminator loss 0.0230', 'Discriminator accuracy 0.9961', 'Total loss: 4.3416', 'for batch', 13)
('GAN loss 3.7963 ', 'GAN acc 0.0000', 'Discriminator loss 0.0848', 'Discriminator accuracy 0.9805', 'Total loss: 3.8811', 'for batch', 14)
('GAN loss 3.7837 ', 'GAN acc 0.0000', 'Discriminator loss 0.1100', 'Discriminator accuracy 0.9824', 'Total loss: 3.8937', 'for batch', 15)
('GAN loss 3.9420 ', 'GAN acc 0.0000', 'Discriminator loss 0.0529', 'Discriminator accuracy 0.9902', 'Total loss: 3.9950', 'for batch', 16)
('GAN loss 4.1807 ', 'GAN acc 0.0000', 'Discriminator loss 0.0498', 'Discriminator accuracy 0.9863', 'Total loss: 4.2305', 'for batch', 17)
('GAN loss 4.1693 ', 'GAN acc 0.0000', 'Discriminator loss 0.0452', 'Discriminator accuracy 0.9902', 'Total loss: 4.2145', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98424935)
('DISCRIMINATOR_Imagem FAKE=', 0.017583216)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.160845')
----------------------------------
('Epoch', 12, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0613 ', 'GAN acc 0.0000', 'Discriminator loss 0.0544', 'Discriminator accuracy 0.9883', 'Total loss: 4.1156', 'for batch', 0)
('GAN loss 3.7423 ', 'GAN acc 0.0000', 'Discriminator loss 0.0616', 'Discriminator accuracy 0.9824', 'Total loss: 3.8039', 'for batch', 1)
('GAN loss 4.1973 ', 'GAN acc 0.0000', 'Discriminator loss 0.0241', 'Discriminator accuracy 0.9961', 'Total loss: 4.2214', 'for batch', 2)
('GAN loss 3.9902 ', 'GAN acc 0.0000', 'Discriminator loss 0.0640', 'Discriminator accuracy 0.9805', 'Total loss: 4.0542', 'for batch', 3)
('GAN loss 3.6068 ', 'GAN acc 0.0039', 'Discriminator loss 0.0382', 'Discriminator accuracy 0.9941', 'Total loss: 3.6450', 'for batch', 4)
('GAN loss 3.6224 ', 'GAN acc 0.0000', 'Discriminator loss 0.0807', 'Discriminator accuracy 0.9805', 'Total loss: 3.7031', 'for batch', 5)
('GAN loss 4.4052 ', 'GAN acc 0.0000', 'Discriminator loss 0.0460', 'Discriminator accuracy 0.9922', 'Total loss: 4.4513', 'for batch', 6)
('GAN loss 4.5789 ', 'GAN acc 0.0000', 'Discriminator loss 0.0400', 'Discriminator accuracy 0.9902', 'Total loss: 4.6189', 'for batch', 7)
('GAN loss 3.9978 ', 'GAN acc 0.0000', 'Discriminator loss 0.0593', 'Discriminator accuracy 0.9863', 'Total loss: 4.0571', 'for batch', 8)
('GAN loss 3.8549 ', 'GAN acc 0.0000', 'Discriminator loss 0.0408', 'Discriminator accuracy 0.9941', 'Total loss: 3.8957', 'for batch', 9)
('GAN loss 3.8641 ', 'GAN acc 0.0000', 'Discriminator loss 0.0739', 'Discriminator accuracy 0.9863', 'Total loss: 3.9380', 'for batch', 10)
('GAN loss 4.2571 ', 'GAN acc 0.0000', 'Discriminator loss 0.0475', 'Discriminator accuracy 0.9883', 'Total loss: 4.3046', 'for batch', 11)
('GAN loss 3.7402 ', 'GAN acc 0.0000', 'Discriminator loss 0.0554', 'Discriminator accuracy 0.9922', 'Total loss: 3.7956', 'for batch', 12)
('GAN loss 4.5973 ', 'GAN acc 0.0000', 'Discriminator loss 0.0279', 'Discriminator accuracy 0.9941', 'Total loss: 4.6252', 'for batch', 13)
('GAN loss 4.4182 ', 'GAN acc 0.0000', 'Discriminator loss 0.0809', 'Discriminator accuracy 0.9824', 'Total loss: 4.4992', 'for batch', 14)
('GAN loss 3.3610 ', 'GAN acc 0.0000', 'Discriminator loss 0.1021', 'Discriminator accuracy 0.9824', 'Total loss: 3.4631', 'for batch', 15)
('GAN loss 3.7721 ', 'GAN acc 0.0000', 'Discriminator loss 0.0461', 'Discriminator accuracy 0.9902', 'Total loss: 3.8181', 'for batch', 16)
('GAN loss 4.1767 ', 'GAN acc 0.0000', 'Discriminator loss 0.0457', 'Discriminator accuracy 0.9922', 'Total loss: 4.2225', 'for batch', 17)
('GAN loss 4.3911 ', 'GAN acc 0.0000', 'Discriminator loss 0.0420', 'Discriminator accuracy 0.9922', 'Total loss: 4.4330', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98490316)
('DISCRIMINATOR_Imagem FAKE=', 0.039499789)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.678138')
----------------------------------
('Epoch', 13, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0474 ', 'GAN acc 0.0000', 'Discriminator loss 0.0606', 'Discriminator accuracy 0.9863', 'Total loss: 4.1080', 'for batch', 0)
('GAN loss 4.1492 ', 'GAN acc 0.0000', 'Discriminator loss 0.0637', 'Discriminator accuracy 0.9844', 'Total loss: 4.2129', 'for batch', 1)
('GAN loss 4.3977 ', 'GAN acc 0.0000', 'Discriminator loss 0.0230', 'Discriminator accuracy 0.9941', 'Total loss: 4.4207', 'for batch', 2)
('GAN loss 3.9404 ', 'GAN acc 0.0000', 'Discriminator loss 0.0654', 'Discriminator accuracy 0.9805', 'Total loss: 4.0058', 'for batch', 3)
('GAN loss 3.8879 ', 'GAN acc 0.0000', 'Discriminator loss 0.0250', 'Discriminator accuracy 0.9922', 'Total loss: 3.9129', 'for batch', 4)
('GAN loss 3.4799 ', 'GAN acc 0.0000', 'Discriminator loss 0.0771', 'Discriminator accuracy 0.9824', 'Total loss: 3.5570', 'for batch', 5)
('GAN loss 4.4194 ', 'GAN acc 0.0000', 'Discriminator loss 0.0566', 'Discriminator accuracy 0.9941', 'Total loss: 4.4760', 'for batch', 6)
('GAN loss 4.5265 ', 'GAN acc 0.0000', 'Discriminator loss 0.0435', 'Discriminator accuracy 0.9922', 'Total loss: 4.5700', 'for batch', 7)
('GAN loss 4.3049 ', 'GAN acc 0.0000', 'Discriminator loss 0.0668', 'Discriminator accuracy 0.9863', 'Total loss: 4.3717', 'for batch', 8)
('GAN loss 4.0707 ', 'GAN acc 0.0000', 'Discriminator loss 0.0472', 'Discriminator accuracy 0.9922', 'Total loss: 4.1179', 'for batch', 9)
('GAN loss 3.8959 ', 'GAN acc 0.0000', 'Discriminator loss 0.0814', 'Discriminator accuracy 0.9863', 'Total loss: 3.9773', 'for batch', 10)
('GAN loss 3.3717 ', 'GAN acc 0.0000', 'Discriminator loss 0.0608', 'Discriminator accuracy 0.9844', 'Total loss: 3.4325', 'for batch', 11)
('GAN loss 4.0102 ', 'GAN acc 0.0000', 'Discriminator loss 0.0415', 'Discriminator accuracy 0.9922', 'Total loss: 4.0517', 'for batch', 12)
('GAN loss 3.9813 ', 'GAN acc 0.0000', 'Discriminator loss 0.0408', 'Discriminator accuracy 0.9941', 'Total loss: 4.0221', 'for batch', 13)
('GAN loss 4.1613 ', 'GAN acc 0.0000', 'Discriminator loss 0.0860', 'Discriminator accuracy 0.9805', 'Total loss: 4.2472', 'for batch', 14)
('GAN loss 3.4834 ', 'GAN acc 0.0000', 'Discriminator loss 0.0972', 'Discriminator accuracy 0.9824', 'Total loss: 3.5806', 'for batch', 15)
('GAN loss 3.5169 ', 'GAN acc 0.0000', 'Discriminator loss 0.0534', 'Discriminator accuracy 0.9902', 'Total loss: 3.5703', 'for batch', 16)
('GAN loss 3.5880 ', 'GAN acc 0.0000', 'Discriminator loss 0.0581', 'Discriminator accuracy 0.9863', 'Total loss: 3.6461', 'for batch', 17)
('GAN loss 3.8812 ', 'GAN acc 0.0000', 'Discriminator loss 0.0459', 'Discriminator accuracy 0.9902', 'Total loss: 3.9271', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98342931)
('DISCRIMINATOR_Imagem FAKE=', 0.022359665)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.158588')
----------------------------------
('Epoch', 14, 'of', 50)
('Number of batches', 19)
('GAN loss 3.9046 ', 'GAN acc 0.0000', 'Discriminator loss 0.0538', 'Discriminator accuracy 0.9883', 'Total loss: 3.9585', 'for batch', 0)
('GAN loss 3.7572 ', 'GAN acc 0.0000', 'Discriminator loss 0.0465', 'Discriminator accuracy 0.9902', 'Total loss: 3.8037', 'for batch', 1)
('GAN loss 4.0526 ', 'GAN acc 0.0000', 'Discriminator loss 0.0159', 'Discriminator accuracy 0.9980', 'Total loss: 4.0685', 'for batch', 2)
('GAN loss 3.8561 ', 'GAN acc 0.0000', 'Discriminator loss 0.0590', 'Discriminator accuracy 0.9863', 'Total loss: 3.9150', 'for batch', 3)
('GAN loss 3.7394 ', 'GAN acc 0.0000', 'Discriminator loss 0.0321', 'Discriminator accuracy 0.9902', 'Total loss: 3.7715', 'for batch', 4)
('GAN loss 3.4348 ', 'GAN acc 0.0000', 'Discriminator loss 0.0766', 'Discriminator accuracy 0.9844', 'Total loss: 3.5114', 'for batch', 5)
('GAN loss 4.3665 ', 'GAN acc 0.0000', 'Discriminator loss 0.0420', 'Discriminator accuracy 0.9961', 'Total loss: 4.4085', 'for batch', 6)
('GAN loss 4.6157 ', 'GAN acc 0.0000', 'Discriminator loss 0.0370', 'Discriminator accuracy 0.9941', 'Total loss: 4.6527', 'for batch', 7)
('GAN loss 4.4536 ', 'GAN acc 0.0000', 'Discriminator loss 0.0613', 'Discriminator accuracy 0.9863', 'Total loss: 4.5149', 'for batch', 8)
('GAN loss 4.2103 ', 'GAN acc 0.0000', 'Discriminator loss 0.0368', 'Discriminator accuracy 0.9941', 'Total loss: 4.2471', 'for batch', 9)
('GAN loss 3.8284 ', 'GAN acc 0.0000', 'Discriminator loss 0.0750', 'Discriminator accuracy 0.9863', 'Total loss: 3.9034', 'for batch', 10)
('GAN loss 3.4259 ', 'GAN acc 0.0000', 'Discriminator loss 0.0557', 'Discriminator accuracy 0.9902', 'Total loss: 3.4816', 'for batch', 11)
('GAN loss 3.9927 ', 'GAN acc 0.0000', 'Discriminator loss 0.0519', 'Discriminator accuracy 0.9922', 'Total loss: 4.0446', 'for batch', 12)
('GAN loss 4.3704 ', 'GAN acc 0.0000', 'Discriminator loss 0.0248', 'Discriminator accuracy 0.9961', 'Total loss: 4.3952', 'for batch', 13)
('GAN loss 3.8905 ', 'GAN acc 0.0000', 'Discriminator loss 0.0858', 'Discriminator accuracy 0.9824', 'Total loss: 3.9762', 'for batch', 14)
('GAN loss 3.2010 ', 'GAN acc 0.0000', 'Discriminator loss 0.0921', 'Discriminator accuracy 0.9824', 'Total loss: 3.2931', 'for batch', 15)
('GAN loss 3.9998 ', 'GAN acc 0.0000', 'Discriminator loss 0.0550', 'Discriminator accuracy 0.9902', 'Total loss: 4.0548', 'for batch', 16)
('GAN loss 4.1744 ', 'GAN acc 0.0000', 'Discriminator loss 0.0400', 'Discriminator accuracy 0.9902', 'Total loss: 4.2144', 'for batch', 17)
('GAN loss 4.1958 ', 'GAN acc 0.0000', 'Discriminator loss 0.0446', 'Discriminator accuracy 0.9922', 'Total loss: 4.2404', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9840101)
('DISCRIMINATOR_Imagem FAKE=', 0.015900178)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.688258')
----------------------------------
('Epoch', 15, 'of', 50)
('Number of batches', 19)
('GAN loss 3.8930 ', 'GAN acc 0.0000', 'Discriminator loss 0.0518', 'Discriminator accuracy 0.9883', 'Total loss: 3.9449', 'for batch', 0)
('GAN loss 3.9450 ', 'GAN acc 0.0000', 'Discriminator loss 0.0395', 'Discriminator accuracy 0.9941', 'Total loss: 3.9846', 'for batch', 1)
('GAN loss 4.3785 ', 'GAN acc 0.0000', 'Discriminator loss 0.0154', 'Discriminator accuracy 0.9980', 'Total loss: 4.3939', 'for batch', 2)
('GAN loss 3.8832 ', 'GAN acc 0.0000', 'Discriminator loss 0.0546', 'Discriminator accuracy 0.9863', 'Total loss: 3.9378', 'for batch', 3)
('GAN loss 3.8979 ', 'GAN acc 0.0000', 'Discriminator loss 0.0310', 'Discriminator accuracy 0.9922', 'Total loss: 3.9289', 'for batch', 4)
('GAN loss 3.7980 ', 'GAN acc 0.0000', 'Discriminator loss 0.0658', 'Discriminator accuracy 0.9844', 'Total loss: 3.8638', 'for batch', 5)
('GAN loss 4.6135 ', 'GAN acc 0.0000', 'Discriminator loss 0.0402', 'Discriminator accuracy 0.9941', 'Total loss: 4.6537', 'for batch', 6)
('GAN loss 4.9068 ', 'GAN acc 0.0000', 'Discriminator loss 0.0230', 'Discriminator accuracy 0.9922', 'Total loss: 4.9298', 'for batch', 7)
('GAN loss 4.4634 ', 'GAN acc 0.0000', 'Discriminator loss 0.0652', 'Discriminator accuracy 0.9863', 'Total loss: 4.5285', 'for batch', 8)
('GAN loss 4.1585 ', 'GAN acc 0.0000', 'Discriminator loss 0.0383', 'Discriminator accuracy 0.9922', 'Total loss: 4.1968', 'for batch', 9)
('GAN loss 3.7380 ', 'GAN acc 0.0000', 'Discriminator loss 0.0778', 'Discriminator accuracy 0.9863', 'Total loss: 3.8158', 'for batch', 10)
('GAN loss 3.3775 ', 'GAN acc 0.0000', 'Discriminator loss 0.0554', 'Discriminator accuracy 0.9844', 'Total loss: 3.4329', 'for batch', 11)
('GAN loss 4.4394 ', 'GAN acc 0.0000', 'Discriminator loss 0.0511', 'Discriminator accuracy 0.9922', 'Total loss: 4.4905', 'for batch', 12)
('GAN loss 4.7856 ', 'GAN acc 0.0000', 'Discriminator loss 0.0286', 'Discriminator accuracy 0.9941', 'Total loss: 4.8142', 'for batch', 13)
('GAN loss 4.0407 ', 'GAN acc 0.0000', 'Discriminator loss 0.0831', 'Discriminator accuracy 0.9805', 'Total loss: 4.1238', 'for batch', 14)
('GAN loss 3.0128 ', 'GAN acc 0.0000', 'Discriminator loss 0.0883', 'Discriminator accuracy 0.9824', 'Total loss: 3.1011', 'for batch', 15)
('GAN loss 4.5293 ', 'GAN acc 0.0000', 'Discriminator loss 0.0634', 'Discriminator accuracy 0.9902', 'Total loss: 4.5928', 'for batch', 16)
('GAN loss 4.6643 ', 'GAN acc 0.0000', 'Discriminator loss 0.0461', 'Discriminator accuracy 0.9902', 'Total loss: 4.7105', 'for batch', 17)
('GAN loss 4.5484 ', 'GAN acc 0.0000', 'Discriminator loss 0.0447', 'Discriminator accuracy 0.9902', 'Total loss: 4.5931', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98122287)
('DISCRIMINATOR_Imagem FAKE=', 0.012371244)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.181052')
----------------------------------
('Epoch', 16, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0963 ', 'GAN acc 0.0000', 'Discriminator loss 0.0526', 'Discriminator accuracy 0.9863', 'Total loss: 4.1488', 'for batch', 0)
('GAN loss 3.6796 ', 'GAN acc 0.0000', 'Discriminator loss 0.0427', 'Discriminator accuracy 0.9902', 'Total loss: 3.7223', 'for batch', 1)
('GAN loss 4.1031 ', 'GAN acc 0.0000', 'Discriminator loss 0.0186', 'Discriminator accuracy 0.9980', 'Total loss: 4.1217', 'for batch', 2)
('GAN loss 4.0177 ', 'GAN acc 0.0000', 'Discriminator loss 0.0480', 'Discriminator accuracy 0.9883', 'Total loss: 4.0656', 'for batch', 3)
('GAN loss 4.0236 ', 'GAN acc 0.0000', 'Discriminator loss 0.0299', 'Discriminator accuracy 0.9922', 'Total loss: 4.0534', 'for batch', 4)
('GAN loss 3.8186 ', 'GAN acc 0.0000', 'Discriminator loss 0.0680', 'Discriminator accuracy 0.9844', 'Total loss: 3.8866', 'for batch', 5)
('GAN loss 4.2577 ', 'GAN acc 0.0000', 'Discriminator loss 0.0346', 'Discriminator accuracy 0.9961', 'Total loss: 4.2923', 'for batch', 6)
('GAN loss 4.8722 ', 'GAN acc 0.0000', 'Discriminator loss 0.0195', 'Discriminator accuracy 0.9980', 'Total loss: 4.8917', 'for batch', 7)
('GAN loss 4.4330 ', 'GAN acc 0.0000', 'Discriminator loss 0.0559', 'Discriminator accuracy 0.9863', 'Total loss: 4.4890', 'for batch', 8)
('GAN loss 4.1854 ', 'GAN acc 0.0000', 'Discriminator loss 0.0347', 'Discriminator accuracy 0.9941', 'Total loss: 4.2200', 'for batch', 9)
('GAN loss 3.7526 ', 'GAN acc 0.0000', 'Discriminator loss 0.0728', 'Discriminator accuracy 0.9863', 'Total loss: 3.8254', 'for batch', 10)
('GAN loss 3.4975 ', 'GAN acc 0.0000', 'Discriminator loss 0.0534', 'Discriminator accuracy 0.9883', 'Total loss: 3.5510', 'for batch', 11)
('GAN loss 4.8832 ', 'GAN acc 0.0000', 'Discriminator loss 0.0563', 'Discriminator accuracy 0.9922', 'Total loss: 4.9395', 'for batch', 12)
('GAN loss 5.1550 ', 'GAN acc 0.0000', 'Discriminator loss 0.0286', 'Discriminator accuracy 0.9922', 'Total loss: 5.1836', 'for batch', 13)
('GAN loss 4.3567 ', 'GAN acc 0.0000', 'Discriminator loss 0.0874', 'Discriminator accuracy 0.9785', 'Total loss: 4.4441', 'for batch', 14)
('GAN loss 3.5529 ', 'GAN acc 0.0000', 'Discriminator loss 0.0882', 'Discriminator accuracy 0.9824', 'Total loss: 3.6410', 'for batch', 15)
('GAN loss 3.7133 ', 'GAN acc 0.0000', 'Discriminator loss 0.0535', 'Discriminator accuracy 0.9902', 'Total loss: 3.7668', 'for batch', 16)
('GAN loss 3.8367 ', 'GAN acc 0.0000', 'Discriminator loss 0.0429', 'Discriminator accuracy 0.9902', 'Total loss: 3.8796', 'for batch', 17)
('GAN loss 4.1474 ', 'GAN acc 0.0000', 'Discriminator loss 0.0415', 'Discriminator accuracy 0.9922', 'Total loss: 4.1889', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98417515)
('DISCRIMINATOR_Imagem FAKE=', 0.017390346)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.699256')
----------------------------------
('Epoch', 17, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1155 ', 'GAN acc 0.0000', 'Discriminator loss 0.0464', 'Discriminator accuracy 0.9883', 'Total loss: 4.1619', 'for batch', 0)
('GAN loss 3.9809 ', 'GAN acc 0.0000', 'Discriminator loss 0.0378', 'Discriminator accuracy 0.9922', 'Total loss: 4.0187', 'for batch', 1)
('GAN loss 4.2971 ', 'GAN acc 0.0000', 'Discriminator loss 0.0127', 'Discriminator accuracy 0.9980', 'Total loss: 4.3099', 'for batch', 2)
('GAN loss 3.9732 ', 'GAN acc 0.0000', 'Discriminator loss 0.0495', 'Discriminator accuracy 0.9883', 'Total loss: 4.0226', 'for batch', 3)
('GAN loss 3.8647 ', 'GAN acc 0.0000', 'Discriminator loss 0.0265', 'Discriminator accuracy 0.9922', 'Total loss: 3.8912', 'for batch', 4)
('GAN loss 3.8511 ', 'GAN acc 0.0000', 'Discriminator loss 0.0747', 'Discriminator accuracy 0.9844', 'Total loss: 3.9258', 'for batch', 5)
('GAN loss 4.4241 ', 'GAN acc 0.0000', 'Discriminator loss 0.0309', 'Discriminator accuracy 0.9961', 'Total loss: 4.4550', 'for batch', 6)
('GAN loss 4.8428 ', 'GAN acc 0.0000', 'Discriminator loss 0.0176', 'Discriminator accuracy 0.9980', 'Total loss: 4.8604', 'for batch', 7)
('GAN loss 4.4255 ', 'GAN acc 0.0000', 'Discriminator loss 0.0540', 'Discriminator accuracy 0.9863', 'Total loss: 4.4796', 'for batch', 8)
('GAN loss 4.2560 ', 'GAN acc 0.0000', 'Discriminator loss 0.0313', 'Discriminator accuracy 0.9941', 'Total loss: 4.2872', 'for batch', 9)
('GAN loss 3.7778 ', 'GAN acc 0.0000', 'Discriminator loss 0.0620', 'Discriminator accuracy 0.9863', 'Total loss: 3.8399', 'for batch', 10)
('GAN loss 3.4456 ', 'GAN acc 0.0000', 'Discriminator loss 0.0509', 'Discriminator accuracy 0.9883', 'Total loss: 3.4965', 'for batch', 11)
('GAN loss 4.7860 ', 'GAN acc 0.0000', 'Discriminator loss 0.0558', 'Discriminator accuracy 0.9922', 'Total loss: 4.8418', 'for batch', 12)
('GAN loss 5.2133 ', 'GAN acc 0.0000', 'Discriminator loss 0.0231', 'Discriminator accuracy 0.9961', 'Total loss: 5.2364', 'for batch', 13)
('GAN loss 4.5732 ', 'GAN acc 0.0000', 'Discriminator loss 0.0812', 'Discriminator accuracy 0.9805', 'Total loss: 4.6544', 'for batch', 14)
('GAN loss 3.6578 ', 'GAN acc 0.0000', 'Discriminator loss 0.0870', 'Discriminator accuracy 0.9805', 'Total loss: 3.7449', 'for batch', 15)
('GAN loss 3.5323 ', 'GAN acc 0.0000', 'Discriminator loss 0.0511', 'Discriminator accuracy 0.9902', 'Total loss: 3.5834', 'for batch', 16)
('GAN loss 3.7472 ', 'GAN acc 0.0000', 'Discriminator loss 0.0376', 'Discriminator accuracy 0.9902', 'Total loss: 3.7848', 'for batch', 17)
('GAN loss 4.0246 ', 'GAN acc 0.0000', 'Discriminator loss 0.0379', 'Discriminator accuracy 0.9922', 'Total loss: 4.0625', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98591644)
('DISCRIMINATOR_Imagem FAKE=', 0.018588997)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.164622')
----------------------------------
('Epoch', 18, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1478 ', 'GAN acc 0.0000', 'Discriminator loss 0.0460', 'Discriminator accuracy 0.9883', 'Total loss: 4.1938', 'for batch', 0)
('GAN loss 4.2254 ', 'GAN acc 0.0000', 'Discriminator loss 0.0399', 'Discriminator accuracy 0.9922', 'Total loss: 4.2653', 'for batch', 1)
('GAN loss 4.6697 ', 'GAN acc 0.0000', 'Discriminator loss 0.0127', 'Discriminator accuracy 0.9980', 'Total loss: 4.6824', 'for batch', 2)
('GAN loss 4.3745 ', 'GAN acc 0.0000', 'Discriminator loss 0.0438', 'Discriminator accuracy 0.9902', 'Total loss: 4.4183', 'for batch', 3)
('GAN loss 4.1196 ', 'GAN acc 0.0000', 'Discriminator loss 0.0272', 'Discriminator accuracy 0.9922', 'Total loss: 4.1468', 'for batch', 4)
('GAN loss 3.7234 ', 'GAN acc 0.0000', 'Discriminator loss 0.0676', 'Discriminator accuracy 0.9844', 'Total loss: 3.7910', 'for batch', 5)
('GAN loss 5.3556 ', 'GAN acc 0.0000', 'Discriminator loss 0.0390', 'Discriminator accuracy 0.9961', 'Total loss: 5.3946', 'for batch', 6)
('GAN loss 5.8173 ', 'GAN acc 0.0000', 'Discriminator loss 0.0156', 'Discriminator accuracy 0.9980', 'Total loss: 5.8329', 'for batch', 7)
('GAN loss 5.4302 ', 'GAN acc 0.0000', 'Discriminator loss 0.0623', 'Discriminator accuracy 0.9863', 'Total loss: 5.4924', 'for batch', 8)
('GAN loss 4.9953 ', 'GAN acc 0.0000', 'Discriminator loss 0.0348', 'Discriminator accuracy 0.9941', 'Total loss: 5.0301', 'for batch', 9)
('GAN loss 4.2968 ', 'GAN acc 0.0000', 'Discriminator loss 0.0735', 'Discriminator accuracy 0.9863', 'Total loss: 4.3703', 'for batch', 10)
('GAN loss 3.6947 ', 'GAN acc 0.0000', 'Discriminator loss 0.0543', 'Discriminator accuracy 0.9863', 'Total loss: 3.7490', 'for batch', 11)
('GAN loss 3.5307 ', 'GAN acc 0.0000', 'Discriminator loss 0.0420', 'Discriminator accuracy 0.9922', 'Total loss: 3.5727', 'for batch', 12)
('GAN loss 3.9816 ', 'GAN acc 0.0000', 'Discriminator loss 0.0292', 'Discriminator accuracy 0.9961', 'Total loss: 4.0109', 'for batch', 13)
('GAN loss 4.0260 ', 'GAN acc 0.0000', 'Discriminator loss 0.0738', 'Discriminator accuracy 0.9844', 'Total loss: 4.0997', 'for batch', 14)
('GAN loss 3.8887 ', 'GAN acc 0.0000', 'Discriminator loss 0.0835', 'Discriminator accuracy 0.9824', 'Total loss: 3.9722', 'for batch', 15)
('GAN loss 3.8711 ', 'GAN acc 0.0000', 'Discriminator loss 0.0510', 'Discriminator accuracy 0.9902', 'Total loss: 3.9221', 'for batch', 16)
('GAN loss 3.8218 ', 'GAN acc 0.0000', 'Discriminator loss 0.0359', 'Discriminator accuracy 0.9902', 'Total loss: 3.8577', 'for batch', 17)
('GAN loss 3.8469 ', 'GAN acc 0.0000', 'Discriminator loss 0.0398', 'Discriminator accuracy 0.9922', 'Total loss: 3.8867', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98758996)
('DISCRIMINATOR_Imagem FAKE=', 0.023500828)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.677697')
----------------------------------
('Epoch', 19, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0128 ', 'GAN acc 0.0000', 'Discriminator loss 0.0402', 'Discriminator accuracy 0.9902', 'Total loss: 4.0531', 'for batch', 0)
('GAN loss 4.4728 ', 'GAN acc 0.0000', 'Discriminator loss 0.0408', 'Discriminator accuracy 0.9941', 'Total loss: 4.5135', 'for batch', 1)
('GAN loss 4.9180 ', 'GAN acc 0.0000', 'Discriminator loss 0.0091', 'Discriminator accuracy 0.9980', 'Total loss: 4.9271', 'for batch', 2)
('GAN loss 4.7709 ', 'GAN acc 0.0000', 'Discriminator loss 0.0424', 'Discriminator accuracy 0.9922', 'Total loss: 4.8133', 'for batch', 3)
('GAN loss 4.5628 ', 'GAN acc 0.0000', 'Discriminator loss 0.0187', 'Discriminator accuracy 0.9941', 'Total loss: 4.5815', 'for batch', 4)
('GAN loss 3.6093 ', 'GAN acc 0.0000', 'Discriminator loss 0.0652', 'Discriminator accuracy 0.9844', 'Total loss: 3.6745', 'for batch', 5)
('GAN loss 4.7356 ', 'GAN acc 0.0000', 'Discriminator loss 0.0288', 'Discriminator accuracy 0.9961', 'Total loss: 4.7644', 'for batch', 6)
('GAN loss 5.1466 ', 'GAN acc 0.0000', 'Discriminator loss 0.0146', 'Discriminator accuracy 0.9980', 'Total loss: 5.1612', 'for batch', 7)
('GAN loss 4.9600 ', 'GAN acc 0.0000', 'Discriminator loss 0.0478', 'Discriminator accuracy 0.9883', 'Total loss: 5.0078', 'for batch', 8)
('GAN loss 4.7833 ', 'GAN acc 0.0000', 'Discriminator loss 0.0273', 'Discriminator accuracy 0.9941', 'Total loss: 4.8105', 'for batch', 9)
('GAN loss 4.3633 ', 'GAN acc 0.0000', 'Discriminator loss 0.0541', 'Discriminator accuracy 0.9883', 'Total loss: 4.4174', 'for batch', 10)
('GAN loss 3.8431 ', 'GAN acc 0.0000', 'Discriminator loss 0.0439', 'Discriminator accuracy 0.9902', 'Total loss: 3.8870', 'for batch', 11)
('GAN loss 4.2110 ', 'GAN acc 0.0000', 'Discriminator loss 0.0361', 'Discriminator accuracy 0.9922', 'Total loss: 4.2471', 'for batch', 12)
('GAN loss 4.6539 ', 'GAN acc 0.0000', 'Discriminator loss 0.0178', 'Discriminator accuracy 0.9980', 'Total loss: 4.6718', 'for batch', 13)
('GAN loss 4.5772 ', 'GAN acc 0.0000', 'Discriminator loss 0.0591', 'Discriminator accuracy 0.9883', 'Total loss: 4.6363', 'for batch', 14)
('GAN loss 4.0144 ', 'GAN acc 0.0000', 'Discriminator loss 0.0738', 'Discriminator accuracy 0.9844', 'Total loss: 4.0882', 'for batch', 15)
('GAN loss 6.6462 ', 'GAN acc 0.0000', 'Discriminator loss 0.1124', 'Discriminator accuracy 0.9746', 'Total loss: 6.7586', 'for batch', 16)
('GAN loss 6.1715 ', 'GAN acc 0.0000', 'Discriminator loss 0.0587', 'Discriminator accuracy 0.9883', 'Total loss: 6.2302', 'for batch', 17)
('GAN loss 5.3389 ', 'GAN acc 0.0000', 'Discriminator loss 0.0597', 'Discriminator accuracy 0.9883', 'Total loss: 5.3985', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97389305)
('DISCRIMINATOR_Imagem FAKE=', 0.0072416682)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.180235')
----------------------------------
('Epoch', 20, 'of', 50)
('Number of batches', 19)
('GAN loss 4.7762 ', 'GAN acc 0.0000', 'Discriminator loss 0.0687', 'Discriminator accuracy 0.9863', 'Total loss: 4.8449', 'for batch', 0)
('GAN loss 4.0630 ', 'GAN acc 0.0000', 'Discriminator loss 0.0727', 'Discriminator accuracy 0.9824', 'Total loss: 4.1357', 'for batch', 1)
('GAN loss 3.8276 ', 'GAN acc 0.0000', 'Discriminator loss 0.0239', 'Discriminator accuracy 0.9941', 'Total loss: 3.8515', 'for batch', 2)
('GAN loss 3.5391 ', 'GAN acc 0.0000', 'Discriminator loss 0.0466', 'Discriminator accuracy 0.9902', 'Total loss: 3.5857', 'for batch', 3)
('GAN loss 3.4905 ', 'GAN acc 0.0000', 'Discriminator loss 0.0353', 'Discriminator accuracy 0.9902', 'Total loss: 3.5257', 'for batch', 4)
('GAN loss 3.5352 ', 'GAN acc 0.0000', 'Discriminator loss 0.0697', 'Discriminator accuracy 0.9844', 'Total loss: 3.6049', 'for batch', 5)
('GAN loss 3.8384 ', 'GAN acc 0.0000', 'Discriminator loss 0.0379', 'Discriminator accuracy 0.9922', 'Total loss: 3.8762', 'for batch', 6)
('GAN loss 4.0259 ', 'GAN acc 0.0000', 'Discriminator loss 0.0339', 'Discriminator accuracy 0.9922', 'Total loss: 4.0598', 'for batch', 7)
('GAN loss 4.0559 ', 'GAN acc 0.0000', 'Discriminator loss 0.0511', 'Discriminator accuracy 0.9883', 'Total loss: 4.1070', 'for batch', 8)
('GAN loss 4.1832 ', 'GAN acc 0.0000', 'Discriminator loss 0.0339', 'Discriminator accuracy 0.9941', 'Total loss: 4.2171', 'for batch', 9)
('GAN loss 4.0016 ', 'GAN acc 0.0000', 'Discriminator loss 0.0679', 'Discriminator accuracy 0.9863', 'Total loss: 4.0695', 'for batch', 10)
('GAN loss 3.7188 ', 'GAN acc 0.0000', 'Discriminator loss 0.0514', 'Discriminator accuracy 0.9883', 'Total loss: 3.7703', 'for batch', 11)
('GAN loss 3.8775 ', 'GAN acc 0.0000', 'Discriminator loss 0.0474', 'Discriminator accuracy 0.9922', 'Total loss: 3.9249', 'for batch', 12)
('GAN loss 4.2046 ', 'GAN acc 0.0000', 'Discriminator loss 0.0266', 'Discriminator accuracy 0.9961', 'Total loss: 4.2312', 'for batch', 13)
('GAN loss 4.0475 ', 'GAN acc 0.0000', 'Discriminator loss 0.0752', 'Discriminator accuracy 0.9863', 'Total loss: 4.1227', 'for batch', 14)
('GAN loss 3.7345 ', 'GAN acc 0.0000', 'Discriminator loss 0.0843', 'Discriminator accuracy 0.9824', 'Total loss: 3.8188', 'for batch', 15)
('GAN loss 3.8407 ', 'GAN acc 0.0000', 'Discriminator loss 0.0468', 'Discriminator accuracy 0.9902', 'Total loss: 3.8875', 'for batch', 16)
('GAN loss 4.0447 ', 'GAN acc 0.0000', 'Discriminator loss 0.0354', 'Discriminator accuracy 0.9922', 'Total loss: 4.0802', 'for batch', 17)
('GAN loss 4.2764 ', 'GAN acc 0.0000', 'Discriminator loss 0.0377', 'Discriminator accuracy 0.9922', 'Total loss: 4.3141', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9858771)
('DISCRIMINATOR_Imagem FAKE=', 0.014310409)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.671584')
----------------------------------
('Epoch', 21, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1907 ', 'GAN acc 0.0000', 'Discriminator loss 0.0454', 'Discriminator accuracy 0.9883', 'Total loss: 4.2362', 'for batch', 0)
('GAN loss 4.2328 ', 'GAN acc 0.0000', 'Discriminator loss 0.0357', 'Discriminator accuracy 0.9941', 'Total loss: 4.2685', 'for batch', 1)
('GAN loss 4.6111 ', 'GAN acc 0.0000', 'Discriminator loss 0.0094', 'Discriminator accuracy 1.0000', 'Total loss: 4.6206', 'for batch', 2)
('GAN loss 4.5226 ', 'GAN acc 0.0000', 'Discriminator loss 0.0413', 'Discriminator accuracy 0.9902', 'Total loss: 4.5639', 'for batch', 3)
('GAN loss 4.4336 ', 'GAN acc 0.0000', 'Discriminator loss 0.0204', 'Discriminator accuracy 0.9941', 'Total loss: 4.4540', 'for batch', 4)
('GAN loss 4.1976 ', 'GAN acc 0.0000', 'Discriminator loss 0.0726', 'Discriminator accuracy 0.9844', 'Total loss: 4.2702', 'for batch', 5)
('GAN loss 5.4638 ', 'GAN acc 0.0000', 'Discriminator loss 0.0283', 'Discriminator accuracy 0.9961', 'Total loss: 5.4921', 'for batch', 6)
('GAN loss 5.4204 ', 'GAN acc 0.0000', 'Discriminator loss 0.0166', 'Discriminator accuracy 0.9961', 'Total loss: 5.4370', 'for batch', 7)
('GAN loss 4.8652 ', 'GAN acc 0.0000', 'Discriminator loss 0.0576', 'Discriminator accuracy 0.9863', 'Total loss: 4.9228', 'for batch', 8)
('GAN loss 4.5802 ', 'GAN acc 0.0000', 'Discriminator loss 0.0327', 'Discriminator accuracy 0.9941', 'Total loss: 4.6130', 'for batch', 9)
('GAN loss 4.2428 ', 'GAN acc 0.0000', 'Discriminator loss 0.0639', 'Discriminator accuracy 0.9863', 'Total loss: 4.3067', 'for batch', 10)
('GAN loss 3.7209 ', 'GAN acc 0.0000', 'Discriminator loss 0.0550', 'Discriminator accuracy 0.9824', 'Total loss: 3.7759', 'for batch', 11)
('GAN loss 3.8951 ', 'GAN acc 0.0000', 'Discriminator loss 0.0435', 'Discriminator accuracy 0.9922', 'Total loss: 3.9386', 'for batch', 12)
('GAN loss 4.2963 ', 'GAN acc 0.0000', 'Discriminator loss 0.0257', 'Discriminator accuracy 0.9961', 'Total loss: 4.3220', 'for batch', 13)
('GAN loss 4.2386 ', 'GAN acc 0.0000', 'Discriminator loss 0.0666', 'Discriminator accuracy 0.9863', 'Total loss: 4.3053', 'for batch', 14)
('GAN loss 3.9693 ', 'GAN acc 0.0000', 'Discriminator loss 0.0733', 'Discriminator accuracy 0.9824', 'Total loss: 4.0426', 'for batch', 15)
('GAN loss 3.8634 ', 'GAN acc 0.0000', 'Discriminator loss 0.0447', 'Discriminator accuracy 0.9902', 'Total loss: 3.9080', 'for batch', 16)
('GAN loss 3.8658 ', 'GAN acc 0.0000', 'Discriminator loss 0.0328', 'Discriminator accuracy 0.9902', 'Total loss: 3.8986', 'for batch', 17)
('GAN loss 4.0689 ', 'GAN acc 0.0000', 'Discriminator loss 0.0382', 'Discriminator accuracy 0.9922', 'Total loss: 4.1071', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98906922)
('DISCRIMINATOR_Imagem FAKE=', 0.017498802)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.157108')
----------------------------------
('Epoch', 22, 'of', 50)
('Number of batches', 19)
('GAN loss 4.3095 ', 'GAN acc 0.0000', 'Discriminator loss 0.0229', 'Discriminator accuracy 0.9941', 'Total loss: 4.3324', 'for batch', 0)
('GAN loss 4.5243 ', 'GAN acc 0.0000', 'Discriminator loss 0.0293', 'Discriminator accuracy 0.9941', 'Total loss: 4.5536', 'for batch', 1)
('GAN loss 4.7098 ', 'GAN acc 0.0000', 'Discriminator loss 0.0096', 'Discriminator accuracy 0.9980', 'Total loss: 4.7194', 'for batch', 2)
('GAN loss 4.6767 ', 'GAN acc 0.0000', 'Discriminator loss 0.0291', 'Discriminator accuracy 0.9941', 'Total loss: 4.7058', 'for batch', 3)
('GAN loss 4.7277 ', 'GAN acc 0.0000', 'Discriminator loss 0.0108', 'Discriminator accuracy 0.9961', 'Total loss: 4.7385', 'for batch', 4)
('GAN loss 4.2900 ', 'GAN acc 0.0000', 'Discriminator loss 0.0612', 'Discriminator accuracy 0.9844', 'Total loss: 4.3512', 'for batch', 5)
('GAN loss 4.4485 ', 'GAN acc 0.0000', 'Discriminator loss 0.0170', 'Discriminator accuracy 0.9961', 'Total loss: 4.4655', 'for batch', 6)
('GAN loss 4.7042 ', 'GAN acc 0.0000', 'Discriminator loss 0.0161', 'Discriminator accuracy 0.9980', 'Total loss: 4.7203', 'for batch', 7)
('GAN loss 4.7039 ', 'GAN acc 0.0000', 'Discriminator loss 0.0431', 'Discriminator accuracy 0.9922', 'Total loss: 4.7470', 'for batch', 8)
('GAN loss 4.6398 ', 'GAN acc 0.0000', 'Discriminator loss 0.0265', 'Discriminator accuracy 0.9941', 'Total loss: 4.6663', 'for batch', 9)
('GAN loss 4.3205 ', 'GAN acc 0.0000', 'Discriminator loss 0.0493', 'Discriminator accuracy 0.9902', 'Total loss: 4.3698', 'for batch', 10)
('GAN loss 4.6423 ', 'GAN acc 0.0000', 'Discriminator loss 0.0725', 'Discriminator accuracy 0.9863', 'Total loss: 4.7148', 'for batch', 11)
('GAN loss 4.9802 ', 'GAN acc 0.0000', 'Discriminator loss 0.0401', 'Discriminator accuracy 0.9922', 'Total loss: 5.0203', 'for batch', 12)
('GAN loss 4.8481 ', 'GAN acc 0.0000', 'Discriminator loss 0.0260', 'Discriminator accuracy 0.9941', 'Total loss: 4.8742', 'for batch', 13)
('GAN loss 4.2028 ', 'GAN acc 0.0000', 'Discriminator loss 0.0831', 'Discriminator accuracy 0.9824', 'Total loss: 4.2860', 'for batch', 14)
('GAN loss 3.7057 ', 'GAN acc 0.0000', 'Discriminator loss 0.0867', 'Discriminator accuracy 0.9805', 'Total loss: 3.7924', 'for batch', 15)
('GAN loss 3.6646 ', 'GAN acc 0.0000', 'Discriminator loss 0.0574', 'Discriminator accuracy 0.9902', 'Total loss: 3.7219', 'for batch', 16)
('GAN loss 3.5441 ', 'GAN acc 0.0000', 'Discriminator loss 0.0391', 'Discriminator accuracy 0.9922', 'Total loss: 3.5832', 'for batch', 17)
('GAN loss 3.5987 ', 'GAN acc 0.0000', 'Discriminator loss 0.0424', 'Discriminator accuracy 0.9922', 'Total loss: 3.6411', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99002188)
('DISCRIMINATOR_Imagem FAKE=', 0.028729098)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.712886')
----------------------------------
('Epoch', 23, 'of', 50)
('Number of batches', 19)
('GAN loss 3.8756 ', 'GAN acc 0.0000', 'Discriminator loss 0.0412', 'Discriminator accuracy 0.9922', 'Total loss: 3.9168', 'for batch', 0)
('GAN loss 4.0712 ', 'GAN acc 0.0000', 'Discriminator loss 0.0350', 'Discriminator accuracy 0.9941', 'Total loss: 4.1062', 'for batch', 1)
('GAN loss 4.4054 ', 'GAN acc 0.0000', 'Discriminator loss 0.0107', 'Discriminator accuracy 1.0000', 'Total loss: 4.4160', 'for batch', 2)
('GAN loss 4.4171 ', 'GAN acc 0.0000', 'Discriminator loss 0.0363', 'Discriminator accuracy 0.9922', 'Total loss: 4.4533', 'for batch', 3)
('GAN loss 4.5776 ', 'GAN acc 0.0000', 'Discriminator loss 0.0145', 'Discriminator accuracy 0.9961', 'Total loss: 4.5921', 'for batch', 4)
('GAN loss 3.6401 ', 'GAN acc 0.0000', 'Discriminator loss 0.0644', 'Discriminator accuracy 0.9844', 'Total loss: 3.7045', 'for batch', 5)
('GAN loss 6.3903 ', 'GAN acc 0.0000', 'Discriminator loss 0.0520', 'Discriminator accuracy 0.9961', 'Total loss: 6.4422', 'for batch', 6)
('GAN loss 7.0754 ', 'GAN acc 0.0000', 'Discriminator loss 0.0170', 'Discriminator accuracy 0.9961', 'Total loss: 7.0924', 'for batch', 7)
('GAN loss 6.7583 ', 'GAN acc 0.0000', 'Discriminator loss 0.0805', 'Discriminator accuracy 0.9863', 'Total loss: 6.8388', 'for batch', 8)
('GAN loss 6.2880 ', 'GAN acc 0.0000', 'Discriminator loss 0.0356', 'Discriminator accuracy 0.9922', 'Total loss: 6.3236', 'for batch', 9)
('GAN loss 5.6221 ', 'GAN acc 0.0000', 'Discriminator loss 0.0743', 'Discriminator accuracy 0.9863', 'Total loss: 5.6965', 'for batch', 10)
('GAN loss 4.8621 ', 'GAN acc 0.0000', 'Discriminator loss 0.0718', 'Discriminator accuracy 0.9805', 'Total loss: 4.9339', 'for batch', 11)
('GAN loss 4.3585 ', 'GAN acc 0.0000', 'Discriminator loss 0.0378', 'Discriminator accuracy 0.9922', 'Total loss: 4.3963', 'for batch', 12)
('GAN loss 4.1182 ', 'GAN acc 0.0000', 'Discriminator loss 0.0171', 'Discriminator accuracy 0.9980', 'Total loss: 4.1352', 'for batch', 13)
('GAN loss 3.6643 ', 'GAN acc 0.0000', 'Discriminator loss 0.0683', 'Discriminator accuracy 0.9844', 'Total loss: 3.7325', 'for batch', 14)
('GAN loss 4.3094 ', 'GAN acc 0.0000', 'Discriminator loss 0.1035', 'Discriminator accuracy 0.9766', 'Total loss: 4.4128', 'for batch', 15)
('GAN loss 4.7277 ', 'GAN acc 0.0000', 'Discriminator loss 0.0501', 'Discriminator accuracy 0.9883', 'Total loss: 4.7778', 'for batch', 16)
('GAN loss 4.3169 ', 'GAN acc 0.0000', 'Discriminator loss 0.0435', 'Discriminator accuracy 0.9902', 'Total loss: 4.3604', 'for batch', 17)
('GAN loss 4.1001 ', 'GAN acc 0.0000', 'Discriminator loss 0.0418', 'Discriminator accuracy 0.9922', 'Total loss: 4.1419', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98345387)
('DISCRIMINATOR_Imagem FAKE=', 0.016669502)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.201995')
----------------------------------
('Epoch', 24, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0007 ', 'GAN acc 0.0000', 'Discriminator loss 0.0535', 'Discriminator accuracy 0.9883', 'Total loss: 4.0542', 'for batch', 0)
('GAN loss 3.8963 ', 'GAN acc 0.0000', 'Discriminator loss 0.0388', 'Discriminator accuracy 0.9902', 'Total loss: 3.9350', 'for batch', 1)
('GAN loss 4.0365 ', 'GAN acc 0.0000', 'Discriminator loss 0.0123', 'Discriminator accuracy 1.0000', 'Total loss: 4.0488', 'for batch', 2)
('GAN loss 3.9885 ', 'GAN acc 0.0000', 'Discriminator loss 0.0414', 'Discriminator accuracy 0.9883', 'Total loss: 4.0299', 'for batch', 3)
('GAN loss 3.9701 ', 'GAN acc 0.0000', 'Discriminator loss 0.0197', 'Discriminator accuracy 0.9961', 'Total loss: 3.9898', 'for batch', 4)
('GAN loss 3.8793 ', 'GAN acc 0.0000', 'Discriminator loss 0.0589', 'Discriminator accuracy 0.9844', 'Total loss: 3.9383', 'for batch', 5)
('GAN loss 3.9899 ', 'GAN acc 0.0000', 'Discriminator loss 0.0237', 'Discriminator accuracy 0.9961', 'Total loss: 4.0136', 'for batch', 6)
('GAN loss 4.1593 ', 'GAN acc 0.0000', 'Discriminator loss 0.0179', 'Discriminator accuracy 0.9980', 'Total loss: 4.1771', 'for batch', 7)
('GAN loss 4.2444 ', 'GAN acc 0.0000', 'Discriminator loss 0.0428', 'Discriminator accuracy 0.9922', 'Total loss: 4.2872', 'for batch', 8)
('GAN loss 4.3343 ', 'GAN acc 0.0000', 'Discriminator loss 0.0266', 'Discriminator accuracy 0.9941', 'Total loss: 4.3608', 'for batch', 9)
('GAN loss 4.1773 ', 'GAN acc 0.0000', 'Discriminator loss 0.0543', 'Discriminator accuracy 0.9863', 'Total loss: 4.2316', 'for batch', 10)
('GAN loss 3.9835 ', 'GAN acc 0.0000', 'Discriminator loss 0.0436', 'Discriminator accuracy 0.9902', 'Total loss: 4.0271', 'for batch', 11)
('GAN loss 3.8723 ', 'GAN acc 0.0000', 'Discriminator loss 0.0378', 'Discriminator accuracy 0.9922', 'Total loss: 3.9102', 'for batch', 12)
('GAN loss 4.0694 ', 'GAN acc 0.0000', 'Discriminator loss 0.0194', 'Discriminator accuracy 0.9980', 'Total loss: 4.0889', 'for batch', 13)
('GAN loss 3.9302 ', 'GAN acc 0.0000', 'Discriminator loss 0.0600', 'Discriminator accuracy 0.9863', 'Total loss: 3.9902', 'for batch', 14)
('GAN loss 3.5097 ', 'GAN acc 0.0000', 'Discriminator loss 0.0705', 'Discriminator accuracy 0.9844', 'Total loss: 3.5802', 'for batch', 15)
('GAN loss 3.7352 ', 'GAN acc 0.0000', 'Discriminator loss 0.0357', 'Discriminator accuracy 0.9902', 'Total loss: 3.7709', 'for batch', 16)
('GAN loss 4.5038 ', 'GAN acc 0.0000', 'Discriminator loss 0.0283', 'Discriminator accuracy 0.9961', 'Total loss: 4.5321', 'for batch', 17)
('GAN loss 4.7879 ', 'GAN acc 0.0000', 'Discriminator loss 0.0311', 'Discriminator accuracy 0.9941', 'Total loss: 4.8190', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99110347)
('DISCRIMINATOR_Imagem FAKE=', 0.0093710031)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.750957')
----------------------------------
('Epoch', 25, 'of', 50)
('Number of batches', 19)
('GAN loss 4.6930 ', 'GAN acc 0.0000', 'Discriminator loss 0.0348', 'Discriminator accuracy 0.9922', 'Total loss: 4.7278', 'for batch', 0)
('GAN loss 4.5343 ', 'GAN acc 0.0000', 'Discriminator loss 0.0343', 'Discriminator accuracy 0.9922', 'Total loss: 4.5686', 'for batch', 1)
('GAN loss 4.8410 ', 'GAN acc 0.0000', 'Discriminator loss 0.0059', 'Discriminator accuracy 1.0000', 'Total loss: 4.8469', 'for batch', 2)
('GAN loss 4.7994 ', 'GAN acc 0.0000', 'Discriminator loss 0.0289', 'Discriminator accuracy 0.9922', 'Total loss: 4.8283', 'for batch', 3)
('GAN loss 4.8923 ', 'GAN acc 0.0000', 'Discriminator loss 0.0083', 'Discriminator accuracy 0.9980', 'Total loss: 4.9006', 'for batch', 4)
('GAN loss 4.5561 ', 'GAN acc 0.0000', 'Discriminator loss 0.0622', 'Discriminator accuracy 0.9883', 'Total loss: 4.6183', 'for batch', 5)
('GAN loss 5.6660 ', 'GAN acc 0.0000', 'Discriminator loss 0.0306', 'Discriminator accuracy 0.9961', 'Total loss: 5.6966', 'for batch', 6)
('GAN loss 6.0494 ', 'GAN acc 0.0000', 'Discriminator loss 0.0155', 'Discriminator accuracy 0.9980', 'Total loss: 6.0649', 'for batch', 7)
('GAN loss 5.1256 ', 'GAN acc 0.0000', 'Discriminator loss 0.0572', 'Discriminator accuracy 0.9902', 'Total loss: 5.1828', 'for batch', 8)
('GAN loss 4.6947 ', 'GAN acc 0.0000', 'Discriminator loss 0.0341', 'Discriminator accuracy 0.9941', 'Total loss: 4.7288', 'for batch', 9)
('GAN loss 4.4345 ', 'GAN acc 0.0000', 'Discriminator loss 0.0659', 'Discriminator accuracy 0.9883', 'Total loss: 4.5004', 'for batch', 10)
('GAN loss 4.1470 ', 'GAN acc 0.0000', 'Discriminator loss 0.0548', 'Discriminator accuracy 0.9902', 'Total loss: 4.2017', 'for batch', 11)
('GAN loss 4.1249 ', 'GAN acc 0.0000', 'Discriminator loss 0.0412', 'Discriminator accuracy 0.9922', 'Total loss: 4.1662', 'for batch', 12)
('GAN loss 4.2892 ', 'GAN acc 0.0000', 'Discriminator loss 0.0185', 'Discriminator accuracy 0.9980', 'Total loss: 4.3077', 'for batch', 13)
('GAN loss 4.0303 ', 'GAN acc 0.0000', 'Discriminator loss 0.0638', 'Discriminator accuracy 0.9863', 'Total loss: 4.0940', 'for batch', 14)
('GAN loss 3.8877 ', 'GAN acc 0.0000', 'Discriminator loss 0.0780', 'Discriminator accuracy 0.9844', 'Total loss: 3.9657', 'for batch', 15)
('GAN loss 3.6439 ', 'GAN acc 0.0000', 'Discriminator loss 0.0445', 'Discriminator accuracy 0.9902', 'Total loss: 3.6884', 'for batch', 16)
('GAN loss 3.8370 ', 'GAN acc 0.0000', 'Discriminator loss 0.0295', 'Discriminator accuracy 0.9961', 'Total loss: 3.8665', 'for batch', 17)
('GAN loss 3.9574 ', 'GAN acc 0.0000', 'Discriminator loss 0.0365', 'Discriminator accuracy 0.9922', 'Total loss: 3.9939', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99232435)
('DISCRIMINATOR_Imagem FAKE=', 0.018593568)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.176177')
----------------------------------
('Epoch', 26, 'of', 50)
('Number of batches', 19)
('GAN loss 4.3677 ', 'GAN acc 0.0000', 'Discriminator loss 0.0215', 'Discriminator accuracy 0.9961', 'Total loss: 4.3892', 'for batch', 0)
('GAN loss 4.5893 ', 'GAN acc 0.0000', 'Discriminator loss 0.0338', 'Discriminator accuracy 0.9941', 'Total loss: 4.6231', 'for batch', 1)
('GAN loss 4.9372 ', 'GAN acc 0.0000', 'Discriminator loss 0.0056', 'Discriminator accuracy 1.0000', 'Total loss: 4.9428', 'for batch', 2)
('GAN loss 4.8998 ', 'GAN acc 0.0000', 'Discriminator loss 0.0226', 'Discriminator accuracy 0.9941', 'Total loss: 4.9224', 'for batch', 3)
('GAN loss 4.8637 ', 'GAN acc 0.0000', 'Discriminator loss 0.0087', 'Discriminator accuracy 0.9961', 'Total loss: 4.8724', 'for batch', 4)
('GAN loss 4.6231 ', 'GAN acc 0.0000', 'Discriminator loss 0.0625', 'Discriminator accuracy 0.9883', 'Total loss: 4.6856', 'for batch', 5)
('GAN loss 4.4200 ', 'GAN acc 0.0000', 'Discriminator loss 0.0232', 'Discriminator accuracy 0.9961', 'Total loss: 4.4432', 'for batch', 6)
('GAN loss 4.5848 ', 'GAN acc 0.0000', 'Discriminator loss 0.0154', 'Discriminator accuracy 0.9980', 'Total loss: 4.6003', 'for batch', 7)
('GAN loss 4.4570 ', 'GAN acc 0.0000', 'Discriminator loss 0.0455', 'Discriminator accuracy 0.9922', 'Total loss: 4.5025', 'for batch', 8)
('GAN loss 4.5500 ', 'GAN acc 0.0000', 'Discriminator loss 0.0251', 'Discriminator accuracy 0.9961', 'Total loss: 4.5751', 'for batch', 9)
('GAN loss 4.4202 ', 'GAN acc 0.0000', 'Discriminator loss 0.0474', 'Discriminator accuracy 0.9902', 'Total loss: 4.4675', 'for batch', 10)
('GAN loss 4.1153 ', 'GAN acc 0.0000', 'Discriminator loss 0.0426', 'Discriminator accuracy 0.9902', 'Total loss: 4.1580', 'for batch', 11)
('GAN loss 7.3511 ', 'GAN acc 0.0000', 'Discriminator loss 0.1307', 'Discriminator accuracy 0.9688', 'Total loss: 7.4818', 'for batch', 12)
('GAN loss 7.3996 ', 'GAN acc 0.0000', 'Discriminator loss 0.0199', 'Discriminator accuracy 0.9941', 'Total loss: 7.4196', 'for batch', 13)
('GAN loss 6.4372 ', 'GAN acc 0.0000', 'Discriminator loss 0.1240', 'Discriminator accuracy 0.9766', 'Total loss: 6.5611', 'for batch', 14)
('GAN loss 5.4156 ', 'GAN acc 0.0000', 'Discriminator loss 0.1268', 'Discriminator accuracy 0.9766', 'Total loss: 5.5424', 'for batch', 15)
('GAN loss 4.5451 ', 'GAN acc 0.0000', 'Discriminator loss 0.0571', 'Discriminator accuracy 0.9883', 'Total loss: 4.6022', 'for batch', 16)
('GAN loss 4.1072 ', 'GAN acc 0.0000', 'Discriminator loss 0.0422', 'Discriminator accuracy 0.9902', 'Total loss: 4.1494', 'for batch', 17)
('GAN loss 3.9155 ', 'GAN acc 0.0000', 'Discriminator loss 0.0426', 'Discriminator accuracy 0.9902', 'Total loss: 3.9580', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98416412)
('DISCRIMINATOR_Imagem FAKE=', 0.024236085)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.694599')
----------------------------------
('Epoch', 27, 'of', 50)
('Number of batches', 19)
('GAN loss 3.7742 ', 'GAN acc 0.0000', 'Discriminator loss 0.0389', 'Discriminator accuracy 0.9902', 'Total loss: 3.8131', 'for batch', 0)
('GAN loss 3.7301 ', 'GAN acc 0.0000', 'Discriminator loss 0.0429', 'Discriminator accuracy 0.9902', 'Total loss: 3.7730', 'for batch', 1)
('GAN loss 3.8138 ', 'GAN acc 0.0000', 'Discriminator loss 0.0191', 'Discriminator accuracy 0.9941', 'Total loss: 3.8329', 'for batch', 2)
('GAN loss 3.8913 ', 'GAN acc 0.0000', 'Discriminator loss 0.0350', 'Discriminator accuracy 0.9922', 'Total loss: 3.9263', 'for batch', 3)
('GAN loss 4.0058 ', 'GAN acc 0.0000', 'Discriminator loss 0.0199', 'Discriminator accuracy 0.9961', 'Total loss: 4.0257', 'for batch', 4)
('GAN loss 3.9568 ', 'GAN acc 0.0000', 'Discriminator loss 0.0595', 'Discriminator accuracy 0.9863', 'Total loss: 4.0163', 'for batch', 5)
('GAN loss 4.0765 ', 'GAN acc 0.0000', 'Discriminator loss 0.0206', 'Discriminator accuracy 0.9961', 'Total loss: 4.0971', 'for batch', 6)
('GAN loss 4.2839 ', 'GAN acc 0.0000', 'Discriminator loss 0.0173', 'Discriminator accuracy 0.9980', 'Total loss: 4.3012', 'for batch', 7)
('GAN loss 4.3422 ', 'GAN acc 0.0000', 'Discriminator loss 0.0451', 'Discriminator accuracy 0.9902', 'Total loss: 4.3873', 'for batch', 8)
('GAN loss 4.4015 ', 'GAN acc 0.0000', 'Discriminator loss 0.0248', 'Discriminator accuracy 0.9961', 'Total loss: 4.4263', 'for batch', 9)
('GAN loss 4.2953 ', 'GAN acc 0.0000', 'Discriminator loss 0.0471', 'Discriminator accuracy 0.9902', 'Total loss: 4.3424', 'for batch', 10)
('GAN loss 4.2261 ', 'GAN acc 0.0000', 'Discriminator loss 0.0432', 'Discriminator accuracy 0.9902', 'Total loss: 4.2693', 'for batch', 11)
('GAN loss 4.2103 ', 'GAN acc 0.0000', 'Discriminator loss 0.0313', 'Discriminator accuracy 0.9941', 'Total loss: 4.2416', 'for batch', 12)
('GAN loss 4.2795 ', 'GAN acc 0.0000', 'Discriminator loss 0.0159', 'Discriminator accuracy 0.9980', 'Total loss: 4.2954', 'for batch', 13)
('GAN loss 4.2148 ', 'GAN acc 0.0000', 'Discriminator loss 0.0587', 'Discriminator accuracy 0.9883', 'Total loss: 4.2736', 'for batch', 14)
('GAN loss 4.0544 ', 'GAN acc 0.0000', 'Discriminator loss 0.0731', 'Discriminator accuracy 0.9844', 'Total loss: 4.1276', 'for batch', 15)
('GAN loss 3.9704 ', 'GAN acc 0.0000', 'Discriminator loss 0.0422', 'Discriminator accuracy 0.9922', 'Total loss: 4.0126', 'for batch', 16)
('GAN loss 3.9485 ', 'GAN acc 0.0000', 'Discriminator loss 0.0309', 'Discriminator accuracy 0.9922', 'Total loss: 3.9794', 'for batch', 17)
('GAN loss 3.9958 ', 'GAN acc 0.0000', 'Discriminator loss 0.0347', 'Discriminator accuracy 0.9941', 'Total loss: 4.0305', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9919911)
('DISCRIMINATOR_Imagem FAKE=', 0.019096745)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.173699')
----------------------------------
('Epoch', 28, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0995 ', 'GAN acc 0.0000', 'Discriminator loss 0.0220', 'Discriminator accuracy 0.9941', 'Total loss: 4.1215', 'for batch', 0)
('GAN loss 4.1784 ', 'GAN acc 0.0000', 'Discriminator loss 0.0312', 'Discriminator accuracy 0.9941', 'Total loss: 4.2096', 'for batch', 1)
('GAN loss 4.4459 ', 'GAN acc 0.0000', 'Discriminator loss 0.0080', 'Discriminator accuracy 1.0000', 'Total loss: 4.4539', 'for batch', 2)
('GAN loss 4.5496 ', 'GAN acc 0.0000', 'Discriminator loss 0.0254', 'Discriminator accuracy 0.9941', 'Total loss: 4.5750', 'for batch', 3)
('GAN loss 4.6426 ', 'GAN acc 0.0000', 'Discriminator loss 0.0085', 'Discriminator accuracy 0.9980', 'Total loss: 4.6511', 'for batch', 4)
('GAN loss 4.5550 ', 'GAN acc 0.0000', 'Discriminator loss 0.0542', 'Discriminator accuracy 0.9883', 'Total loss: 4.6092', 'for batch', 5)
('GAN loss 4.5227 ', 'GAN acc 0.0000', 'Discriminator loss 0.0174', 'Discriminator accuracy 0.9961', 'Total loss: 4.5401', 'for batch', 6)
('GAN loss 4.6873 ', 'GAN acc 0.0000', 'Discriminator loss 0.0147', 'Discriminator accuracy 0.9980', 'Total loss: 4.7019', 'for batch', 7)
('GAN loss 4.6572 ', 'GAN acc 0.0000', 'Discriminator loss 0.0409', 'Discriminator accuracy 0.9922', 'Total loss: 4.6981', 'for batch', 8)
('GAN loss 4.6414 ', 'GAN acc 0.0000', 'Discriminator loss 0.0229', 'Discriminator accuracy 0.9961', 'Total loss: 4.6643', 'for batch', 9)
('GAN loss 4.5503 ', 'GAN acc 0.0000', 'Discriminator loss 0.0405', 'Discriminator accuracy 0.9922', 'Total loss: 4.5908', 'for batch', 10)
('GAN loss 4.7437 ', 'GAN acc 0.0000', 'Discriminator loss 0.0557', 'Discriminator accuracy 0.9844', 'Total loss: 4.7993', 'for batch', 11)
('GAN loss 8.3930 ', 'GAN acc 0.0000', 'Discriminator loss 0.1460', 'Discriminator accuracy 0.9570', 'Total loss: 8.5391', 'for batch', 12)
('GAN loss 8.2235 ', 'GAN acc 0.0000', 'Discriminator loss 0.0324', 'Discriminator accuracy 0.9941', 'Total loss: 8.2560', 'for batch', 13)
('GAN loss 6.8816 ', 'GAN acc 0.0000', 'Discriminator loss 0.1639', 'Discriminator accuracy 0.9727', 'Total loss: 7.0454', 'for batch', 14)
('GAN loss 5.3746 ', 'GAN acc 0.0000', 'Discriminator loss 0.1461', 'Discriminator accuracy 0.9727', 'Total loss: 5.5207', 'for batch', 15)
('GAN loss 4.4140 ', 'GAN acc 0.0000', 'Discriminator loss 0.0618', 'Discriminator accuracy 0.9844', 'Total loss: 4.4758', 'for batch', 16)
('GAN loss 3.8877 ', 'GAN acc 0.0000', 'Discriminator loss 0.0477', 'Discriminator accuracy 0.9883', 'Total loss: 3.9354', 'for batch', 17)
('GAN loss 3.6501 ', 'GAN acc 0.0000', 'Discriminator loss 0.0430', 'Discriminator accuracy 0.9902', 'Total loss: 3.6931', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98516428)
('DISCRIMINATOR_Imagem FAKE=', 0.026668347)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.668992')
----------------------------------
('Epoch', 29, 'of', 50)
('Number of batches', 19)
('GAN loss 3.6330 ', 'GAN acc 0.0000', 'Discriminator loss 0.0429', 'Discriminator accuracy 0.9902', 'Total loss: 3.6759', 'for batch', 0)
('GAN loss 3.6882 ', 'GAN acc 0.0000', 'Discriminator loss 0.0397', 'Discriminator accuracy 0.9902', 'Total loss: 3.7279', 'for batch', 1)
('GAN loss 3.8784 ', 'GAN acc 0.0000', 'Discriminator loss 0.0148', 'Discriminator accuracy 0.9980', 'Total loss: 3.8932', 'for batch', 2)
('GAN loss 3.9990 ', 'GAN acc 0.0000', 'Discriminator loss 0.0393', 'Discriminator accuracy 0.9902', 'Total loss: 4.0383', 'for batch', 3)
('GAN loss 4.1231 ', 'GAN acc 0.0000', 'Discriminator loss 0.0186', 'Discriminator accuracy 0.9961', 'Total loss: 4.1416', 'for batch', 4)
('GAN loss 4.0076 ', 'GAN acc 0.0000', 'Discriminator loss 0.0620', 'Discriminator accuracy 0.9844', 'Total loss: 4.0696', 'for batch', 5)
('GAN loss 4.1027 ', 'GAN acc 0.0000', 'Discriminator loss 0.0194', 'Discriminator accuracy 0.9961', 'Total loss: 4.1221', 'for batch', 6)
('GAN loss 4.2588 ', 'GAN acc 0.0000', 'Discriminator loss 0.0168', 'Discriminator accuracy 0.9980', 'Total loss: 4.2756', 'for batch', 7)
('GAN loss 4.2134 ', 'GAN acc 0.0000', 'Discriminator loss 0.0438', 'Discriminator accuracy 0.9883', 'Total loss: 4.2572', 'for batch', 8)
('GAN loss 4.2681 ', 'GAN acc 0.0000', 'Discriminator loss 0.0260', 'Discriminator accuracy 0.9961', 'Total loss: 4.2941', 'for batch', 9)
('GAN loss 4.1956 ', 'GAN acc 0.0000', 'Discriminator loss 0.0494', 'Discriminator accuracy 0.9863', 'Total loss: 4.2450', 'for batch', 10)
('GAN loss 4.0911 ', 'GAN acc 0.0000', 'Discriminator loss 0.0448', 'Discriminator accuracy 0.9902', 'Total loss: 4.1359', 'for batch', 11)
('GAN loss 4.0815 ', 'GAN acc 0.0000', 'Discriminator loss 0.0375', 'Discriminator accuracy 0.9922', 'Total loss: 4.1190', 'for batch', 12)
('GAN loss 4.2645 ', 'GAN acc 0.0000', 'Discriminator loss 0.0181', 'Discriminator accuracy 0.9980', 'Total loss: 4.2826', 'for batch', 13)
('GAN loss 4.2209 ', 'GAN acc 0.0000', 'Discriminator loss 0.0595', 'Discriminator accuracy 0.9863', 'Total loss: 4.2805', 'for batch', 14)
('GAN loss 4.0769 ', 'GAN acc 0.0000', 'Discriminator loss 0.0687', 'Discriminator accuracy 0.9844', 'Total loss: 4.1456', 'for batch', 15)
('GAN loss 3.9640 ', 'GAN acc 0.0000', 'Discriminator loss 0.0434', 'Discriminator accuracy 0.9902', 'Total loss: 4.0074', 'for batch', 16)
('GAN loss 3.9432 ', 'GAN acc 0.0000', 'Discriminator loss 0.0306', 'Discriminator accuracy 0.9922', 'Total loss: 3.9738', 'for batch', 17)
('GAN loss 4.0238 ', 'GAN acc 0.0000', 'Discriminator loss 0.0345', 'Discriminator accuracy 0.9922', 'Total loss: 4.0584', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99179786)
('DISCRIMINATOR_Imagem FAKE=', 0.019389924)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.180299')
----------------------------------
('Epoch', 30, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1134 ', 'GAN acc 0.0000', 'Discriminator loss 0.0216', 'Discriminator accuracy 0.9961', 'Total loss: 4.1350', 'for batch', 0)
('GAN loss 4.2454 ', 'GAN acc 0.0000', 'Discriminator loss 0.0302', 'Discriminator accuracy 0.9941', 'Total loss: 4.2756', 'for batch', 1)
('GAN loss 4.5031 ', 'GAN acc 0.0000', 'Discriminator loss 0.0084', 'Discriminator accuracy 1.0000', 'Total loss: 4.5114', 'for batch', 2)
('GAN loss 4.5701 ', 'GAN acc 0.0000', 'Discriminator loss 0.0278', 'Discriminator accuracy 0.9922', 'Total loss: 4.5979', 'for batch', 3)
('GAN loss 4.6833 ', 'GAN acc 0.0000', 'Discriminator loss 0.0078', 'Discriminator accuracy 0.9980', 'Total loss: 4.6911', 'for batch', 4)
('GAN loss 4.4706 ', 'GAN acc 0.0000', 'Discriminator loss 0.0560', 'Discriminator accuracy 0.9883', 'Total loss: 4.5267', 'for batch', 5)
('GAN loss 4.4904 ', 'GAN acc 0.0000', 'Discriminator loss 0.0143', 'Discriminator accuracy 0.9961', 'Total loss: 4.5047', 'for batch', 6)
('GAN loss 4.6148 ', 'GAN acc 0.0000', 'Discriminator loss 0.0154', 'Discriminator accuracy 0.9980', 'Total loss: 4.6303', 'for batch', 7)
('GAN loss 4.5825 ', 'GAN acc 0.0000', 'Discriminator loss 0.0418', 'Discriminator accuracy 0.9922', 'Total loss: 4.6243', 'for batch', 8)
('GAN loss 4.6118 ', 'GAN acc 0.0000', 'Discriminator loss 0.0241', 'Discriminator accuracy 0.9961', 'Total loss: 4.6359', 'for batch', 9)
('GAN loss 4.5545 ', 'GAN acc 0.0000', 'Discriminator loss 0.0390', 'Discriminator accuracy 0.9922', 'Total loss: 4.5936', 'for batch', 10)
('GAN loss 4.3389 ', 'GAN acc 0.0000', 'Discriminator loss 0.0374', 'Discriminator accuracy 0.9902', 'Total loss: 4.3763', 'for batch', 11)
('GAN loss 4.3072 ', 'GAN acc 0.0000', 'Discriminator loss 0.0283', 'Discriminator accuracy 0.9941', 'Total loss: 4.3355', 'for batch', 12)
('GAN loss 4.4469 ', 'GAN acc 0.0000', 'Discriminator loss 0.0165', 'Discriminator accuracy 0.9980', 'Total loss: 4.4634', 'for batch', 13)
('GAN loss 4.4136 ', 'GAN acc 0.0000', 'Discriminator loss 0.0557', 'Discriminator accuracy 0.9883', 'Total loss: 4.4693', 'for batch', 14)
('GAN loss 4.1381 ', 'GAN acc 0.0000', 'Discriminator loss 0.0663', 'Discriminator accuracy 0.9844', 'Total loss: 4.2043', 'for batch', 15)
('GAN loss 3.9720 ', 'GAN acc 0.0000', 'Discriminator loss 0.0387', 'Discriminator accuracy 0.9922', 'Total loss: 4.0107', 'for batch', 16)
('GAN loss 4.2005 ', 'GAN acc 0.0000', 'Discriminator loss 0.0282', 'Discriminator accuracy 0.9961', 'Total loss: 4.2288', 'for batch', 17)
('GAN loss 4.3608 ', 'GAN acc 0.0000', 'Discriminator loss 0.0348', 'Discriminator accuracy 0.9941', 'Total loss: 4.3956', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99331969)
('DISCRIMINATOR_Imagem FAKE=', 0.012918377)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.678026')
----------------------------------
('Epoch', 31, 'of', 50)
('Number of batches', 19)
('GAN loss 4.5845 ', 'GAN acc 0.0000', 'Discriminator loss 0.0170', 'Discriminator accuracy 0.9980', 'Total loss: 4.6015', 'for batch', 0)
('GAN loss 4.6727 ', 'GAN acc 0.0000', 'Discriminator loss 0.0276', 'Discriminator accuracy 0.9941', 'Total loss: 4.7003', 'for batch', 1)
('GAN loss 4.8885 ', 'GAN acc 0.0000', 'Discriminator loss 0.0052', 'Discriminator accuracy 1.0000', 'Total loss: 4.8937', 'for batch', 2)
('GAN loss 4.5323 ', 'GAN acc 0.0000', 'Discriminator loss 0.0285', 'Discriminator accuracy 0.9941', 'Total loss: 4.5609', 'for batch', 3)
('GAN loss 7.1355 ', 'GAN acc 0.0000', 'Discriminator loss 0.3825', 'Discriminator accuracy 0.7598', 'Total loss: 7.5179', 'for batch', 4)
('GAN loss 10.0056 ', 'GAN acc 0.0000', 'Discriminator loss 0.1020', 'Discriminator accuracy 0.9785', 'Total loss: 10.1076', 'for batch', 5)
('GAN loss 7.3929 ', 'GAN acc 0.0000', 'Discriminator loss 0.0484', 'Discriminator accuracy 0.9902', 'Total loss: 7.4413', 'for batch', 6)
('GAN loss 5.2686 ', 'GAN acc 0.0000', 'Discriminator loss 0.0625', 'Discriminator accuracy 0.9902', 'Total loss: 5.3312', 'for batch', 7)
('GAN loss 4.6120 ', 'GAN acc 0.0000', 'Discriminator loss 0.0885', 'Discriminator accuracy 0.9785', 'Total loss: 4.7004', 'for batch', 8)
('GAN loss 4.1076 ', 'GAN acc 0.0000', 'Discriminator loss 0.0565', 'Discriminator accuracy 0.9863', 'Total loss: 4.1641', 'for batch', 9)
('GAN loss 3.7272 ', 'GAN acc 0.0000', 'Discriminator loss 0.0897', 'Discriminator accuracy 0.9824', 'Total loss: 3.8168', 'for batch', 10)
('GAN loss 3.4751 ', 'GAN acc 0.0000', 'Discriminator loss 0.0599', 'Discriminator accuracy 0.9844', 'Total loss: 3.5350', 'for batch', 11)
('GAN loss 3.4958 ', 'GAN acc 0.0000', 'Discriminator loss 0.0493', 'Discriminator accuracy 0.9922', 'Total loss: 3.5451', 'for batch', 12)
('GAN loss 3.6360 ', 'GAN acc 0.0000', 'Discriminator loss 0.0356', 'Discriminator accuracy 0.9922', 'Total loss: 3.6716', 'for batch', 13)
('GAN loss 3.6940 ', 'GAN acc 0.0000', 'Discriminator loss 0.0776', 'Discriminator accuracy 0.9844', 'Total loss: 3.7716', 'for batch', 14)
('GAN loss 3.6540 ', 'GAN acc 0.0000', 'Discriminator loss 0.0802', 'Discriminator accuracy 0.9824', 'Total loss: 3.7342', 'for batch', 15)
('GAN loss 3.6912 ', 'GAN acc 0.0000', 'Discriminator loss 0.0465', 'Discriminator accuracy 0.9902', 'Total loss: 3.7377', 'for batch', 16)
('GAN loss 3.7483 ', 'GAN acc 0.0000', 'Discriminator loss 0.0397', 'Discriminator accuracy 0.9902', 'Total loss: 3.7880', 'for batch', 17)
('GAN loss 3.8740 ', 'GAN acc 0.0000', 'Discriminator loss 0.0397', 'Discriminator accuracy 0.9902', 'Total loss: 3.9138', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98742652)
('DISCRIMINATOR_Imagem FAKE=', 0.02006348)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.127714')
----------------------------------
('Epoch', 32, 'of', 50)
('Number of batches', 19)
('GAN loss 3.9655 ', 'GAN acc 0.0000', 'Discriminator loss 0.0495', 'Discriminator accuracy 0.9883', 'Total loss: 4.0149', 'for batch', 0)
('GAN loss 4.0565 ', 'GAN acc 0.0000', 'Discriminator loss 0.0410', 'Discriminator accuracy 0.9922', 'Total loss: 4.0976', 'for batch', 1)
('GAN loss 4.2833 ', 'GAN acc 0.0000', 'Discriminator loss 0.0097', 'Discriminator accuracy 1.0000', 'Total loss: 4.2930', 'for batch', 2)
('GAN loss 4.3465 ', 'GAN acc 0.0000', 'Discriminator loss 0.0416', 'Discriminator accuracy 0.9902', 'Total loss: 4.3881', 'for batch', 3)
('GAN loss 4.3324 ', 'GAN acc 0.0000', 'Discriminator loss 0.0215', 'Discriminator accuracy 0.9922', 'Total loss: 4.3540', 'for batch', 4)
('GAN loss 4.1443 ', 'GAN acc 0.0000', 'Discriminator loss 0.0539', 'Discriminator accuracy 0.9883', 'Total loss: 4.1982', 'for batch', 5)
('GAN loss 4.4273 ', 'GAN acc 0.0000', 'Discriminator loss 0.0223', 'Discriminator accuracy 0.9961', 'Total loss: 4.4496', 'for batch', 6)
('GAN loss 4.7110 ', 'GAN acc 0.0000', 'Discriminator loss 0.0154', 'Discriminator accuracy 0.9980', 'Total loss: 4.7263', 'for batch', 7)
('GAN loss 4.6687 ', 'GAN acc 0.0000', 'Discriminator loss 0.0412', 'Discriminator accuracy 0.9922', 'Total loss: 4.7099', 'for batch', 8)
('GAN loss 4.7097 ', 'GAN acc 0.0000', 'Discriminator loss 0.0315', 'Discriminator accuracy 0.9941', 'Total loss: 4.7412', 'for batch', 9)
('GAN loss 4.5821 ', 'GAN acc 0.0000', 'Discriminator loss 0.0564', 'Discriminator accuracy 0.9883', 'Total loss: 4.6386', 'for batch', 10)
('GAN loss 4.3239 ', 'GAN acc 0.0000', 'Discriminator loss 0.0405', 'Discriminator accuracy 0.9883', 'Total loss: 4.3644', 'for batch', 11)
('GAN loss 4.2363 ', 'GAN acc 0.0000', 'Discriminator loss 0.0346', 'Discriminator accuracy 0.9922', 'Total loss: 4.2709', 'for batch', 12)
('GAN loss 4.3536 ', 'GAN acc 0.0000', 'Discriminator loss 0.0212', 'Discriminator accuracy 0.9961', 'Total loss: 4.3747', 'for batch', 13)
('GAN loss 4.2927 ', 'GAN acc 0.0000', 'Discriminator loss 0.0643', 'Discriminator accuracy 0.9863', 'Total loss: 4.3570', 'for batch', 14)
('GAN loss 4.1273 ', 'GAN acc 0.0000', 'Discriminator loss 0.0752', 'Discriminator accuracy 0.9844', 'Total loss: 4.2025', 'for batch', 15)
('GAN loss 4.2853 ', 'GAN acc 0.0000', 'Discriminator loss 0.0443', 'Discriminator accuracy 0.9902', 'Total loss: 4.3296', 'for batch', 16)
('GAN loss 4.3589 ', 'GAN acc 0.0000', 'Discriminator loss 0.0316', 'Discriminator accuracy 0.9922', 'Total loss: 4.3905', 'for batch', 17)
('GAN loss 4.2420 ', 'GAN acc 0.0000', 'Discriminator loss 0.0377', 'Discriminator accuracy 0.9941', 'Total loss: 4.2798', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98953718)
('DISCRIMINATOR_Imagem FAKE=', 0.011679322)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.726858')
----------------------------------
('Epoch', 33, 'of', 50)
('Number of batches', 19)
('GAN loss 4.4494 ', 'GAN acc 0.0000', 'Discriminator loss 0.0311', 'Discriminator accuracy 0.9922', 'Total loss: 4.4805', 'for batch', 0)
('GAN loss 4.3950 ', 'GAN acc 0.0000', 'Discriminator loss 0.0318', 'Discriminator accuracy 0.9941', 'Total loss: 4.4268', 'for batch', 1)
('GAN loss 4.5820 ', 'GAN acc 0.0000', 'Discriminator loss 0.0095', 'Discriminator accuracy 0.9980', 'Total loss: 4.5915', 'for batch', 2)
('GAN loss 4.6558 ', 'GAN acc 0.0000', 'Discriminator loss 0.0382', 'Discriminator accuracy 0.9902', 'Total loss: 4.6941', 'for batch', 3)
('GAN loss 4.7731 ', 'GAN acc 0.0000', 'Discriminator loss 0.0115', 'Discriminator accuracy 0.9980', 'Total loss: 4.7846', 'for batch', 4)
('GAN loss 4.5709 ', 'GAN acc 0.0000', 'Discriminator loss 0.0574', 'Discriminator accuracy 0.9883', 'Total loss: 4.6283', 'for batch', 5)
('GAN loss 4.6964 ', 'GAN acc 0.0000', 'Discriminator loss 0.0165', 'Discriminator accuracy 0.9961', 'Total loss: 4.7128', 'for batch', 6)
('GAN loss 4.7843 ', 'GAN acc 0.0000', 'Discriminator loss 0.0151', 'Discriminator accuracy 0.9980', 'Total loss: 4.7994', 'for batch', 7)
('GAN loss 4.7174 ', 'GAN acc 0.0000', 'Discriminator loss 0.0437', 'Discriminator accuracy 0.9922', 'Total loss: 4.7611', 'for batch', 8)
('GAN loss 4.7153 ', 'GAN acc 0.0000', 'Discriminator loss 0.0285', 'Discriminator accuracy 0.9941', 'Total loss: 4.7437', 'for batch', 9)
('GAN loss 4.5941 ', 'GAN acc 0.0000', 'Discriminator loss 0.0527', 'Discriminator accuracy 0.9863', 'Total loss: 4.6469', 'for batch', 10)
('GAN loss 4.4017 ', 'GAN acc 0.0000', 'Discriminator loss 0.0404', 'Discriminator accuracy 0.9902', 'Total loss: 4.4421', 'for batch', 11)
('GAN loss 4.3300 ', 'GAN acc 0.0000', 'Discriminator loss 0.0328', 'Discriminator accuracy 0.9922', 'Total loss: 4.3628', 'for batch', 12)
('GAN loss 4.4136 ', 'GAN acc 0.0000', 'Discriminator loss 0.0216', 'Discriminator accuracy 0.9961', 'Total loss: 4.4352', 'for batch', 13)
('GAN loss 4.3294 ', 'GAN acc 0.0000', 'Discriminator loss 0.0621', 'Discriminator accuracy 0.9863', 'Total loss: 4.3916', 'for batch', 14)
('GAN loss 4.1611 ', 'GAN acc 0.0000', 'Discriminator loss 0.0726', 'Discriminator accuracy 0.9844', 'Total loss: 4.2337', 'for batch', 15)
('GAN loss 3.9883 ', 'GAN acc 0.0000', 'Discriminator loss 0.0419', 'Discriminator accuracy 0.9902', 'Total loss: 4.0302', 'for batch', 16)
('GAN loss 4.0088 ', 'GAN acc 0.0000', 'Discriminator loss 0.0281', 'Discriminator accuracy 0.9961', 'Total loss: 4.0369', 'for batch', 17)
('GAN loss 4.0540 ', 'GAN acc 0.0000', 'Discriminator loss 0.0345', 'Discriminator accuracy 0.9922', 'Total loss: 4.0885', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99045473)
('DISCRIMINATOR_Imagem FAKE=', 0.016923275)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.132110')
----------------------------------
('Epoch', 34, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2185 ', 'GAN acc 0.0000', 'Discriminator loss 0.0271', 'Discriminator accuracy 0.9941', 'Total loss: 4.2457', 'for batch', 0)
('GAN loss 4.3062 ', 'GAN acc 0.0000', 'Discriminator loss 0.0299', 'Discriminator accuracy 0.9941', 'Total loss: 4.3361', 'for batch', 1)
('GAN loss 4.5299 ', 'GAN acc 0.0000', 'Discriminator loss 0.0081', 'Discriminator accuracy 1.0000', 'Total loss: 4.5380', 'for batch', 2)
('GAN loss 4.6232 ', 'GAN acc 0.0000', 'Discriminator loss 0.0301', 'Discriminator accuracy 0.9922', 'Total loss: 4.6533', 'for batch', 3)
('GAN loss 4.7393 ', 'GAN acc 0.0000', 'Discriminator loss 0.0116', 'Discriminator accuracy 0.9980', 'Total loss: 4.7509', 'for batch', 4)
('GAN loss 4.4945 ', 'GAN acc 0.0000', 'Discriminator loss 0.0560', 'Discriminator accuracy 0.9883', 'Total loss: 4.5505', 'for batch', 5)
('GAN loss 4.5565 ', 'GAN acc 0.0000', 'Discriminator loss 0.0146', 'Discriminator accuracy 0.9961', 'Total loss: 4.5711', 'for batch', 6)
('GAN loss 4.5967 ', 'GAN acc 0.0000', 'Discriminator loss 0.0163', 'Discriminator accuracy 0.9980', 'Total loss: 4.6130', 'for batch', 7)
('GAN loss 4.5372 ', 'GAN acc 0.0000', 'Discriminator loss 0.0438', 'Discriminator accuracy 0.9922', 'Total loss: 4.5810', 'for batch', 8)
('GAN loss 4.5360 ', 'GAN acc 0.0000', 'Discriminator loss 0.0286', 'Discriminator accuracy 0.9941', 'Total loss: 4.5646', 'for batch', 9)
('GAN loss 4.3959 ', 'GAN acc 0.0000', 'Discriminator loss 0.0541', 'Discriminator accuracy 0.9863', 'Total loss: 4.4500', 'for batch', 10)
('GAN loss 4.0251 ', 'GAN acc 0.0000', 'Discriminator loss 0.0374', 'Discriminator accuracy 0.9902', 'Total loss: 4.0625', 'for batch', 11)
('GAN loss 4.0817 ', 'GAN acc 0.0000', 'Discriminator loss 0.0368', 'Discriminator accuracy 0.9922', 'Total loss: 4.1185', 'for batch', 12)
('GAN loss 4.2961 ', 'GAN acc 0.0000', 'Discriminator loss 0.0225', 'Discriminator accuracy 0.9961', 'Total loss: 4.3186', 'for batch', 13)
('GAN loss 4.2324 ', 'GAN acc 0.0000', 'Discriminator loss 0.0642', 'Discriminator accuracy 0.9863', 'Total loss: 4.2966', 'for batch', 14)
('GAN loss 3.9091 ', 'GAN acc 0.0000', 'Discriminator loss 0.0700', 'Discriminator accuracy 0.9844', 'Total loss: 3.9791', 'for batch', 15)
('GAN loss 3.5312 ', 'GAN acc 0.0000', 'Discriminator loss 0.0434', 'Discriminator accuracy 0.9902', 'Total loss: 3.5746', 'for batch', 16)
('GAN loss 4.0947 ', 'GAN acc 0.0000', 'Discriminator loss 0.0318', 'Discriminator accuracy 0.9961', 'Total loss: 4.1265', 'for batch', 17)
('GAN loss 4.3055 ', 'GAN acc 0.0000', 'Discriminator loss 0.0376', 'Discriminator accuracy 0.9941', 'Total loss: 4.3431', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99149525)
('DISCRIMINATOR_Imagem FAKE=', 0.021595409)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.717446')
----------------------------------
('Epoch', 35, 'of', 50)
('Number of batches', 19)
('GAN loss 4.3444 ', 'GAN acc 0.0000', 'Discriminator loss 0.0297', 'Discriminator accuracy 0.9922', 'Total loss: 4.3741', 'for batch', 0)
('GAN loss 4.3887 ', 'GAN acc 0.0000', 'Discriminator loss 0.0340', 'Discriminator accuracy 0.9941', 'Total loss: 4.4227', 'for batch', 1)
('GAN loss 4.5227 ', 'GAN acc 0.0000', 'Discriminator loss 0.0085', 'Discriminator accuracy 1.0000', 'Total loss: 4.5311', 'for batch', 2)
('GAN loss 4.3121 ', 'GAN acc 0.0000', 'Discriminator loss 0.0376', 'Discriminator accuracy 0.9902', 'Total loss: 4.3497', 'for batch', 3)
('GAN loss 4.3428 ', 'GAN acc 0.0000', 'Discriminator loss 0.0138', 'Discriminator accuracy 0.9980', 'Total loss: 4.3565', 'for batch', 4)
('GAN loss 4.0217 ', 'GAN acc 0.0000', 'Discriminator loss 0.0606', 'Discriminator accuracy 0.9863', 'Total loss: 4.0823', 'for batch', 5)
('GAN loss 4.3727 ', 'GAN acc 0.0000', 'Discriminator loss 0.0254', 'Discriminator accuracy 0.9961', 'Total loss: 4.3981', 'for batch', 6)
('GAN loss 4.6628 ', 'GAN acc 0.0000', 'Discriminator loss 0.0160', 'Discriminator accuracy 0.9980', 'Total loss: 4.6788', 'for batch', 7)
('GAN loss 4.5781 ', 'GAN acc 0.0000', 'Discriminator loss 0.0454', 'Discriminator accuracy 0.9922', 'Total loss: 4.6235', 'for batch', 8)
('GAN loss 4.5523 ', 'GAN acc 0.0000', 'Discriminator loss 0.0315', 'Discriminator accuracy 0.9941', 'Total loss: 4.5839', 'for batch', 9)
('GAN loss 4.2190 ', 'GAN acc 0.0000', 'Discriminator loss 0.0503', 'Discriminator accuracy 0.9902', 'Total loss: 4.2692', 'for batch', 10)
('GAN loss 5.8425 ', 'GAN acc 0.0000', 'Discriminator loss 0.0508', 'Discriminator accuracy 0.9941', 'Total loss: 5.8933', 'for batch', 11)
('GAN loss 5.7444 ', 'GAN acc 0.0000', 'Discriminator loss 0.0420', 'Discriminator accuracy 0.9922', 'Total loss: 5.7864', 'for batch', 12)
('GAN loss 5.7193 ', 'GAN acc 0.0000', 'Discriminator loss 0.0210', 'Discriminator accuracy 0.9961', 'Total loss: 5.7403', 'for batch', 13)
('GAN loss 4.9493 ', 'GAN acc 0.0000', 'Discriminator loss 0.0851', 'Discriminator accuracy 0.9863', 'Total loss: 5.0345', 'for batch', 14)
('GAN loss 4.5395 ', 'GAN acc 0.0000', 'Discriminator loss 0.0914', 'Discriminator accuracy 0.9824', 'Total loss: 4.6309', 'for batch', 15)
('GAN loss 4.2770 ', 'GAN acc 0.0000', 'Discriminator loss 0.0531', 'Discriminator accuracy 0.9902', 'Total loss: 4.3301', 'for batch', 16)
('GAN loss 4.0526 ', 'GAN acc 0.0000', 'Discriminator loss 0.0397', 'Discriminator accuracy 0.9902', 'Total loss: 4.0923', 'for batch', 17)
('GAN loss 4.1155 ', 'GAN acc 0.0000', 'Discriminator loss 0.0399', 'Discriminator accuracy 0.9922', 'Total loss: 4.1553', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98902851)
('DISCRIMINATOR_Imagem FAKE=', 0.028608004)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.181084')
----------------------------------
('Epoch', 36, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0721 ', 'GAN acc 0.0000', 'Discriminator loss 0.0352', 'Discriminator accuracy 0.9922', 'Total loss: 4.1073', 'for batch', 0)
('GAN loss 4.1548 ', 'GAN acc 0.0000', 'Discriminator loss 0.0340', 'Discriminator accuracy 0.9941', 'Total loss: 4.1888', 'for batch', 1)
('GAN loss 4.3257 ', 'GAN acc 0.0000', 'Discriminator loss 0.0090', 'Discriminator accuracy 1.0000', 'Total loss: 4.3347', 'for batch', 2)
('GAN loss 4.4120 ', 'GAN acc 0.0000', 'Discriminator loss 0.0318', 'Discriminator accuracy 0.9922', 'Total loss: 4.4438', 'for batch', 3)
('GAN loss 4.5090 ', 'GAN acc 0.0000', 'Discriminator loss 0.0119', 'Discriminator accuracy 0.9980', 'Total loss: 4.5209', 'for batch', 4)
('GAN loss 4.4112 ', 'GAN acc 0.0000', 'Discriminator loss 0.0584', 'Discriminator accuracy 0.9883', 'Total loss: 4.4696', 'for batch', 5)
('GAN loss 4.3915 ', 'GAN acc 0.0000', 'Discriminator loss 0.0195', 'Discriminator accuracy 0.9961', 'Total loss: 4.4111', 'for batch', 6)
('GAN loss 4.4397 ', 'GAN acc 0.0000', 'Discriminator loss 0.0152', 'Discriminator accuracy 0.9980', 'Total loss: 4.4548', 'for batch', 7)
('GAN loss 4.4876 ', 'GAN acc 0.0000', 'Discriminator loss 0.0424', 'Discriminator accuracy 0.9922', 'Total loss: 4.5300', 'for batch', 8)
('GAN loss 4.4717 ', 'GAN acc 0.0000', 'Discriminator loss 0.0297', 'Discriminator accuracy 0.9941', 'Total loss: 4.5013', 'for batch', 9)
('GAN loss 4.3112 ', 'GAN acc 0.0000', 'Discriminator loss 0.0546', 'Discriminator accuracy 0.9883', 'Total loss: 4.3658', 'for batch', 10)
('GAN loss 4.1884 ', 'GAN acc 0.0000', 'Discriminator loss 0.0369', 'Discriminator accuracy 0.9902', 'Total loss: 4.2253', 'for batch', 11)
('GAN loss 4.1546 ', 'GAN acc 0.0000', 'Discriminator loss 0.0390', 'Discriminator accuracy 0.9922', 'Total loss: 4.1937', 'for batch', 12)
('GAN loss 4.4082 ', 'GAN acc 0.0000', 'Discriminator loss 0.0214', 'Discriminator accuracy 0.9980', 'Total loss: 4.4296', 'for batch', 13)
('GAN loss 4.5058 ', 'GAN acc 0.0000', 'Discriminator loss 0.0681', 'Discriminator accuracy 0.9863', 'Total loss: 4.5739', 'for batch', 14)
('GAN loss 4.4096 ', 'GAN acc 0.0000', 'Discriminator loss 0.0756', 'Discriminator accuracy 0.9844', 'Total loss: 4.4852', 'for batch', 15)
('GAN loss 4.3553 ', 'GAN acc 0.0000', 'Discriminator loss 0.0471', 'Discriminator accuracy 0.9902', 'Total loss: 4.4024', 'for batch', 16)
('GAN loss 4.3688 ', 'GAN acc 0.0000', 'Discriminator loss 0.0259', 'Discriminator accuracy 0.9961', 'Total loss: 4.3948', 'for batch', 17)
('GAN loss 4.4286 ', 'GAN acc 0.0000', 'Discriminator loss 0.0339', 'Discriminator accuracy 0.9941', 'Total loss: 4.4625', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98999673)
('DISCRIMINATOR_Imagem FAKE=', 0.011066153)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.715678')
----------------------------------
('Epoch', 37, 'of', 50)
('Number of batches', 19)
('GAN loss 4.5276 ', 'GAN acc 0.0000', 'Discriminator loss 0.0302', 'Discriminator accuracy 0.9922', 'Total loss: 4.5578', 'for batch', 0)
('GAN loss 4.5445 ', 'GAN acc 0.0000', 'Discriminator loss 0.0339', 'Discriminator accuracy 0.9922', 'Total loss: 4.5784', 'for batch', 1)
('GAN loss 4.6775 ', 'GAN acc 0.0000', 'Discriminator loss 0.0069', 'Discriminator accuracy 1.0000', 'Total loss: 4.6844', 'for batch', 2)
('GAN loss 4.6904 ', 'GAN acc 0.0000', 'Discriminator loss 0.0359', 'Discriminator accuracy 0.9902', 'Total loss: 4.7264', 'for batch', 3)
('GAN loss 4.8559 ', 'GAN acc 0.0000', 'Discriminator loss 0.0121', 'Discriminator accuracy 0.9980', 'Total loss: 4.8680', 'for batch', 4)
('GAN loss 4.6414 ', 'GAN acc 0.0000', 'Discriminator loss 0.0613', 'Discriminator accuracy 0.9863', 'Total loss: 4.7027', 'for batch', 5)
('GAN loss 4.6409 ', 'GAN acc 0.0000', 'Discriminator loss 0.0183', 'Discriminator accuracy 0.9961', 'Total loss: 4.6592', 'for batch', 6)
('GAN loss 4.8147 ', 'GAN acc 0.0000', 'Discriminator loss 0.0138', 'Discriminator accuracy 0.9980', 'Total loss: 4.8285', 'for batch', 7)
('GAN loss 4.7716 ', 'GAN acc 0.0000', 'Discriminator loss 0.0429', 'Discriminator accuracy 0.9922', 'Total loss: 4.8145', 'for batch', 8)
('GAN loss 4.7006 ', 'GAN acc 0.0000', 'Discriminator loss 0.0286', 'Discriminator accuracy 0.9941', 'Total loss: 4.7292', 'for batch', 9)
('GAN loss 4.4990 ', 'GAN acc 0.0000', 'Discriminator loss 0.0574', 'Discriminator accuracy 0.9883', 'Total loss: 4.5564', 'for batch', 10)
('GAN loss 4.2629 ', 'GAN acc 0.0000', 'Discriminator loss 0.0435', 'Discriminator accuracy 0.9883', 'Total loss: 4.3064', 'for batch', 11)
('GAN loss 4.1839 ', 'GAN acc 0.0000', 'Discriminator loss 0.0324', 'Discriminator accuracy 0.9922', 'Total loss: 4.2163', 'for batch', 12)
('GAN loss 4.2969 ', 'GAN acc 0.0000', 'Discriminator loss 0.0201', 'Discriminator accuracy 0.9961', 'Total loss: 4.3171', 'for batch', 13)
('GAN loss 4.2126 ', 'GAN acc 0.0000', 'Discriminator loss 0.0645', 'Discriminator accuracy 0.9863', 'Total loss: 4.2771', 'for batch', 14)
('GAN loss 4.0528 ', 'GAN acc 0.0000', 'Discriminator loss 0.0670', 'Discriminator accuracy 0.9844', 'Total loss: 4.1199', 'for batch', 15)
('GAN loss 3.9744 ', 'GAN acc 0.0000', 'Discriminator loss 0.0431', 'Discriminator accuracy 0.9902', 'Total loss: 4.0175', 'for batch', 16)
('GAN loss 4.0087 ', 'GAN acc 0.0000', 'Discriminator loss 0.0301', 'Discriminator accuracy 0.9941', 'Total loss: 4.0388', 'for batch', 17)
('GAN loss 4.0986 ', 'GAN acc 0.0000', 'Discriminator loss 0.0325', 'Discriminator accuracy 0.9941', 'Total loss: 4.1311', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99203962)
('DISCRIMINATOR_Imagem FAKE=', 0.017085984)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.141664')
----------------------------------
('Epoch', 38, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2766 ', 'GAN acc 0.0000', 'Discriminator loss 0.0232', 'Discriminator accuracy 0.9961', 'Total loss: 4.2998', 'for batch', 0)
('GAN loss 4.3930 ', 'GAN acc 0.0000', 'Discriminator loss 0.0270', 'Discriminator accuracy 0.9941', 'Total loss: 4.4200', 'for batch', 1)
('GAN loss 4.6586 ', 'GAN acc 0.0000', 'Discriminator loss 0.0066', 'Discriminator accuracy 1.0000', 'Total loss: 4.6652', 'for batch', 2)
('GAN loss 4.7199 ', 'GAN acc 0.0000', 'Discriminator loss 0.0286', 'Discriminator accuracy 0.9941', 'Total loss: 4.7485', 'for batch', 3)
('GAN loss 4.8320 ', 'GAN acc 0.0000', 'Discriminator loss 0.0071', 'Discriminator accuracy 0.9980', 'Total loss: 4.8392', 'for batch', 4)
('GAN loss 4.7137 ', 'GAN acc 0.0000', 'Discriminator loss 0.0599', 'Discriminator accuracy 0.9883', 'Total loss: 4.7736', 'for batch', 5)
('GAN loss 4.6721 ', 'GAN acc 0.0000', 'Discriminator loss 0.0139', 'Discriminator accuracy 0.9961', 'Total loss: 4.6860', 'for batch', 6)
('GAN loss 4.7742 ', 'GAN acc 0.0000', 'Discriminator loss 0.0151', 'Discriminator accuracy 0.9980', 'Total loss: 4.7893', 'for batch', 7)
('GAN loss 4.6966 ', 'GAN acc 0.0000', 'Discriminator loss 0.0406', 'Discriminator accuracy 0.9922', 'Total loss: 4.7373', 'for batch', 8)
('GAN loss 4.6493 ', 'GAN acc 0.0000', 'Discriminator loss 0.0263', 'Discriminator accuracy 0.9941', 'Total loss: 4.6756', 'for batch', 9)
('GAN loss 4.5058 ', 'GAN acc 0.0000', 'Discriminator loss 0.0436', 'Discriminator accuracy 0.9883', 'Total loss: 4.5494', 'for batch', 10)
('GAN loss 4.7612 ', 'GAN acc 0.0000', 'Discriminator loss 0.0458', 'Discriminator accuracy 0.9902', 'Total loss: 4.8070', 'for batch', 11)
('GAN loss 5.0086 ', 'GAN acc 0.0000', 'Discriminator loss 0.0341', 'Discriminator accuracy 0.9922', 'Total loss: 5.0427', 'for batch', 12)
('GAN loss 5.2694 ', 'GAN acc 0.0000', 'Discriminator loss 0.0153', 'Discriminator accuracy 0.9961', 'Total loss: 5.2847', 'for batch', 13)
('GAN loss 5.1098 ', 'GAN acc 0.0000', 'Discriminator loss 0.0593', 'Discriminator accuracy 0.9863', 'Total loss: 5.1691', 'for batch', 14)
('GAN loss 4.6524 ', 'GAN acc 0.0000', 'Discriminator loss 0.0677', 'Discriminator accuracy 0.9844', 'Total loss: 4.7201', 'for batch', 15)
('GAN loss 4.2745 ', 'GAN acc 0.0000', 'Discriminator loss 0.0450', 'Discriminator accuracy 0.9902', 'Total loss: 4.3195', 'for batch', 16)
('GAN loss 4.0925 ', 'GAN acc 0.0000', 'Discriminator loss 0.0296', 'Discriminator accuracy 0.9941', 'Total loss: 4.1221', 'for batch', 17)
('GAN loss 4.1299 ', 'GAN acc 0.0000', 'Discriminator loss 0.0330', 'Discriminator accuracy 0.9941', 'Total loss: 4.1629', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99091774)
('DISCRIMINATOR_Imagem FAKE=', 0.016967567)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.674198')
----------------------------------
('Epoch', 39, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2156 ', 'GAN acc 0.0000', 'Discriminator loss 0.0235', 'Discriminator accuracy 0.9941', 'Total loss: 4.2391', 'for batch', 0)
('GAN loss 4.3111 ', 'GAN acc 0.0000', 'Discriminator loss 0.0277', 'Discriminator accuracy 0.9941', 'Total loss: 4.3387', 'for batch', 1)
('GAN loss 4.5707 ', 'GAN acc 0.0000', 'Discriminator loss 0.0078', 'Discriminator accuracy 1.0000', 'Total loss: 4.5785', 'for batch', 2)
('GAN loss 4.6645 ', 'GAN acc 0.0000', 'Discriminator loss 0.0254', 'Discriminator accuracy 0.9941', 'Total loss: 4.6899', 'for batch', 3)
('GAN loss 4.8276 ', 'GAN acc 0.0000', 'Discriminator loss 0.0059', 'Discriminator accuracy 1.0000', 'Total loss: 4.8335', 'for batch', 4)
('GAN loss 4.7295 ', 'GAN acc 0.0000', 'Discriminator loss 0.0542', 'Discriminator accuracy 0.9883', 'Total loss: 4.7837', 'for batch', 5)
('GAN loss 4.7575 ', 'GAN acc 0.0000', 'Discriminator loss 0.0122', 'Discriminator accuracy 0.9961', 'Total loss: 4.7697', 'for batch', 6)
('GAN loss 4.8667 ', 'GAN acc 0.0000', 'Discriminator loss 0.0141', 'Discriminator accuracy 0.9980', 'Total loss: 4.8808', 'for batch', 7)
('GAN loss 4.7777 ', 'GAN acc 0.0000', 'Discriminator loss 0.0419', 'Discriminator accuracy 0.9922', 'Total loss: 4.8196', 'for batch', 8)
('GAN loss 4.7584 ', 'GAN acc 0.0000', 'Discriminator loss 0.0267', 'Discriminator accuracy 0.9941', 'Total loss: 4.7852', 'for batch', 9)
('GAN loss 4.6047 ', 'GAN acc 0.0000', 'Discriminator loss 0.0446', 'Discriminator accuracy 0.9883', 'Total loss: 4.6493', 'for batch', 10)
('GAN loss 4.4486 ', 'GAN acc 0.0000', 'Discriminator loss 0.0382', 'Discriminator accuracy 0.9902', 'Total loss: 4.4869', 'for batch', 11)
('GAN loss 4.3857 ', 'GAN acc 0.0000', 'Discriminator loss 0.0287', 'Discriminator accuracy 0.9941', 'Total loss: 4.4144', 'for batch', 12)
('GAN loss 4.4527 ', 'GAN acc 0.0000', 'Discriminator loss 0.0155', 'Discriminator accuracy 0.9980', 'Total loss: 4.4682', 'for batch', 13)
('GAN loss 4.3919 ', 'GAN acc 0.0000', 'Discriminator loss 0.0559', 'Discriminator accuracy 0.9863', 'Total loss: 4.4478', 'for batch', 14)
('GAN loss 4.1989 ', 'GAN acc 0.0000', 'Discriminator loss 0.0617', 'Discriminator accuracy 0.9844', 'Total loss: 4.2606', 'for batch', 15)
('GAN loss 4.0671 ', 'GAN acc 0.0000', 'Discriminator loss 0.0367', 'Discriminator accuracy 0.9922', 'Total loss: 4.1038', 'for batch', 16)
('GAN loss 4.0783 ', 'GAN acc 0.0000', 'Discriminator loss 0.0247', 'Discriminator accuracy 0.9961', 'Total loss: 4.1031', 'for batch', 17)
('GAN loss 4.1599 ', 'GAN acc 0.0000', 'Discriminator loss 0.0335', 'Discriminator accuracy 0.9941', 'Total loss: 4.1934', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99407196)
('DISCRIMINATOR_Imagem FAKE=', 0.014805927)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.143215')
----------------------------------
('Epoch', 40, 'of', 50)
('Number of batches', 19)
('GAN loss 4.3787 ', 'GAN acc 0.0000', 'Discriminator loss 0.0201', 'Discriminator accuracy 0.9961', 'Total loss: 4.3988', 'for batch', 0)
('GAN loss 4.5310 ', 'GAN acc 0.0000', 'Discriminator loss 0.0249', 'Discriminator accuracy 0.9941', 'Total loss: 4.5559', 'for batch', 1)
('GAN loss 4.7539 ', 'GAN acc 0.0000', 'Discriminator loss 0.0059', 'Discriminator accuracy 1.0000', 'Total loss: 4.7598', 'for batch', 2)
('GAN loss 4.8389 ', 'GAN acc 0.0000', 'Discriminator loss 0.0200', 'Discriminator accuracy 0.9941', 'Total loss: 4.8588', 'for batch', 3)
('GAN loss 4.9379 ', 'GAN acc 0.0000', 'Discriminator loss 0.0064', 'Discriminator accuracy 1.0000', 'Total loss: 4.9443', 'for batch', 4)
('GAN loss 4.5147 ', 'GAN acc 0.0000', 'Discriminator loss 0.0670', 'Discriminator accuracy 0.9883', 'Total loss: 4.5816', 'for batch', 5)
('GAN loss 4.8628 ', 'GAN acc 0.0000', 'Discriminator loss 0.0298', 'Discriminator accuracy 0.9961', 'Total loss: 4.8926', 'for batch', 6)
('GAN loss 5.8705 ', 'GAN acc 0.0000', 'Discriminator loss 0.0268', 'Discriminator accuracy 0.9980', 'Total loss: 5.8973', 'for batch', 7)
('GAN loss 6.1123 ', 'GAN acc 0.0000', 'Discriminator loss 0.0535', 'Discriminator accuracy 0.9922', 'Total loss: 6.1658', 'for batch', 8)
('GAN loss 5.9483 ', 'GAN acc 0.0000', 'Discriminator loss 0.0279', 'Discriminator accuracy 0.9941', 'Total loss: 5.9762', 'for batch', 9)
('GAN loss 5.3176 ', 'GAN acc 0.0000', 'Discriminator loss 0.0518', 'Discriminator accuracy 0.9902', 'Total loss: 5.3695', 'for batch', 10)
('GAN loss 4.8111 ', 'GAN acc 0.0000', 'Discriminator loss 0.0439', 'Discriminator accuracy 0.9902', 'Total loss: 4.8550', 'for batch', 11)
('GAN loss 4.6311 ', 'GAN acc 0.0000', 'Discriminator loss 0.0335', 'Discriminator accuracy 0.9922', 'Total loss: 4.6646', 'for batch', 12)
('GAN loss 4.5869 ', 'GAN acc 0.0000', 'Discriminator loss 0.0148', 'Discriminator accuracy 0.9980', 'Total loss: 4.6017', 'for batch', 13)
('GAN loss 4.4309 ', 'GAN acc 0.0000', 'Discriminator loss 0.0693', 'Discriminator accuracy 0.9863', 'Total loss: 4.5002', 'for batch', 14)
('GAN loss 5.1819 ', 'GAN acc 0.0000', 'Discriminator loss 0.0814', 'Discriminator accuracy 0.9805', 'Total loss: 5.2633', 'for batch', 15)
('GAN loss 4.6022 ', 'GAN acc 0.0000', 'Discriminator loss 0.0454', 'Discriminator accuracy 0.9902', 'Total loss: 4.6475', 'for batch', 16)
('GAN loss 4.4117 ', 'GAN acc 0.0000', 'Discriminator loss 0.0265', 'Discriminator accuracy 0.9941', 'Total loss: 4.4382', 'for batch', 17)
('GAN loss 4.3706 ', 'GAN acc 0.0000', 'Discriminator loss 0.0330', 'Discriminator accuracy 0.9941', 'Total loss: 4.4035', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98930991)
('DISCRIMINATOR_Imagem FAKE=', 0.013355108)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.709901')
----------------------------------
('Epoch', 41, 'of', 50)
('Number of batches', 19)
('GAN loss 4.4274 ', 'GAN acc 0.0000', 'Discriminator loss 0.0228', 'Discriminator accuracy 0.9961', 'Total loss: 4.4502', 'for batch', 0)
('GAN loss 4.4869 ', 'GAN acc 0.0000', 'Discriminator loss 0.0294', 'Discriminator accuracy 0.9941', 'Total loss: 4.5163', 'for batch', 1)
('GAN loss 4.6709 ', 'GAN acc 0.0000', 'Discriminator loss 0.0063', 'Discriminator accuracy 1.0000', 'Total loss: 4.6772', 'for batch', 2)
('GAN loss 4.7278 ', 'GAN acc 0.0000', 'Discriminator loss 0.0248', 'Discriminator accuracy 0.9941', 'Total loss: 4.7526', 'for batch', 3)
('GAN loss 4.8595 ', 'GAN acc 0.0000', 'Discriminator loss 0.0073', 'Discriminator accuracy 0.9980', 'Total loss: 4.8667', 'for batch', 4)
('GAN loss 4.6771 ', 'GAN acc 0.0000', 'Discriminator loss 0.0610', 'Discriminator accuracy 0.9863', 'Total loss: 4.7381', 'for batch', 5)
('GAN loss 4.6468 ', 'GAN acc 0.0000', 'Discriminator loss 0.0152', 'Discriminator accuracy 0.9961', 'Total loss: 4.6620', 'for batch', 6)
('GAN loss 4.6991 ', 'GAN acc 0.0000', 'Discriminator loss 0.0139', 'Discriminator accuracy 0.9980', 'Total loss: 4.7130', 'for batch', 7)
('GAN loss 4.6528 ', 'GAN acc 0.0000', 'Discriminator loss 0.0421', 'Discriminator accuracy 0.9922', 'Total loss: 4.6949', 'for batch', 8)
('GAN loss 4.6560 ', 'GAN acc 0.0000', 'Discriminator loss 0.0239', 'Discriminator accuracy 0.9961', 'Total loss: 4.6799', 'for batch', 9)
('GAN loss 4.6156 ', 'GAN acc 0.0000', 'Discriminator loss 0.0372', 'Discriminator accuracy 0.9922', 'Total loss: 4.6528', 'for batch', 10)
('GAN loss 4.4684 ', 'GAN acc 0.0000', 'Discriminator loss 0.0354', 'Discriminator accuracy 0.9902', 'Total loss: 4.5038', 'for batch', 11)
('GAN loss 4.3851 ', 'GAN acc 0.0000', 'Discriminator loss 0.0309', 'Discriminator accuracy 0.9922', 'Total loss: 4.4160', 'for batch', 12)
('GAN loss 4.4647 ', 'GAN acc 0.0000', 'Discriminator loss 0.0156', 'Discriminator accuracy 0.9980', 'Total loss: 4.4804', 'for batch', 13)
('GAN loss 4.3529 ', 'GAN acc 0.0000', 'Discriminator loss 0.0607', 'Discriminator accuracy 0.9863', 'Total loss: 4.4137', 'for batch', 14)
('GAN loss 4.1753 ', 'GAN acc 0.0000', 'Discriminator loss 0.0642', 'Discriminator accuracy 0.9844', 'Total loss: 4.2395', 'for batch', 15)
('GAN loss 4.0343 ', 'GAN acc 0.0000', 'Discriminator loss 0.0356', 'Discriminator accuracy 0.9922', 'Total loss: 4.0699', 'for batch', 16)
('GAN loss 4.1095 ', 'GAN acc 0.0000', 'Discriminator loss 0.0254', 'Discriminator accuracy 0.9961', 'Total loss: 4.1349', 'for batch', 17)
('GAN loss 4.1742 ', 'GAN acc 0.0000', 'Discriminator loss 0.0341', 'Discriminator accuracy 0.9941', 'Total loss: 4.2084', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99431288)
('DISCRIMINATOR_Imagem FAKE=', 0.022215374)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.138004')
----------------------------------
('Epoch', 42, 'of', 50)
('Number of batches', 19)
('GAN loss 4.4365 ', 'GAN acc 0.0000', 'Discriminator loss 0.0232', 'Discriminator accuracy 0.9961', 'Total loss: 4.4597', 'for batch', 0)
('GAN loss 4.8446 ', 'GAN acc 0.0000', 'Discriminator loss 0.0294', 'Discriminator accuracy 0.9941', 'Total loss: 4.8740', 'for batch', 1)
('GAN loss 5.3550 ', 'GAN acc 0.0000', 'Discriminator loss 0.0045', 'Discriminator accuracy 1.0000', 'Total loss: 5.3595', 'for batch', 2)
('GAN loss 5.2275 ', 'GAN acc 0.0000', 'Discriminator loss 0.0192', 'Discriminator accuracy 0.9941', 'Total loss: 5.2467', 'for batch', 3)
('GAN loss 5.0156 ', 'GAN acc 0.0000', 'Discriminator loss 0.0049', 'Discriminator accuracy 1.0000', 'Total loss: 5.0204', 'for batch', 4)
('GAN loss 4.7889 ', 'GAN acc 0.0000', 'Discriminator loss 0.0548', 'Discriminator accuracy 0.9883', 'Total loss: 4.8437', 'for batch', 5)
('GAN loss 4.7774 ', 'GAN acc 0.0000', 'Discriminator loss 0.0157', 'Discriminator accuracy 0.9961', 'Total loss: 4.7931', 'for batch', 6)
('GAN loss 4.8618 ', 'GAN acc 0.0000', 'Discriminator loss 0.0134', 'Discriminator accuracy 0.9980', 'Total loss: 4.8753', 'for batch', 7)
('GAN loss 4.7711 ', 'GAN acc 0.0000', 'Discriminator loss 0.0413', 'Discriminator accuracy 0.9922', 'Total loss: 4.8124', 'for batch', 8)
('GAN loss 4.7406 ', 'GAN acc 0.0000', 'Discriminator loss 0.0240', 'Discriminator accuracy 0.9961', 'Total loss: 4.7645', 'for batch', 9)
('GAN loss 4.6494 ', 'GAN acc 0.0000', 'Discriminator loss 0.0378', 'Discriminator accuracy 0.9922', 'Total loss: 4.6872', 'for batch', 10)
('GAN loss 4.4770 ', 'GAN acc 0.0000', 'Discriminator loss 0.0331', 'Discriminator accuracy 0.9902', 'Total loss: 4.5101', 'for batch', 11)
('GAN loss 4.4329 ', 'GAN acc 0.0000', 'Discriminator loss 0.0278', 'Discriminator accuracy 0.9941', 'Total loss: 4.4607', 'for batch', 12)
('GAN loss 4.5218 ', 'GAN acc 0.0000', 'Discriminator loss 0.0146', 'Discriminator accuracy 0.9980', 'Total loss: 4.5363', 'for batch', 13)
('GAN loss 4.4094 ', 'GAN acc 0.0000', 'Discriminator loss 0.0606', 'Discriminator accuracy 0.9863', 'Total loss: 4.4699', 'for batch', 14)
('GAN loss 4.1138 ', 'GAN acc 0.0000', 'Discriminator loss 0.0633', 'Discriminator accuracy 0.9844', 'Total loss: 4.1771', 'for batch', 15)
('GAN loss 3.7741 ', 'GAN acc 0.0000', 'Discriminator loss 0.0360', 'Discriminator accuracy 0.9922', 'Total loss: 3.8101', 'for batch', 16)
('GAN loss 4.1419 ', 'GAN acc 0.0000', 'Discriminator loss 0.0277', 'Discriminator accuracy 0.9961', 'Total loss: 4.1696', 'for batch', 17)
('GAN loss 4.3654 ', 'GAN acc 0.0000', 'Discriminator loss 0.0318', 'Discriminator accuracy 0.9941', 'Total loss: 4.3972', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9946872)
('DISCRIMINATOR_Imagem FAKE=', 0.012027561)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.711453')
----------------------------------
('Epoch', 43, 'of', 50)
('Number of batches', 19)
('GAN loss 4.5844 ', 'GAN acc 0.0000', 'Discriminator loss 0.0207', 'Discriminator accuracy 0.9941', 'Total loss: 4.6051', 'for batch', 0)
('GAN loss 4.6816 ', 'GAN acc 0.0000', 'Discriminator loss 0.0267', 'Discriminator accuracy 0.9941', 'Total loss: 4.7083', 'for batch', 1)
('GAN loss 4.8992 ', 'GAN acc 0.0000', 'Discriminator loss 0.0047', 'Discriminator accuracy 1.0000', 'Total loss: 4.9039', 'for batch', 2)
('GAN loss 5.0228 ', 'GAN acc 0.0000', 'Discriminator loss 0.0156', 'Discriminator accuracy 0.9961', 'Total loss: 5.0383', 'for batch', 3)
('GAN loss 5.2104 ', 'GAN acc 0.0000', 'Discriminator loss 0.0036', 'Discriminator accuracy 1.0000', 'Total loss: 5.2140', 'for batch', 4)
('GAN loss 4.9117 ', 'GAN acc 0.0000', 'Discriminator loss 0.0590', 'Discriminator accuracy 0.9883', 'Total loss: 4.9707', 'for batch', 5)
('GAN loss 4.8765 ', 'GAN acc 0.0000', 'Discriminator loss 0.0107', 'Discriminator accuracy 0.9961', 'Total loss: 4.8872', 'for batch', 6)
('GAN loss 4.9468 ', 'GAN acc 0.0000', 'Discriminator loss 0.0130', 'Discriminator accuracy 0.9980', 'Total loss: 4.9598', 'for batch', 7)
('GAN loss 4.8343 ', 'GAN acc 0.0000', 'Discriminator loss 0.0434', 'Discriminator accuracy 0.9922', 'Total loss: 4.8777', 'for batch', 8)
('GAN loss 4.7591 ', 'GAN acc 0.0000', 'Discriminator loss 0.0232', 'Discriminator accuracy 0.9961', 'Total loss: 4.7823', 'for batch', 9)
('GAN loss 4.7282 ', 'GAN acc 0.0000', 'Discriminator loss 0.0349', 'Discriminator accuracy 0.9922', 'Total loss: 4.7631', 'for batch', 10)
('GAN loss 4.6440 ', 'GAN acc 0.0000', 'Discriminator loss 0.0286', 'Discriminator accuracy 0.9941', 'Total loss: 4.6726', 'for batch', 11)
('GAN loss 4.6257 ', 'GAN acc 0.0000', 'Discriminator loss 0.0298', 'Discriminator accuracy 0.9922', 'Total loss: 4.6555', 'for batch', 12)
('GAN loss 4.7297 ', 'GAN acc 0.0000', 'Discriminator loss 0.0134', 'Discriminator accuracy 0.9980', 'Total loss: 4.7431', 'for batch', 13)
('GAN loss 4.5284 ', 'GAN acc 0.0000', 'Discriminator loss 0.0599', 'Discriminator accuracy 0.9863', 'Total loss: 4.5883', 'for batch', 14)
('GAN loss 4.1811 ', 'GAN acc 0.0000', 'Discriminator loss 0.0622', 'Discriminator accuracy 0.9844', 'Total loss: 4.2433', 'for batch', 15)
('GAN loss 3.7803 ', 'GAN acc 0.0000', 'Discriminator loss 0.0334', 'Discriminator accuracy 0.9922', 'Total loss: 3.8137', 'for batch', 16)
('GAN loss 4.3194 ', 'GAN acc 0.0000', 'Discriminator loss 0.0279', 'Discriminator accuracy 0.9961', 'Total loss: 4.3473', 'for batch', 17)
('GAN loss 4.5276 ', 'GAN acc 0.0000', 'Discriminator loss 0.0317', 'Discriminator accuracy 0.9941', 'Total loss: 4.5593', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9948597)
('DISCRIMINATOR_Imagem FAKE=', 0.010902421)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.129135')
----------------------------------
('Epoch', 44, 'of', 50)
('Number of batches', 19)
('GAN loss 4.6903 ', 'GAN acc 0.0000', 'Discriminator loss 0.0169', 'Discriminator accuracy 0.9961', 'Total loss: 4.7072', 'for batch', 0)
('GAN loss 4.7793 ', 'GAN acc 0.0000', 'Discriminator loss 0.0253', 'Discriminator accuracy 0.9941', 'Total loss: 4.8046', 'for batch', 1)
('GAN loss 4.9800 ', 'GAN acc 0.0000', 'Discriminator loss 0.0045', 'Discriminator accuracy 1.0000', 'Total loss: 4.9844', 'for batch', 2)
('GAN loss 5.0713 ', 'GAN acc 0.0000', 'Discriminator loss 0.0163', 'Discriminator accuracy 0.9961', 'Total loss: 5.0876', 'for batch', 3)
('GAN loss 5.2303 ', 'GAN acc 0.0000', 'Discriminator loss 0.0034', 'Discriminator accuracy 1.0000', 'Total loss: 5.2336', 'for batch', 4)
('GAN loss 5.0293 ', 'GAN acc 0.0000', 'Discriminator loss 0.0524', 'Discriminator accuracy 0.9883', 'Total loss: 5.0817', 'for batch', 5)
('GAN loss 5.0065 ', 'GAN acc 0.0000', 'Discriminator loss 0.0083', 'Discriminator accuracy 0.9961', 'Total loss: 5.0148', 'for batch', 6)
('GAN loss 5.0528 ', 'GAN acc 0.0000', 'Discriminator loss 0.0138', 'Discriminator accuracy 0.9980', 'Total loss: 5.0666', 'for batch', 7)
('GAN loss 4.9364 ', 'GAN acc 0.0000', 'Discriminator loss 0.0411', 'Discriminator accuracy 0.9922', 'Total loss: 4.9776', 'for batch', 8)
('GAN loss 4.8182 ', 'GAN acc 0.0000', 'Discriminator loss 0.0239', 'Discriminator accuracy 0.9961', 'Total loss: 4.8421', 'for batch', 9)
('GAN loss 4.7309 ', 'GAN acc 0.0000', 'Discriminator loss 0.0355', 'Discriminator accuracy 0.9922', 'Total loss: 4.7664', 'for batch', 10)
('GAN loss 4.5995 ', 'GAN acc 0.0000', 'Discriminator loss 0.0282', 'Discriminator accuracy 0.9922', 'Total loss: 4.6277', 'for batch', 11)
('GAN loss 4.5295 ', 'GAN acc 0.0000', 'Discriminator loss 0.0272', 'Discriminator accuracy 0.9941', 'Total loss: 4.5567', 'for batch', 12)
('GAN loss 4.6458 ', 'GAN acc 0.0000', 'Discriminator loss 0.0148', 'Discriminator accuracy 0.9980', 'Total loss: 4.6606', 'for batch', 13)
('GAN loss 4.5235 ', 'GAN acc 0.0000', 'Discriminator loss 0.0589', 'Discriminator accuracy 0.9863', 'Total loss: 4.5824', 'for batch', 14)
('GAN loss 4.2477 ', 'GAN acc 0.0000', 'Discriminator loss 0.0636', 'Discriminator accuracy 0.9844', 'Total loss: 4.3113', 'for batch', 15)
('GAN loss 4.1858 ', 'GAN acc 0.0000', 'Discriminator loss 0.0366', 'Discriminator accuracy 0.9922', 'Total loss: 4.2225', 'for batch', 16)
('GAN loss 4.3726 ', 'GAN acc 0.0000', 'Discriminator loss 0.0271', 'Discriminator accuracy 0.9961', 'Total loss: 4.3996', 'for batch', 17)
('GAN loss 4.1991 ', 'GAN acc 0.0000', 'Discriminator loss 0.0460', 'Discriminator accuracy 0.9941', 'Total loss: 4.2451', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99272764)
('DISCRIMINATOR_Imagem FAKE=', 0.34451661)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.116614')
----------------------------------
('Epoch', 45, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2899 ', 'GAN acc 0.0000', 'Discriminator loss 0.1520', 'Discriminator accuracy 0.9961', 'Total loss: 4.4419', 'for batch', 0)
('GAN loss 6.6157 ', 'GAN acc 0.0000', 'Discriminator loss 0.0369', 'Discriminator accuracy 0.9941', 'Total loss: 6.6526', 'for batch', 1)
('GAN loss 6.8705 ', 'GAN acc 0.0000', 'Discriminator loss 0.0022', 'Discriminator accuracy 1.0000', 'Total loss: 6.8728', 'for batch', 2)
('GAN loss 5.4004 ', 'GAN acc 0.0000', 'Discriminator loss 0.0228', 'Discriminator accuracy 0.9941', 'Total loss: 5.4232', 'for batch', 3)
('GAN loss 5.6840 ', 'GAN acc 0.0000', 'Discriminator loss 0.0051', 'Discriminator accuracy 0.9980', 'Total loss: 5.6892', 'for batch', 4)
('GAN loss 4.7494 ', 'GAN acc 0.0000', 'Discriminator loss 0.0624', 'Discriminator accuracy 0.9883', 'Total loss: 4.8117', 'for batch', 5)
('GAN loss 4.9154 ', 'GAN acc 0.0000', 'Discriminator loss 0.0200', 'Discriminator accuracy 0.9961', 'Total loss: 4.9354', 'for batch', 6)
('GAN loss 4.4081 ', 'GAN acc 0.0000', 'Discriminator loss 0.0170', 'Discriminator accuracy 0.9980', 'Total loss: 4.4251', 'for batch', 7)
('GAN loss 4.5519 ', 'GAN acc 0.0000', 'Discriminator loss 0.0444', 'Discriminator accuracy 0.9922', 'Total loss: 4.5963', 'for batch', 8)
('GAN loss 4.5595 ', 'GAN acc 0.0000', 'Discriminator loss 0.0266', 'Discriminator accuracy 0.9961', 'Total loss: 4.5861', 'for batch', 9)
('GAN loss 4.3902 ', 'GAN acc 0.0000', 'Discriminator loss 0.0459', 'Discriminator accuracy 0.9922', 'Total loss: 4.4361', 'for batch', 10)
('GAN loss 4.2857 ', 'GAN acc 0.0000', 'Discriminator loss 0.0367', 'Discriminator accuracy 0.9922', 'Total loss: 4.3225', 'for batch', 11)
('GAN loss 4.4246 ', 'GAN acc 0.0000', 'Discriminator loss 0.0394', 'Discriminator accuracy 0.9922', 'Total loss: 4.4640', 'for batch', 12)
('GAN loss 4.1791 ', 'GAN acc 0.0000', 'Discriminator loss 0.0174', 'Discriminator accuracy 0.9980', 'Total loss: 4.1965', 'for batch', 13)
('GAN loss 4.5397 ', 'GAN acc 0.0000', 'Discriminator loss 0.0737', 'Discriminator accuracy 0.9863', 'Total loss: 4.6134', 'for batch', 14)
('GAN loss 3.9651 ', 'GAN acc 0.0000', 'Discriminator loss 0.0734', 'Discriminator accuracy 0.9844', 'Total loss: 4.0385', 'for batch', 15)
('GAN loss 4.0227 ', 'GAN acc 0.0000', 'Discriminator loss 0.0419', 'Discriminator accuracy 0.9941', 'Total loss: 4.0646', 'for batch', 16)
('GAN loss 4.2869 ', 'GAN acc 0.0000', 'Discriminator loss 0.0240', 'Discriminator accuracy 0.9961', 'Total loss: 4.3109', 'for batch', 17)
('GAN loss 4.4672 ', 'GAN acc 0.0000', 'Discriminator loss 0.0324', 'Discriminator accuracy 0.9941', 'Total loss: 4.4996', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9938522)
('DISCRIMINATOR_Imagem FAKE=', 0.012415019)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.691469')
----------------------------------
('Epoch', 46, 'of', 50)
('Number of batches', 19)
('GAN loss 4.5884 ', 'GAN acc 0.0000', 'Discriminator loss 0.0272', 'Discriminator accuracy 0.9961', 'Total loss: 4.6156', 'for batch', 0)
('GAN loss 4.6522 ', 'GAN acc 0.0000', 'Discriminator loss 0.0311', 'Discriminator accuracy 0.9941', 'Total loss: 4.6833', 'for batch', 1)
('GAN loss 4.8342 ', 'GAN acc 0.0000', 'Discriminator loss 0.0049', 'Discriminator accuracy 1.0000', 'Total loss: 4.8391', 'for batch', 2)
('GAN loss 4.8651 ', 'GAN acc 0.0000', 'Discriminator loss 0.0227', 'Discriminator accuracy 0.9941', 'Total loss: 4.8878', 'for batch', 3)
('GAN loss 4.9829 ', 'GAN acc 0.0000', 'Discriminator loss 0.0045', 'Discriminator accuracy 1.0000', 'Total loss: 4.9874', 'for batch', 4)
('GAN loss 4.7993 ', 'GAN acc 0.0000', 'Discriminator loss 0.0582', 'Discriminator accuracy 0.9883', 'Total loss: 4.8575', 'for batch', 5)
('GAN loss 4.7743 ', 'GAN acc 0.0000', 'Discriminator loss 0.0184', 'Discriminator accuracy 0.9961', 'Total loss: 4.7927', 'for batch', 6)
('GAN loss 4.8238 ', 'GAN acc 0.0000', 'Discriminator loss 0.0141', 'Discriminator accuracy 0.9980', 'Total loss: 4.8379', 'for batch', 7)
('GAN loss 4.7207 ', 'GAN acc 0.0000', 'Discriminator loss 0.0415', 'Discriminator accuracy 0.9922', 'Total loss: 4.7622', 'for batch', 8)
('GAN loss 4.7125 ', 'GAN acc 0.0000', 'Discriminator loss 0.0227', 'Discriminator accuracy 0.9961', 'Total loss: 4.7352', 'for batch', 9)
('GAN loss 4.5749 ', 'GAN acc 0.0000', 'Discriminator loss 0.0455', 'Discriminator accuracy 0.9902', 'Total loss: 4.6204', 'for batch', 10)
('GAN loss 4.5034 ', 'GAN acc 0.0000', 'Discriminator loss 0.0339', 'Discriminator accuracy 0.9941', 'Total loss: 4.5373', 'for batch', 11)
('GAN loss 4.4409 ', 'GAN acc 0.0000', 'Discriminator loss 0.0352', 'Discriminator accuracy 0.9941', 'Total loss: 4.4761', 'for batch', 12)
('GAN loss 4.5926 ', 'GAN acc 0.0000', 'Discriminator loss 0.0152', 'Discriminator accuracy 0.9980', 'Total loss: 4.6077', 'for batch', 13)
('GAN loss 4.3974 ', 'GAN acc 0.0000', 'Discriminator loss 0.0682', 'Discriminator accuracy 0.9863', 'Total loss: 4.4656', 'for batch', 14)
('GAN loss 4.0236 ', 'GAN acc 0.0000', 'Discriminator loss 0.0691', 'Discriminator accuracy 0.9844', 'Total loss: 4.0927', 'for batch', 15)
('GAN loss 3.6189 ', 'GAN acc 0.0000', 'Discriminator loss 0.0326', 'Discriminator accuracy 0.9941', 'Total loss: 3.6514', 'for batch', 16)
('GAN loss 4.4750 ', 'GAN acc 0.0000', 'Discriminator loss 0.0305', 'Discriminator accuracy 0.9961', 'Total loss: 4.5055', 'for batch', 17)
('GAN loss 4.6761 ', 'GAN acc 0.0000', 'Discriminator loss 0.0314', 'Discriminator accuracy 0.9941', 'Total loss: 4.7075', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99442089)
('DISCRIMINATOR_Imagem FAKE=', 0.0095698219)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.126398')
----------------------------------
('Epoch', 47, 'of', 50)
('Number of batches', 19)
('GAN loss 4.8347 ', 'GAN acc 0.0000', 'Discriminator loss 0.0237', 'Discriminator accuracy 0.9961', 'Total loss: 4.8584', 'for batch', 0)
('GAN loss 4.8469 ', 'GAN acc 0.0000', 'Discriminator loss 0.0295', 'Discriminator accuracy 0.9941', 'Total loss: 4.8763', 'for batch', 1)
('GAN loss 5.0112 ', 'GAN acc 0.0000', 'Discriminator loss 0.0039', 'Discriminator accuracy 1.0000', 'Total loss: 5.0151', 'for batch', 2)
('GAN loss 5.0346 ', 'GAN acc 0.0000', 'Discriminator loss 0.0208', 'Discriminator accuracy 0.9941', 'Total loss: 5.0554', 'for batch', 3)
('GAN loss 5.1282 ', 'GAN acc 0.0000', 'Discriminator loss 0.0037', 'Discriminator accuracy 1.0000', 'Total loss: 5.1318', 'for batch', 4)
('GAN loss 4.9374 ', 'GAN acc 0.0000', 'Discriminator loss 0.0536', 'Discriminator accuracy 0.9883', 'Total loss: 4.9909', 'for batch', 5)
('GAN loss 4.8353 ', 'GAN acc 0.0000', 'Discriminator loss 0.0171', 'Discriminator accuracy 0.9961', 'Total loss: 4.8524', 'for batch', 6)
('GAN loss 4.8956 ', 'GAN acc 0.0000', 'Discriminator loss 0.0126', 'Discriminator accuracy 0.9980', 'Total loss: 4.9081', 'for batch', 7)
('GAN loss 4.7603 ', 'GAN acc 0.0000', 'Discriminator loss 0.0400', 'Discriminator accuracy 0.9922', 'Total loss: 4.8003', 'for batch', 8)
('GAN loss 4.7502 ', 'GAN acc 0.0000', 'Discriminator loss 0.0221', 'Discriminator accuracy 0.9961', 'Total loss: 4.7723', 'for batch', 9)
('GAN loss 4.6696 ', 'GAN acc 0.0000', 'Discriminator loss 0.0410', 'Discriminator accuracy 0.9922', 'Total loss: 4.7106', 'for batch', 10)
('GAN loss 4.3222 ', 'GAN acc 0.0000', 'Discriminator loss 0.0369', 'Discriminator accuracy 0.9902', 'Total loss: 4.3591', 'for batch', 11)
('GAN loss 4.1612 ', 'GAN acc 0.0000', 'Discriminator loss 0.0361', 'Discriminator accuracy 0.9941', 'Total loss: 4.1974', 'for batch', 12)
('GAN loss 4.3896 ', 'GAN acc 0.0000', 'Discriminator loss 0.0181', 'Discriminator accuracy 0.9980', 'Total loss: 4.4077', 'for batch', 13)
('GAN loss 4.2537 ', 'GAN acc 0.0000', 'Discriminator loss 0.0663', 'Discriminator accuracy 0.9863', 'Total loss: 4.3200', 'for batch', 14)
('GAN loss 4.0714 ', 'GAN acc 0.0000', 'Discriminator loss 0.0717', 'Discriminator accuracy 0.9844', 'Total loss: 4.1432', 'for batch', 15)
('GAN loss 3.9306 ', 'GAN acc 0.0000', 'Discriminator loss 0.0406', 'Discriminator accuracy 0.9902', 'Total loss: 3.9712', 'for batch', 16)
('GAN loss 4.3992 ', 'GAN acc 0.0000', 'Discriminator loss 0.0296', 'Discriminator accuracy 0.9961', 'Total loss: 4.4289', 'for batch', 17)
('GAN loss 4.6648 ', 'GAN acc 0.0000', 'Discriminator loss 0.0336', 'Discriminator accuracy 0.9941', 'Total loss: 4.6984', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99368876)
('DISCRIMINATOR_Imagem FAKE=', 0.009654345)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.715356')
----------------------------------
('Epoch', 48, 'of', 50)
('Number of batches', 19)
('GAN loss 4.8021 ', 'GAN acc 0.0000', 'Discriminator loss 0.0236', 'Discriminator accuracy 0.9961', 'Total loss: 4.8257', 'for batch', 0)
('GAN loss 4.8322 ', 'GAN acc 0.0000', 'Discriminator loss 0.0294', 'Discriminator accuracy 0.9941', 'Total loss: 4.8616', 'for batch', 1)
('GAN loss 4.9381 ', 'GAN acc 0.0000', 'Discriminator loss 0.0043', 'Discriminator accuracy 1.0000', 'Total loss: 4.9423', 'for batch', 2)
('GAN loss 4.9432 ', 'GAN acc 0.0000', 'Discriminator loss 0.0197', 'Discriminator accuracy 0.9941', 'Total loss: 4.9629', 'for batch', 3)
('GAN loss 5.0144 ', 'GAN acc 0.0000', 'Discriminator loss 0.0065', 'Discriminator accuracy 0.9980', 'Total loss: 5.0209', 'for batch', 4)
('GAN loss 4.7658 ', 'GAN acc 0.0000', 'Discriminator loss 0.0587', 'Discriminator accuracy 0.9883', 'Total loss: 4.8245', 'for batch', 5)
('GAN loss 4.7173 ', 'GAN acc 0.0000', 'Discriminator loss 0.0171', 'Discriminator accuracy 0.9961', 'Total loss: 4.7343', 'for batch', 6)
('GAN loss 4.7690 ', 'GAN acc 0.0000', 'Discriminator loss 0.0128', 'Discriminator accuracy 0.9980', 'Total loss: 4.7818', 'for batch', 7)
('GAN loss 4.6920 ', 'GAN acc 0.0000', 'Discriminator loss 0.0417', 'Discriminator accuracy 0.9922', 'Total loss: 4.7337', 'for batch', 8)
('GAN loss 4.6674 ', 'GAN acc 0.0000', 'Discriminator loss 0.0224', 'Discriminator accuracy 0.9961', 'Total loss: 4.6898', 'for batch', 9)
('GAN loss 4.6260 ', 'GAN acc 0.0000', 'Discriminator loss 0.0407', 'Discriminator accuracy 0.9922', 'Total loss: 4.6667', 'for batch', 10)
('GAN loss 4.4985 ', 'GAN acc 0.0000', 'Discriminator loss 0.0325', 'Discriminator accuracy 0.9902', 'Total loss: 4.5310', 'for batch', 11)
('GAN loss 4.4483 ', 'GAN acc 0.0000', 'Discriminator loss 0.0327', 'Discriminator accuracy 0.9941', 'Total loss: 4.4809', 'for batch', 12)
('GAN loss 4.5228 ', 'GAN acc 0.0000', 'Discriminator loss 0.0150', 'Discriminator accuracy 0.9980', 'Total loss: 4.5379', 'for batch', 13)
('GAN loss 4.3877 ', 'GAN acc 0.0000', 'Discriminator loss 0.0659', 'Discriminator accuracy 0.9863', 'Total loss: 4.4535', 'for batch', 14)
('GAN loss 4.1451 ', 'GAN acc 0.0000', 'Discriminator loss 0.0672', 'Discriminator accuracy 0.9844', 'Total loss: 4.2123', 'for batch', 15)
('GAN loss 3.9305 ', 'GAN acc 0.0000', 'Discriminator loss 0.0361', 'Discriminator accuracy 0.9922', 'Total loss: 3.9666', 'for batch', 16)
('GAN loss 4.1614 ', 'GAN acc 0.0000', 'Discriminator loss 0.0276', 'Discriminator accuracy 0.9961', 'Total loss: 4.1890', 'for batch', 17)
('GAN loss 4.9823 ', 'GAN acc 0.0000', 'Discriminator loss 0.0512', 'Discriminator accuracy 0.9902', 'Total loss: 5.0334', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99174541)
('DISCRIMINATOR_Imagem FAKE=', 0.013206755)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.161426')
----------------------------------
('Epoch', 49, 'of', 50)
('Number of batches', 19)
('GAN loss 5.0525 ', 'GAN acc 0.0000', 'Discriminator loss 0.0238', 'Discriminator accuracy 0.9961', 'Total loss: 5.0763', 'for batch', 0)
('GAN loss 4.9315 ', 'GAN acc 0.0000', 'Discriminator loss 0.0349', 'Discriminator accuracy 0.9941', 'Total loss: 4.9664', 'for batch', 1)
('GAN loss 5.2261 ', 'GAN acc 0.0000', 'Discriminator loss 0.0074', 'Discriminator accuracy 1.0000', 'Total loss: 5.2335', 'for batch', 2)
('GAN loss 4.4622 ', 'GAN acc 0.0000', 'Discriminator loss 0.0384', 'Discriminator accuracy 0.9922', 'Total loss: 4.5006', 'for batch', 3)
('GAN loss 4.7574 ', 'GAN acc 0.0000', 'Discriminator loss 0.0157', 'Discriminator accuracy 0.9980', 'Total loss: 4.7731', 'for batch', 4)
('GAN loss 4.3714 ', 'GAN acc 0.0000', 'Discriminator loss 0.0770', 'Discriminator accuracy 0.9863', 'Total loss: 4.4484', 'for batch', 5)
('GAN loss 4.2957 ', 'GAN acc 0.0000', 'Discriminator loss 0.0263', 'Discriminator accuracy 0.9961', 'Total loss: 4.3221', 'for batch', 6)
('GAN loss 4.4236 ', 'GAN acc 0.0000', 'Discriminator loss 0.0171', 'Discriminator accuracy 0.9980', 'Total loss: 4.4407', 'for batch', 7)
('GAN loss 4.5724 ', 'GAN acc 0.0000', 'Discriminator loss 0.0483', 'Discriminator accuracy 0.9922', 'Total loss: 4.6207', 'for batch', 8)
('GAN loss 4.8883 ', 'GAN acc 0.0000', 'Discriminator loss 0.0240', 'Discriminator accuracy 0.9961', 'Total loss: 4.9123', 'for batch', 9)
('GAN loss 4.6614 ', 'GAN acc 0.0000', 'Discriminator loss 0.0512', 'Discriminator accuracy 0.9922', 'Total loss: 4.7125', 'for batch', 10)
('GAN loss 4.3041 ', 'GAN acc 0.0000', 'Discriminator loss 0.0432', 'Discriminator accuracy 0.9902', 'Total loss: 4.3473', 'for batch', 11)
('GAN loss 4.2039 ', 'GAN acc 0.0000', 'Discriminator loss 0.0394', 'Discriminator accuracy 0.9922', 'Total loss: 4.2432', 'for batch', 12)
('GAN loss 4.2744 ', 'GAN acc 0.0000', 'Discriminator loss 0.0160', 'Discriminator accuracy 0.9980', 'Total loss: 4.2904', 'for batch', 13)
('GAN loss 4.1963 ', 'GAN acc 0.0000', 'Discriminator loss 0.0734', 'Discriminator accuracy 0.9863', 'Total loss: 4.2697', 'for batch', 14)
('GAN loss 3.9472 ', 'GAN acc 0.0000', 'Discriminator loss 0.0816', 'Discriminator accuracy 0.9844', 'Total loss: 4.0288', 'for batch', 15)
('GAN loss 3.8613 ', 'GAN acc 0.0000', 'Discriminator loss 0.0409', 'Discriminator accuracy 0.9922', 'Total loss: 3.9022', 'for batch', 16)
('GAN loss 3.9828 ', 'GAN acc 0.0000', 'Discriminator loss 0.0246', 'Discriminator accuracy 0.9961', 'Total loss: 4.0074', 'for batch', 17)
('GAN loss 4.1324 ', 'GAN acc 0.0000', 'Discriminator loss 0.0316', 'Discriminator accuracy 0.9941', 'Total loss: 4.1640', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99451977)
('DISCRIMINATOR_Imagem FAKE=', 0.019591665)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.740683')
----------------------------------
('Epoch', 50, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2738 ', 'GAN acc 0.0000', 'Discriminator loss 0.0234', 'Discriminator accuracy 0.9961', 'Total loss: 4.2972', 'for batch', 0)
('GAN loss 4.3623 ', 'GAN acc 0.0000', 'Discriminator loss 0.0314', 'Discriminator accuracy 0.9941', 'Total loss: 4.3937', 'for batch', 1)
('GAN loss 4.5617 ', 'GAN acc 0.0000', 'Discriminator loss 0.0068', 'Discriminator accuracy 1.0000', 'Total loss: 4.5684', 'for batch', 2)
('GAN loss 4.5989 ', 'GAN acc 0.0000', 'Discriminator loss 0.0172', 'Discriminator accuracy 0.9961', 'Total loss: 4.6161', 'for batch', 3)
('GAN loss 4.6137 ', 'GAN acc 0.0000', 'Discriminator loss 0.0068', 'Discriminator accuracy 1.0000', 'Total loss: 4.6206', 'for batch', 4)
('GAN loss 4.4958 ', 'GAN acc 0.0000', 'Discriminator loss 0.0581', 'Discriminator accuracy 0.9883', 'Total loss: 4.5539', 'for batch', 5)
('GAN loss 4.5490 ', 'GAN acc 0.0000', 'Discriminator loss 0.0280', 'Discriminator accuracy 0.9961', 'Total loss: 4.5770', 'for batch', 6)
('GAN loss 4.6690 ', 'GAN acc 0.0000', 'Discriminator loss 0.0150', 'Discriminator accuracy 0.9980', 'Total loss: 4.6840', 'for batch', 7)
('GAN loss 4.6456 ', 'GAN acc 0.0000', 'Discriminator loss 0.0419', 'Discriminator accuracy 0.9922', 'Total loss: 4.6875', 'for batch', 8)
('GAN loss 4.6204 ', 'GAN acc 0.0000', 'Discriminator loss 0.0236', 'Discriminator accuracy 0.9961', 'Total loss: 4.6440', 'for batch', 9)
('GAN loss 4.5771 ', 'GAN acc 0.0000', 'Discriminator loss 0.0484', 'Discriminator accuracy 0.9922', 'Total loss: 4.6255', 'for batch', 10)
('GAN loss 4.4785 ', 'GAN acc 0.0000', 'Discriminator loss 0.0342', 'Discriminator accuracy 0.9941', 'Total loss: 4.5127', 'for batch', 11)
('GAN loss 4.4256 ', 'GAN acc 0.0000', 'Discriminator loss 0.0341', 'Discriminator accuracy 0.9941', 'Total loss: 4.4597', 'for batch', 12)
('GAN loss 4.5095 ', 'GAN acc 0.0000', 'Discriminator loss 0.0147', 'Discriminator accuracy 0.9980', 'Total loss: 4.5242', 'for batch', 13)
('GAN loss 4.3474 ', 'GAN acc 0.0000', 'Discriminator loss 0.0706', 'Discriminator accuracy 0.9863', 'Total loss: 4.4180', 'for batch', 14)
('GAN loss 4.0360 ', 'GAN acc 0.0000', 'Discriminator loss 0.0799', 'Discriminator accuracy 0.9844', 'Total loss: 4.1159', 'for batch', 15)
('GAN loss 3.8533 ', 'GAN acc 0.0000', 'Discriminator loss 0.0361', 'Discriminator accuracy 0.9922', 'Total loss: 3.8895', 'for batch', 16)
('GAN loss 3.9963 ', 'GAN acc 0.0000', 'Discriminator loss 0.0258', 'Discriminator accuracy 0.9961', 'Total loss: 4.0221', 'for batch', 17)
('GAN loss 4.1763 ', 'GAN acc 0.0000', 'Discriminator loss 0.0330', 'Discriminator accuracy 0.9941', 'Total loss: 4.2093', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.99504846)
('DISCRIMINATOR_Imagem FAKE=', 0.015104452)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.154956')
----------------------------------
End of training
Saving histograms
----------------------------------
('Total samples = ', 5000, ' Batch size =', 256, ' Epochs = ', 50)
('Generator loss 4.1763 ', 'Discriminator loss 0.0330', 'Total: 4.2093')
----------------------------------
---DISCRIMINATOR---
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_1 (Convolution2D)  (None, 32, 16, 16)    608         convolution2d_input_1[0][0]      
____________________________________________________________________________________________________
leakyrelu_1 (LeakyReLU)          (None, 32, 16, 16)    0           convolution2d_1[0][0]            
____________________________________________________________________________________________________
dropout_1 (Dropout)              (None, 32, 16, 16)    0           leakyrelu_1[0][0]                
____________________________________________________________________________________________________
convolution2d_2 (Convolution2D)  (None, 64, 8, 8)      18496       dropout_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_2 (LeakyReLU)          (None, 64, 8, 8)      0           convolution2d_2[0][0]            
____________________________________________________________________________________________________
dropout_2 (Dropout)              (None, 64, 8, 8)      0           leakyrelu_2[0][0]                
____________________________________________________________________________________________________
convolution2d_3 (Convolution2D)  (None, 128, 4, 4)     73856       dropout_2[0][0]                  
____________________________________________________________________________________________________
leakyrelu_3 (LeakyReLU)          (None, 128, 4, 4)     0           convolution2d_3[0][0]            
____________________________________________________________________________________________________
dropout_3 (Dropout)              (None, 128, 4, 4)     0           leakyrelu_3[0][0]                
____________________________________________________________________________________________________
convolution2d_4 (Convolution2D)  (None, 256, 2, 2)     295168      dropout_3[0][0]                  
____________________________________________________________________________________________________
leakyrelu_4 (LeakyReLU)          (None, 256, 2, 2)     0           convolution2d_4[0][0]            
____________________________________________________________________________________________________
dropout_4 (Dropout)              (None, 256, 2, 2)     0           leakyrelu_4[0][0]                
____________________________________________________________________________________________________
flatten_1 (Flatten)              (None, 1024)          0           dropout_4[0][0]                  
____________________________________________________________________________________________________
dense_1 (Dense)                  (None, 1024)          1049600     flatten_1[0][0]                  
____________________________________________________________________________________________________
leakyrelu_5 (LeakyReLU)          (None, 1024)          0           dense_1[0][0]                    
____________________________________________________________________________________________________
dropout_5 (Dropout)              (None, 1024)          0           leakyrelu_5[0][0]                
____________________________________________________________________________________________________
dense_2 (Dense)                  (None, 1)             1025        dropout_5[0][0]                  
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
None
----------------------------------
---GENERATOR---
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_5 (Convolution2D)  (None, 32, 32, 32)    320         convolution2d_input_2[0][0]      
____________________________________________________________________________________________________
leakyrelu_6 (LeakyReLU)          (None, 32, 32, 32)    0           convolution2d_5[0][0]            
____________________________________________________________________________________________________
convolution2d_6 (Convolution2D)  (None, 64, 32, 32)    18496       leakyrelu_6[0][0]                
____________________________________________________________________________________________________
batchnormalization_1 (BatchNormal(None, 64, 32, 32)    128         convolution2d_6[0][0]            
____________________________________________________________________________________________________
leakyrelu_7 (LeakyReLU)          (None, 64, 32, 32)    0           batchnormalization_1[0][0]       
____________________________________________________________________________________________________
convolution2d_7 (Convolution2D)  (None, 128, 32, 32)   73856       leakyrelu_7[0][0]                
____________________________________________________________________________________________________
batchnormalization_2 (BatchNormal(None, 128, 32, 32)   256         convolution2d_7[0][0]            
____________________________________________________________________________________________________
leakyrelu_8 (LeakyReLU)          (None, 128, 32, 32)   0           batchnormalization_2[0][0]       
____________________________________________________________________________________________________
convolution2d_8 (Convolution2D)  (None, 256, 32, 32)   295168      leakyrelu_8[0][0]                
____________________________________________________________________________________________________
batchnormalization_3 (BatchNormal(None, 256, 32, 32)   512         convolution2d_8[0][0]            
____________________________________________________________________________________________________
leakyrelu_9 (LeakyReLU)          (None, 256, 32, 32)   0           batchnormalization_3[0][0]       
____________________________________________________________________________________________________
convolution2d_9 (Convolution2D)  (None, 128, 32, 32)   295040      leakyrelu_9[0][0]                
____________________________________________________________________________________________________
batchnormalization_4 (BatchNormal(None, 128, 32, 32)   256         convolution2d_9[0][0]            
____________________________________________________________________________________________________
leakyrelu_10 (LeakyReLU)         (None, 128, 32, 32)   0           batchnormalization_4[0][0]       
____________________________________________________________________________________________________
convolution2d_10 (Convolution2D) (None, 64, 32, 32)    73792       leakyrelu_10[0][0]               
____________________________________________________________________________________________________
batchnormalization_5 (BatchNormal(None, 64, 32, 32)    128         convolution2d_10[0][0]           
____________________________________________________________________________________________________
leakyrelu_11 (LeakyReLU)         (None, 64, 32, 32)    0           batchnormalization_5[0][0]       
____________________________________________________________________________________________________
convolution2d_11 (Convolution2D) (None, 32, 32, 32)    18464       leakyrelu_11[0][0]               
____________________________________________________________________________________________________
batchnormalization_6 (BatchNormal(None, 32, 32, 32)    64          convolution2d_11[0][0]           
____________________________________________________________________________________________________
leakyrelu_12 (LeakyReLU)         (None, 32, 32, 32)    0           batchnormalization_6[0][0]       
____________________________________________________________________________________________________
convolution2d_12 (Convolution2D) (None, 2, 32, 32)     578         leakyrelu_12[0][0]               
____________________________________________________________________________________________________
lambda_1 (Lambda)                (None, 2, 32, 32)     0           convolution2d_12[0][0]           
====================================================================================================
Total params: 777058
____________________________________________________________________________________________________
None
----------------------------------
---GAN---
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_2 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_1 (Sequential)        (None, 1)             0           lambda_1[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
None
----------------------------------
('Training with dataset based on class - ', 'ship', 'with', 5000, 'samples')
----------------------------------
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_5 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_4 (Sequential)        (None, 1)             0           lambda_2[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_13 (Convolution2D) (None, 32, 16, 16)    608         convolution2d_input_3[0][0]      
____________________________________________________________________________________________________
leakyrelu_13 (LeakyReLU)         (None, 32, 16, 16)    0           convolution2d_13[0][0]           
____________________________________________________________________________________________________
dropout_6 (Dropout)              (None, 32, 16, 16)    0           leakyrelu_13[0][0]               
____________________________________________________________________________________________________
convolution2d_14 (Convolution2D) (None, 64, 8, 8)      18496       dropout_6[0][0]                  
____________________________________________________________________________________________________
leakyrelu_14 (LeakyReLU)         (None, 64, 8, 8)      0           convolution2d_14[0][0]           
____________________________________________________________________________________________________
dropout_7 (Dropout)              (None, 64, 8, 8)      0           leakyrelu_14[0][0]               
____________________________________________________________________________________________________
convolution2d_15 (Convolution2D) (None, 128, 4, 4)     73856       dropout_7[0][0]                  
____________________________________________________________________________________________________
leakyrelu_15 (LeakyReLU)         (None, 128, 4, 4)     0           convolution2d_15[0][0]           
____________________________________________________________________________________________________
dropout_8 (Dropout)              (None, 128, 4, 4)     0           leakyrelu_15[0][0]               
____________________________________________________________________________________________________
convolution2d_16 (Convolution2D) (None, 256, 2, 2)     295168      dropout_8[0][0]                  
____________________________________________________________________________________________________
leakyrelu_16 (LeakyReLU)         (None, 256, 2, 2)     0           convolution2d_16[0][0]           
____________________________________________________________________________________________________
dropout_9 (Dropout)              (None, 256, 2, 2)     0           leakyrelu_16[0][0]               
____________________________________________________________________________________________________
flatten_2 (Flatten)              (None, 1024)          0           dropout_9[0][0]                  
____________________________________________________________________________________________________
dense_3 (Dense)                  (None, 1024)          1049600     flatten_2[0][0]                  
____________________________________________________________________________________________________
leakyrelu_17 (LeakyReLU)         (None, 1024)          0           dense_3[0][0]                    
____________________________________________________________________________________________________
dropout_10 (Dropout)             (None, 1024)          0           leakyrelu_17[0][0]               
____________________________________________________________________________________________________
dense_4 (Dense)                  (None, 1)             1025        dropout_10[0][0]                 
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
('Epoch', 1, 'of', 50)
('Number of batches', 19)
('GAN loss 1.8797 ', 'GAN acc 0.0195', 'Discriminator loss 0.7524', 'Discriminator accuracy 0.4844', 'Total loss: 2.6321', 'for batch', 0)
('GAN loss 2.7279 ', 'GAN acc 0.0000', 'Discriminator loss 0.5241', 'Discriminator accuracy 0.5176', 'Total loss: 3.2521', 'for batch', 1)
('GAN loss 3.0012 ', 'GAN acc 0.0000', 'Discriminator loss 0.4782', 'Discriminator accuracy 0.5273', 'Total loss: 3.4795', 'for batch', 2)
('GAN loss 2.9437 ', 'GAN acc 0.0000', 'Discriminator loss 0.4691', 'Discriminator accuracy 0.5137', 'Total loss: 3.4128', 'for batch', 3)
('GAN loss 2.5436 ', 'GAN acc 0.0000', 'Discriminator loss 0.4687', 'Discriminator accuracy 0.5410', 'Total loss: 3.0123', 'for batch', 4)
('GAN loss 2.2902 ', 'GAN acc 0.0000', 'Discriminator loss 0.4791', 'Discriminator accuracy 0.5859', 'Total loss: 2.7693', 'for batch', 5)
('GAN loss 2.1390 ', 'GAN acc 0.0000', 'Discriminator loss 0.4775', 'Discriminator accuracy 0.6562', 'Total loss: 2.6165', 'for batch', 6)
('GAN loss 2.1254 ', 'GAN acc 0.0000', 'Discriminator loss 0.4586', 'Discriminator accuracy 0.7246', 'Total loss: 2.5840', 'for batch', 7)
('GAN loss 2.2239 ', 'GAN acc 0.0000', 'Discriminator loss 0.4264', 'Discriminator accuracy 0.8184', 'Total loss: 2.6503', 'for batch', 8)
('GAN loss 2.0619 ', 'GAN acc 0.0000', 'Discriminator loss 0.4159', 'Discriminator accuracy 0.8672', 'Total loss: 2.4778', 'for batch', 9)
('GAN loss 2.2257 ', 'GAN acc 0.0000', 'Discriminator loss 0.3842', 'Discriminator accuracy 0.9082', 'Total loss: 2.6098', 'for batch', 10)
('GAN loss 2.2450 ', 'GAN acc 0.0000', 'Discriminator loss 0.3485', 'Discriminator accuracy 0.9355', 'Total loss: 2.5934', 'for batch', 11)
('GAN loss 2.2363 ', 'GAN acc 0.0117', 'Discriminator loss 0.3547', 'Discriminator accuracy 0.9238', 'Total loss: 2.5910', 'for batch', 12)
('GAN loss 2.6267 ', 'GAN acc 0.0234', 'Discriminator loss 0.2948', 'Discriminator accuracy 0.9531', 'Total loss: 2.9216', 'for batch', 13)
('GAN loss 3.0965 ', 'GAN acc 0.0391', 'Discriminator loss 0.3003', 'Discriminator accuracy 0.9199', 'Total loss: 3.3968', 'for batch', 14)
('GAN loss 2.5582 ', 'GAN acc 0.0234', 'Discriminator loss 0.2858', 'Discriminator accuracy 0.9473', 'Total loss: 2.8440', 'for batch', 15)
('GAN loss 2.1787 ', 'GAN acc 0.0547', 'Discriminator loss 0.3164', 'Discriminator accuracy 0.9043', 'Total loss: 2.4951', 'for batch', 16)
('GAN loss 2.7086 ', 'GAN acc 0.0000', 'Discriminator loss 0.2748', 'Discriminator accuracy 0.9590', 'Total loss: 2.9835', 'for batch', 17)
('GAN loss 1.3012 ', 'GAN acc 0.0898', 'Discriminator loss 0.3960', 'Discriminator accuracy 0.8457', 'Total loss: 1.6971', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.75753379)
('DISCRIMINATOR_Imagem FAKE=', 0.49360484)
('Discriminator trained', 7, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:34.577387')
----------------------------------
('Epoch', 2, 'of', 50)
('Number of batches', 19)
('GAN loss 0.8329 ', 'GAN acc 0.3672', 'Discriminator loss 0.5078', 'Discriminator accuracy 0.6914', 'Total loss: 1.3407', 'for batch', 0)
('GAN loss 0.6520 ', 'GAN acc 0.7109', 'Discriminator loss 0.5939', 'Discriminator accuracy 0.5098', 'Total loss: 1.2459', 'for batch', 1)
('GAN loss 0.6210 ', 'GAN acc 0.8633', 'Discriminator loss 0.6159', 'Discriminator accuracy 0.4473', 'Total loss: 1.2370', 'for batch', 2)
('GAN loss 0.6244 ', 'GAN acc 0.9297', 'Discriminator loss 0.5799', 'Discriminator accuracy 0.4492', 'Total loss: 1.2043', 'for batch', 3)
('GAN loss 0.6626 ', 'GAN acc 0.8438', 'Discriminator loss 0.5404', 'Discriminator accuracy 0.4629', 'Total loss: 1.2030', 'for batch', 4)
('GAN loss 0.7139 ', 'GAN acc 0.1445', 'Discriminator loss 0.5194', 'Discriminator accuracy 0.4746', 'Total loss: 1.2333', 'for batch', 5)
('GAN loss 0.7685 ', 'GAN acc 0.0000', 'Discriminator loss 0.4873', 'Discriminator accuracy 0.8477', 'Total loss: 1.2558', 'for batch', 6)
('GAN loss 0.8230 ', 'GAN acc 0.0000', 'Discriminator loss 0.4463', 'Discriminator accuracy 0.9297', 'Total loss: 1.2694', 'for batch', 7)
('GAN loss 0.8800 ', 'GAN acc 0.0000', 'Discriminator loss 0.4200', 'Discriminator accuracy 0.9355', 'Total loss: 1.3000', 'for batch', 8)
('GAN loss 0.9518 ', 'GAN acc 0.0000', 'Discriminator loss 0.3846', 'Discriminator accuracy 0.9355', 'Total loss: 1.3364', 'for batch', 9)
('GAN loss 1.0296 ', 'GAN acc 0.0000', 'Discriminator loss 0.3459', 'Discriminator accuracy 0.9629', 'Total loss: 1.3755', 'for batch', 10)
('GAN loss 1.1059 ', 'GAN acc 0.0000', 'Discriminator loss 0.3227', 'Discriminator accuracy 0.9492', 'Total loss: 1.4286', 'for batch', 11)
('GAN loss 1.9347 ', 'GAN acc 0.0000', 'Discriminator loss 0.4302', 'Discriminator accuracy 0.8574', 'Total loss: 2.3649', 'for batch', 12)
('GAN loss 1.5130 ', 'GAN acc 0.0000', 'Discriminator loss 0.2778', 'Discriminator accuracy 0.9355', 'Total loss: 1.7908', 'for batch', 13)
('GAN loss 1.6422 ', 'GAN acc 0.0000', 'Discriminator loss 0.2913', 'Discriminator accuracy 0.9062', 'Total loss: 1.9335', 'for batch', 14)
('GAN loss 1.7242 ', 'GAN acc 0.0000', 'Discriminator loss 0.2998', 'Discriminator accuracy 0.8965', 'Total loss: 2.0240', 'for batch', 15)
('GAN loss 1.9532 ', 'GAN acc 0.0000', 'Discriminator loss 0.2715', 'Discriminator accuracy 0.9062', 'Total loss: 2.2247', 'for batch', 16)
('GAN loss 1.7004 ', 'GAN acc 0.0000', 'Discriminator loss 0.2756', 'Discriminator accuracy 0.9102', 'Total loss: 1.9759', 'for batch', 17)
('GAN loss 2.0945 ', 'GAN acc 0.0000', 'Discriminator loss 0.2507', 'Discriminator accuracy 0.9238', 'Total loss: 2.3452', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.82841259)
('DISCRIMINATOR_Imagem FAKE=', 0.1704029)
('Discriminator trained', 5, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.050760')
----------------------------------
('Epoch', 3, 'of', 50)
('Number of batches', 19)
('GAN loss 2.1064 ', 'GAN acc 0.0000', 'Discriminator loss 0.2164', 'Discriminator accuracy 0.9336', 'Total loss: 2.3228', 'for batch', 0)
('GAN loss 1.9713 ', 'GAN acc 0.0000', 'Discriminator loss 0.2467', 'Discriminator accuracy 0.9102', 'Total loss: 2.2181', 'for batch', 1)
('GAN loss 1.8063 ', 'GAN acc 0.0000', 'Discriminator loss 0.2465', 'Discriminator accuracy 0.9062', 'Total loss: 2.0527', 'for batch', 2)
('GAN loss 2.2795 ', 'GAN acc 0.0000', 'Discriminator loss 0.2121', 'Discriminator accuracy 0.9453', 'Total loss: 2.4916', 'for batch', 3)
('GAN loss 2.2297 ', 'GAN acc 0.0000', 'Discriminator loss 0.1884', 'Discriminator accuracy 0.9414', 'Total loss: 2.4181', 'for batch', 4)
('GAN loss 2.2156 ', 'GAN acc 0.0000', 'Discriminator loss 0.1743', 'Discriminator accuracy 0.9395', 'Total loss: 2.3899', 'for batch', 5)
('GAN loss 2.1082 ', 'GAN acc 0.0000', 'Discriminator loss 0.1808', 'Discriminator accuracy 0.9453', 'Total loss: 2.2891', 'for batch', 6)
('GAN loss 2.5641 ', 'GAN acc 0.0000', 'Discriminator loss 0.1749', 'Discriminator accuracy 0.9551', 'Total loss: 2.7390', 'for batch', 7)
('GAN loss 2.3706 ', 'GAN acc 0.0000', 'Discriminator loss 0.1702', 'Discriminator accuracy 0.9473', 'Total loss: 2.5408', 'for batch', 8)
('GAN loss 2.3968 ', 'GAN acc 0.0000', 'Discriminator loss 0.1600', 'Discriminator accuracy 0.9531', 'Total loss: 2.5568', 'for batch', 9)
('GAN loss 2.6094 ', 'GAN acc 0.0000', 'Discriminator loss 0.1240', 'Discriminator accuracy 0.9707', 'Total loss: 2.7333', 'for batch', 10)
('GAN loss 2.5514 ', 'GAN acc 0.0000', 'Discriminator loss 0.1502', 'Discriminator accuracy 0.9590', 'Total loss: 2.7016', 'for batch', 11)
('GAN loss 2.6267 ', 'GAN acc 0.0000', 'Discriminator loss 0.1185', 'Discriminator accuracy 0.9688', 'Total loss: 2.7452', 'for batch', 12)
('GAN loss 2.6244 ', 'GAN acc 0.0000', 'Discriminator loss 0.1168', 'Discriminator accuracy 0.9727', 'Total loss: 2.7412', 'for batch', 13)
('GAN loss 2.6552 ', 'GAN acc 0.0000', 'Discriminator loss 0.1269', 'Discriminator accuracy 0.9609', 'Total loss: 2.7820', 'for batch', 14)
('GAN loss 2.5263 ', 'GAN acc 0.0000', 'Discriminator loss 0.1302', 'Discriminator accuracy 0.9551', 'Total loss: 2.6565', 'for batch', 15)
('GAN loss 3.1782 ', 'GAN acc 0.0000', 'Discriminator loss 0.1038', 'Discriminator accuracy 0.9766', 'Total loss: 3.2820', 'for batch', 16)
('GAN loss 2.7535 ', 'GAN acc 0.0000', 'Discriminator loss 0.1140', 'Discriminator accuracy 0.9648', 'Total loss: 2.8675', 'for batch', 17)
('GAN loss 2.8761 ', 'GAN acc 0.0000', 'Discriminator loss 0.0761', 'Discriminator accuracy 0.9883', 'Total loss: 2.9522', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.93375039)
('DISCRIMINATOR_Imagem FAKE=', 0.09550453)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.105637')
----------------------------------
('Epoch', 4, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0098 ', 'GAN acc 0.0000', 'Discriminator loss 0.1094', 'Discriminator accuracy 0.9785', 'Total loss: 4.1193', 'for batch', 0)
('GAN loss 3.0755 ', 'GAN acc 0.0000', 'Discriminator loss 0.1541', 'Discriminator accuracy 0.9551', 'Total loss: 3.2297', 'for batch', 1)
('GAN loss 2.4418 ', 'GAN acc 0.0000', 'Discriminator loss 0.1151', 'Discriminator accuracy 0.9629', 'Total loss: 2.5568', 'for batch', 2)
('GAN loss 3.2979 ', 'GAN acc 0.0000', 'Discriminator loss 0.0978', 'Discriminator accuracy 0.9785', 'Total loss: 3.3957', 'for batch', 3)
('GAN loss 3.0267 ', 'GAN acc 0.0000', 'Discriminator loss 0.0877', 'Discriminator accuracy 0.9746', 'Total loss: 3.1144', 'for batch', 4)
('GAN loss 3.0083 ', 'GAN acc 0.0000', 'Discriminator loss 0.0839', 'Discriminator accuracy 0.9746', 'Total loss: 3.0922', 'for batch', 5)
('GAN loss 4.5543 ', 'GAN acc 0.0000', 'Discriminator loss 0.0858', 'Discriminator accuracy 0.9746', 'Total loss: 4.6401', 'for batch', 6)
('GAN loss 3.4923 ', 'GAN acc 0.0000', 'Discriminator loss 0.0966', 'Discriminator accuracy 0.9766', 'Total loss: 3.5889', 'for batch', 7)
('GAN loss 3.0424 ', 'GAN acc 0.0000', 'Discriminator loss 0.1108', 'Discriminator accuracy 0.9727', 'Total loss: 3.1532', 'for batch', 8)
('GAN loss 3.1662 ', 'GAN acc 0.0000', 'Discriminator loss 0.1212', 'Discriminator accuracy 0.9746', 'Total loss: 3.2874', 'for batch', 9)
('GAN loss 3.7894 ', 'GAN acc 0.0000', 'Discriminator loss 0.0853', 'Discriminator accuracy 0.9824', 'Total loss: 3.8747', 'for batch', 10)
('GAN loss 3.2851 ', 'GAN acc 0.0000', 'Discriminator loss 0.0934', 'Discriminator accuracy 0.9707', 'Total loss: 3.3785', 'for batch', 11)
('GAN loss 3.2222 ', 'GAN acc 0.0000', 'Discriminator loss 0.0744', 'Discriminator accuracy 0.9824', 'Total loss: 3.2966', 'for batch', 12)
('GAN loss 3.4969 ', 'GAN acc 0.0000', 'Discriminator loss 0.0848', 'Discriminator accuracy 0.9805', 'Total loss: 3.5817', 'for batch', 13)
('GAN loss 3.1949 ', 'GAN acc 0.0000', 'Discriminator loss 0.0874', 'Discriminator accuracy 0.9824', 'Total loss: 3.2824', 'for batch', 14)
('GAN loss 2.9224 ', 'GAN acc 0.0000', 'Discriminator loss 0.0968', 'Discriminator accuracy 0.9707', 'Total loss: 3.0192', 'for batch', 15)
('GAN loss 3.2043 ', 'GAN acc 0.0000', 'Discriminator loss 0.0735', 'Discriminator accuracy 0.9863', 'Total loss: 3.2779', 'for batch', 16)
('GAN loss 4.1850 ', 'GAN acc 0.0000', 'Discriminator loss 0.1021', 'Discriminator accuracy 0.9805', 'Total loss: 4.2871', 'for batch', 17)
('GAN loss 4.1427 ', 'GAN acc 0.0000', 'Discriminator loss 0.0643', 'Discriminator accuracy 0.9824', 'Total loss: 4.2070', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.94027865)
('DISCRIMINATOR_Imagem FAKE=', 0.0156201)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.690101')
----------------------------------
('Epoch', 5, 'of', 50)
('Number of batches', 19)
('GAN loss 3.6251 ', 'GAN acc 0.0000', 'Discriminator loss 0.0888', 'Discriminator accuracy 0.9766', 'Total loss: 3.7139', 'for batch', 0)
('GAN loss 2.7972 ', 'GAN acc 0.0000', 'Discriminator loss 0.1158', 'Discriminator accuracy 0.9688', 'Total loss: 2.9130', 'for batch', 1)
('GAN loss 3.4342 ', 'GAN acc 0.0000', 'Discriminator loss 0.1037', 'Discriminator accuracy 0.9844', 'Total loss: 3.5379', 'for batch', 2)
('GAN loss 3.5067 ', 'GAN acc 0.0000', 'Discriminator loss 0.0868', 'Discriminator accuracy 0.9805', 'Total loss: 3.5935', 'for batch', 3)
('GAN loss 3.2819 ', 'GAN acc 0.0000', 'Discriminator loss 0.0935', 'Discriminator accuracy 0.9688', 'Total loss: 3.3754', 'for batch', 4)
('GAN loss 3.1528 ', 'GAN acc 0.0000', 'Discriminator loss 0.0717', 'Discriminator accuracy 0.9727', 'Total loss: 3.2245', 'for batch', 5)
('GAN loss 3.1788 ', 'GAN acc 0.0000', 'Discriminator loss 0.0755', 'Discriminator accuracy 0.9844', 'Total loss: 3.2542', 'for batch', 6)
('GAN loss 3.7769 ', 'GAN acc 0.0000', 'Discriminator loss 0.0869', 'Discriminator accuracy 0.9824', 'Total loss: 3.8639', 'for batch', 7)
('GAN loss 3.3583 ', 'GAN acc 0.0000', 'Discriminator loss 0.1054', 'Discriminator accuracy 0.9746', 'Total loss: 3.4638', 'for batch', 8)
('GAN loss 3.2229 ', 'GAN acc 0.0000', 'Discriminator loss 0.1126', 'Discriminator accuracy 0.9746', 'Total loss: 3.3355', 'for batch', 9)
('GAN loss 3.2280 ', 'GAN acc 0.0000', 'Discriminator loss 0.0767', 'Discriminator accuracy 0.9824', 'Total loss: 3.3047', 'for batch', 10)
('GAN loss 3.4945 ', 'GAN acc 0.0000', 'Discriminator loss 0.0761', 'Discriminator accuracy 0.9844', 'Total loss: 3.5706', 'for batch', 11)
('GAN loss 3.6954 ', 'GAN acc 0.0000', 'Discriminator loss 0.0449', 'Discriminator accuracy 0.9863', 'Total loss: 3.7403', 'for batch', 12)
('GAN loss 3.9296 ', 'GAN acc 0.0000', 'Discriminator loss 0.0665', 'Discriminator accuracy 0.9844', 'Total loss: 3.9961', 'for batch', 13)
('GAN loss 3.5446 ', 'GAN acc 0.0000', 'Discriminator loss 0.0740', 'Discriminator accuracy 0.9805', 'Total loss: 3.6186', 'for batch', 14)
('GAN loss 4.5344 ', 'GAN acc 0.0000', 'Discriminator loss 0.0972', 'Discriminator accuracy 0.9766', 'Total loss: 4.6316', 'for batch', 15)
('GAN loss 3.7793 ', 'GAN acc 0.0000', 'Discriminator loss 0.0760', 'Discriminator accuracy 0.9785', 'Total loss: 3.8552', 'for batch', 16)
('GAN loss 3.8522 ', 'GAN acc 0.0000', 'Discriminator loss 0.0833', 'Discriminator accuracy 0.9805', 'Total loss: 3.9355', 'for batch', 17)
('GAN loss 3.5779 ', 'GAN acc 0.0000', 'Discriminator loss 0.0518', 'Discriminator accuracy 0.9902', 'Total loss: 3.6297', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96077281)
('DISCRIMINATOR_Imagem FAKE=', 0.031711306)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.142998')
----------------------------------
('Epoch', 6, 'of', 50)
('Number of batches', 19)
('GAN loss 3.2535 ', 'GAN acc 0.0000', 'Discriminator loss 0.0757', 'Discriminator accuracy 0.9824', 'Total loss: 3.3292', 'for batch', 0)
('GAN loss 3.0414 ', 'GAN acc 0.0000', 'Discriminator loss 0.1103', 'Discriminator accuracy 0.9746', 'Total loss: 3.1517', 'for batch', 1)
('GAN loss 4.3647 ', 'GAN acc 0.0000', 'Discriminator loss 0.0942', 'Discriminator accuracy 0.9824', 'Total loss: 4.4589', 'for batch', 2)
('GAN loss 3.4629 ', 'GAN acc 0.0000', 'Discriminator loss 0.0860', 'Discriminator accuracy 0.9766', 'Total loss: 3.5489', 'for batch', 3)
('GAN loss 2.9064 ', 'GAN acc 0.0000', 'Discriminator loss 0.0716', 'Discriminator accuracy 0.9766', 'Total loss: 2.9780', 'for batch', 4)
('GAN loss 3.6194 ', 'GAN acc 0.0000', 'Discriminator loss 0.0652', 'Discriminator accuracy 0.9824', 'Total loss: 3.6846', 'for batch', 5)
('GAN loss 3.9620 ', 'GAN acc 0.0000', 'Discriminator loss 0.0515', 'Discriminator accuracy 0.9883', 'Total loss: 4.0135', 'for batch', 6)
('GAN loss 3.8058 ', 'GAN acc 0.0000', 'Discriminator loss 0.0674', 'Discriminator accuracy 0.9844', 'Total loss: 3.8732', 'for batch', 7)
('GAN loss 3.5459 ', 'GAN acc 0.0000', 'Discriminator loss 0.0849', 'Discriminator accuracy 0.9805', 'Total loss: 3.6308', 'for batch', 8)
('GAN loss 3.5292 ', 'GAN acc 0.0000', 'Discriminator loss 0.0936', 'Discriminator accuracy 0.9805', 'Total loss: 3.6228', 'for batch', 9)
('GAN loss 3.8299 ', 'GAN acc 0.0000', 'Discriminator loss 0.0722', 'Discriminator accuracy 0.9844', 'Total loss: 3.9020', 'for batch', 10)
('GAN loss 4.2418 ', 'GAN acc 0.0000', 'Discriminator loss 0.0534', 'Discriminator accuracy 0.9922', 'Total loss: 4.2952', 'for batch', 11)
('GAN loss 4.5356 ', 'GAN acc 0.0000', 'Discriminator loss 0.0302', 'Discriminator accuracy 0.9922', 'Total loss: 4.5658', 'for batch', 12)
('GAN loss 4.4163 ', 'GAN acc 0.0000', 'Discriminator loss 0.0534', 'Discriminator accuracy 0.9902', 'Total loss: 4.4697', 'for batch', 13)
('GAN loss 4.1128 ', 'GAN acc 0.0000', 'Discriminator loss 0.0507', 'Discriminator accuracy 0.9883', 'Total loss: 4.1635', 'for batch', 14)
('GAN loss 3.8504 ', 'GAN acc 0.0000', 'Discriminator loss 0.0657', 'Discriminator accuracy 0.9863', 'Total loss: 3.9160', 'for batch', 15)
('GAN loss 6.3316 ', 'GAN acc 0.0000', 'Discriminator loss 0.0964', 'Discriminator accuracy 0.9766', 'Total loss: 6.4280', 'for batch', 16)
('GAN loss 5.3480 ', 'GAN acc 0.0000', 'Discriminator loss 0.0720', 'Discriminator accuracy 0.9746', 'Total loss: 5.4200', 'for batch', 17)
('GAN loss 4.7665 ', 'GAN acc 0.0000', 'Discriminator loss 0.0451', 'Discriminator accuracy 0.9902', 'Total loss: 4.8116', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96135694)
('DISCRIMINATOR_Imagem FAKE=', 0.013608984)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.669596')
----------------------------------
('Epoch', 7, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1467 ', 'GAN acc 0.0039', 'Discriminator loss 0.0769', 'Discriminator accuracy 0.9844', 'Total loss: 4.2236', 'for batch', 0)
('GAN loss 3.3082 ', 'GAN acc 0.0000', 'Discriminator loss 0.0699', 'Discriminator accuracy 0.9824', 'Total loss: 3.3781', 'for batch', 1)
('GAN loss 3.1312 ', 'GAN acc 0.0000', 'Discriminator loss 0.0640', 'Discriminator accuracy 0.9883', 'Total loss: 3.1953', 'for batch', 2)
('GAN loss 3.7480 ', 'GAN acc 0.0039', 'Discriminator loss 0.0751', 'Discriminator accuracy 0.9824', 'Total loss: 3.8231', 'for batch', 3)
('GAN loss 4.1600 ', 'GAN acc 0.0078', 'Discriminator loss 0.0787', 'Discriminator accuracy 0.9805', 'Total loss: 4.2387', 'for batch', 4)
('GAN loss 4.3644 ', 'GAN acc 0.0039', 'Discriminator loss 0.0551', 'Discriminator accuracy 0.9863', 'Total loss: 4.4196', 'for batch', 5)
('GAN loss 3.9911 ', 'GAN acc 0.0000', 'Discriminator loss 0.0619', 'Discriminator accuracy 0.9863', 'Total loss: 4.0530', 'for batch', 6)
('GAN loss 3.6941 ', 'GAN acc 0.0039', 'Discriminator loss 0.0783', 'Discriminator accuracy 0.9844', 'Total loss: 3.7724', 'for batch', 7)
('GAN loss 3.8264 ', 'GAN acc 0.0000', 'Discriminator loss 0.1021', 'Discriminator accuracy 0.9746', 'Total loss: 3.9285', 'for batch', 8)
('GAN loss 3.3078 ', 'GAN acc 0.0000', 'Discriminator loss 0.0941', 'Discriminator accuracy 0.9785', 'Total loss: 3.4019', 'for batch', 9)
('GAN loss 3.2669 ', 'GAN acc 0.0000', 'Discriminator loss 0.0643', 'Discriminator accuracy 0.9844', 'Total loss: 3.3312', 'for batch', 10)
('GAN loss 3.5199 ', 'GAN acc 0.0000', 'Discriminator loss 0.0621', 'Discriminator accuracy 0.9863', 'Total loss: 3.5820', 'for batch', 11)
('GAN loss 3.8510 ', 'GAN acc 0.0000', 'Discriminator loss 0.0425', 'Discriminator accuracy 0.9883', 'Total loss: 3.8934', 'for batch', 12)
('GAN loss 3.8523 ', 'GAN acc 0.0000', 'Discriminator loss 0.0597', 'Discriminator accuracy 0.9883', 'Total loss: 3.9121', 'for batch', 13)
('GAN loss 4.0095 ', 'GAN acc 0.0039', 'Discriminator loss 0.0646', 'Discriminator accuracy 0.9844', 'Total loss: 4.0741', 'for batch', 14)
('GAN loss 3.5081 ', 'GAN acc 0.0000', 'Discriminator loss 0.0717', 'Discriminator accuracy 0.9844', 'Total loss: 3.5798', 'for batch', 15)
('GAN loss 5.3709 ', 'GAN acc 0.0000', 'Discriminator loss 0.0710', 'Discriminator accuracy 0.9844', 'Total loss: 5.4419', 'for batch', 16)
('GAN loss 4.1470 ', 'GAN acc 0.0000', 'Discriminator loss 0.0752', 'Discriminator accuracy 0.9766', 'Total loss: 4.2223', 'for batch', 17)
('GAN loss 3.8190 ', 'GAN acc 0.0000', 'Discriminator loss 0.0432', 'Discriminator accuracy 0.9922', 'Total loss: 3.8623', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96731257)
('DISCRIMINATOR_Imagem FAKE=', 0.022870094)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.149577')
----------------------------------
('Epoch', 8, 'of', 50)
('Number of batches', 19)
('GAN loss 3.3937 ', 'GAN acc 0.0000', 'Discriminator loss 0.0651', 'Discriminator accuracy 0.9844', 'Total loss: 3.4588', 'for batch', 0)
('GAN loss 3.1091 ', 'GAN acc 0.0000', 'Discriminator loss 0.0864', 'Discriminator accuracy 0.9805', 'Total loss: 3.1955', 'for batch', 1)
('GAN loss 4.1707 ', 'GAN acc 0.0000', 'Discriminator loss 0.0933', 'Discriminator accuracy 0.9863', 'Total loss: 4.2640', 'for batch', 2)
('GAN loss 5.1358 ', 'GAN acc 0.0000', 'Discriminator loss 0.0834', 'Discriminator accuracy 0.9766', 'Total loss: 5.2192', 'for batch', 3)
('GAN loss 4.1467 ', 'GAN acc 0.0000', 'Discriminator loss 0.0957', 'Discriminator accuracy 0.9727', 'Total loss: 4.2424', 'for batch', 4)
('GAN loss 3.3548 ', 'GAN acc 0.0000', 'Discriminator loss 0.0535', 'Discriminator accuracy 0.9824', 'Total loss: 3.4082', 'for batch', 5)
('GAN loss 4.5500 ', 'GAN acc 0.0000', 'Discriminator loss 0.0593', 'Discriminator accuracy 0.9902', 'Total loss: 4.6094', 'for batch', 6)
('GAN loss 3.5111 ', 'GAN acc 0.0000', 'Discriminator loss 0.0681', 'Discriminator accuracy 0.9863', 'Total loss: 3.5792', 'for batch', 7)
('GAN loss 3.2042 ', 'GAN acc 0.0000', 'Discriminator loss 0.1035', 'Discriminator accuracy 0.9727', 'Total loss: 3.3077', 'for batch', 8)
('GAN loss 3.4769 ', 'GAN acc 0.0000', 'Discriminator loss 0.0942', 'Discriminator accuracy 0.9785', 'Total loss: 3.5711', 'for batch', 9)
('GAN loss 3.5775 ', 'GAN acc 0.0000', 'Discriminator loss 0.0597', 'Discriminator accuracy 0.9863', 'Total loss: 3.6371', 'for batch', 10)
('GAN loss 3.5587 ', 'GAN acc 0.0000', 'Discriminator loss 0.0560', 'Discriminator accuracy 0.9883', 'Total loss: 3.6147', 'for batch', 11)
('GAN loss 3.8316 ', 'GAN acc 0.0000', 'Discriminator loss 0.0270', 'Discriminator accuracy 0.9922', 'Total loss: 3.8587', 'for batch', 12)
('GAN loss 3.8586 ', 'GAN acc 0.0000', 'Discriminator loss 0.0572', 'Discriminator accuracy 0.9863', 'Total loss: 3.9158', 'for batch', 13)
('GAN loss 4.3325 ', 'GAN acc 0.0000', 'Discriminator loss 0.0737', 'Discriminator accuracy 0.9824', 'Total loss: 4.4062', 'for batch', 14)
('GAN loss 4.2204 ', 'GAN acc 0.0000', 'Discriminator loss 0.0782', 'Discriminator accuracy 0.9844', 'Total loss: 4.2986', 'for batch', 15)
('GAN loss 3.8548 ', 'GAN acc 0.0000', 'Discriminator loss 0.0771', 'Discriminator accuracy 0.9805', 'Total loss: 3.9320', 'for batch', 16)
('GAN loss 4.0718 ', 'GAN acc 0.0000', 'Discriminator loss 0.0750', 'Discriminator accuracy 0.9844', 'Total loss: 4.1468', 'for batch', 17)
('GAN loss 4.2250 ', 'GAN acc 0.0000', 'Discriminator loss 0.0431', 'Discriminator accuracy 0.9922', 'Total loss: 4.2681', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96469712)
('DISCRIMINATOR_Imagem FAKE=', 0.03600654)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.676723')
----------------------------------
('Epoch', 9, 'of', 50)
('Number of batches', 19)
('GAN loss 3.9745 ', 'GAN acc 0.0000', 'Discriminator loss 0.0831', 'Discriminator accuracy 0.9844', 'Total loss: 4.0576', 'for batch', 0)
('GAN loss 3.1946 ', 'GAN acc 0.0000', 'Discriminator loss 0.1141', 'Discriminator accuracy 0.9746', 'Total loss: 3.3087', 'for batch', 1)
('GAN loss 3.3460 ', 'GAN acc 0.0000', 'Discriminator loss 0.0875', 'Discriminator accuracy 0.9805', 'Total loss: 3.4334', 'for batch', 2)
('GAN loss 4.2113 ', 'GAN acc 0.0000', 'Discriminator loss 0.0837', 'Discriminator accuracy 0.9805', 'Total loss: 4.2950', 'for batch', 3)
('GAN loss 3.2982 ', 'GAN acc 0.0000', 'Discriminator loss 0.0614', 'Discriminator accuracy 0.9844', 'Total loss: 3.3596', 'for batch', 4)
('GAN loss 3.4166 ', 'GAN acc 0.0000', 'Discriminator loss 0.0540', 'Discriminator accuracy 0.9844', 'Total loss: 3.4706', 'for batch', 5)
('GAN loss 3.8899 ', 'GAN acc 0.0000', 'Discriminator loss 0.0460', 'Discriminator accuracy 0.9941', 'Total loss: 3.9359', 'for batch', 6)
('GAN loss 4.4005 ', 'GAN acc 0.0000', 'Discriminator loss 0.0687', 'Discriminator accuracy 0.9863', 'Total loss: 4.4692', 'for batch', 7)
('GAN loss 5.5089 ', 'GAN acc 0.0000', 'Discriminator loss 0.1036', 'Discriminator accuracy 0.9727', 'Total loss: 5.6125', 'for batch', 8)
('GAN loss 4.4461 ', 'GAN acc 0.0000', 'Discriminator loss 0.1011', 'Discriminator accuracy 0.9805', 'Total loss: 4.5472', 'for batch', 9)
('GAN loss 3.9559 ', 'GAN acc 0.0000', 'Discriminator loss 0.0590', 'Discriminator accuracy 0.9863', 'Total loss: 4.0149', 'for batch', 10)
('GAN loss 3.6737 ', 'GAN acc 0.0000', 'Discriminator loss 0.0457', 'Discriminator accuracy 0.9922', 'Total loss: 3.7194', 'for batch', 11)
('GAN loss 3.7141 ', 'GAN acc 0.0000', 'Discriminator loss 0.0232', 'Discriminator accuracy 0.9961', 'Total loss: 3.7374', 'for batch', 12)
('GAN loss 3.7885 ', 'GAN acc 0.0000', 'Discriminator loss 0.0464', 'Discriminator accuracy 0.9902', 'Total loss: 3.8349', 'for batch', 13)
('GAN loss 3.8570 ', 'GAN acc 0.0000', 'Discriminator loss 0.0424', 'Discriminator accuracy 0.9902', 'Total loss: 3.8994', 'for batch', 14)
('GAN loss 3.9389 ', 'GAN acc 0.0000', 'Discriminator loss 0.0506', 'Discriminator accuracy 0.9883', 'Total loss: 3.9895', 'for batch', 15)
('GAN loss 4.0581 ', 'GAN acc 0.0000', 'Discriminator loss 0.0364', 'Discriminator accuracy 0.9941', 'Total loss: 4.0945', 'for batch', 16)
('GAN loss 4.0759 ', 'GAN acc 0.0000', 'Discriminator loss 0.0360', 'Discriminator accuracy 0.9922', 'Total loss: 4.1119', 'for batch', 17)
('GAN loss 4.2178 ', 'GAN acc 0.0000', 'Discriminator loss 0.0347', 'Discriminator accuracy 0.9941', 'Total loss: 4.2525', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97667581)
('DISCRIMINATOR_Imagem FAKE=', 0.016134311)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.188362')
----------------------------------
('Epoch', 10, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0101 ', 'GAN acc 0.0000', 'Discriminator loss 0.0664', 'Discriminator accuracy 0.9863', 'Total loss: 4.0765', 'for batch', 0)
('GAN loss 3.7839 ', 'GAN acc 0.0000', 'Discriminator loss 0.0552', 'Discriminator accuracy 0.9883', 'Total loss: 3.8391', 'for batch', 1)
('GAN loss 6.3288 ', 'GAN acc 0.0000', 'Discriminator loss 0.1415', 'Discriminator accuracy 0.9434', 'Total loss: 6.4703', 'for batch', 2)
('GAN loss 6.0418 ', 'GAN acc 0.0000', 'Discriminator loss 0.0914', 'Discriminator accuracy 0.9766', 'Total loss: 6.1331', 'for batch', 3)
('GAN loss 4.9932 ', 'GAN acc 0.0000', 'Discriminator loss 0.1367', 'Discriminator accuracy 0.9629', 'Total loss: 5.1299', 'for batch', 4)
('GAN loss 4.0755 ', 'GAN acc 0.0000', 'Discriminator loss 0.0503', 'Discriminator accuracy 0.9844', 'Total loss: 4.1258', 'for batch', 5)
('GAN loss 3.4207 ', 'GAN acc 0.0000', 'Discriminator loss 0.0517', 'Discriminator accuracy 0.9883', 'Total loss: 3.4725', 'for batch', 6)
('GAN loss 3.2266 ', 'GAN acc 0.0000', 'Discriminator loss 0.0582', 'Discriminator accuracy 0.9863', 'Total loss: 3.2848', 'for batch', 7)
('GAN loss 3.2961 ', 'GAN acc 0.0000', 'Discriminator loss 0.0681', 'Discriminator accuracy 0.9844', 'Total loss: 3.3642', 'for batch', 8)
('GAN loss 3.3800 ', 'GAN acc 0.0000', 'Discriminator loss 0.0820', 'Discriminator accuracy 0.9805', 'Total loss: 3.4620', 'for batch', 9)
('GAN loss 3.5913 ', 'GAN acc 0.0000', 'Discriminator loss 0.0544', 'Discriminator accuracy 0.9902', 'Total loss: 3.6457', 'for batch', 10)
('GAN loss 3.7419 ', 'GAN acc 0.0000', 'Discriminator loss 0.0476', 'Discriminator accuracy 0.9883', 'Total loss: 3.7895', 'for batch', 11)
('GAN loss 3.9069 ', 'GAN acc 0.0000', 'Discriminator loss 0.0240', 'Discriminator accuracy 0.9941', 'Total loss: 3.9309', 'for batch', 12)
('GAN loss 4.0076 ', 'GAN acc 0.0000', 'Discriminator loss 0.0480', 'Discriminator accuracy 0.9902', 'Total loss: 4.0556', 'for batch', 13)
('GAN loss 3.9840 ', 'GAN acc 0.0000', 'Discriminator loss 0.0376', 'Discriminator accuracy 0.9922', 'Total loss: 4.0216', 'for batch', 14)
('GAN loss 3.9581 ', 'GAN acc 0.0000', 'Discriminator loss 0.0508', 'Discriminator accuracy 0.9902', 'Total loss: 4.0089', 'for batch', 15)
('GAN loss 4.7353 ', 'GAN acc 0.0000', 'Discriminator loss 0.0660', 'Discriminator accuracy 0.9746', 'Total loss: 4.8013', 'for batch', 16)
('GAN loss 11.2242 ', 'GAN acc 0.0000', 'Discriminator loss 0.3983', 'Discriminator accuracy 0.9023', 'Total loss: 11.6224', 'for batch', 17)
('GAN loss 7.3059 ', 'GAN acc 0.0000', 'Discriminator loss 0.1743', 'Discriminator accuracy 0.9590', 'Total loss: 7.4802', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.87135464)
('DISCRIMINATOR_Imagem FAKE=', 0.00084251864)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.725313')
----------------------------------
('Epoch', 11, 'of', 50)
('Number of batches', 19)
('GAN loss 5.1326 ', 'GAN acc 0.0000', 'Discriminator loss 0.3581', 'Discriminator accuracy 0.9297', 'Total loss: 5.4907', 'for batch', 0)
('GAN loss 3.2404 ', 'GAN acc 0.0000', 'Discriminator loss 0.2472', 'Discriminator accuracy 0.9512', 'Total loss: 3.4876', 'for batch', 1)
('GAN loss 2.1955 ', 'GAN acc 0.0000', 'Discriminator loss 0.1049', 'Discriminator accuracy 0.9727', 'Total loss: 2.3005', 'for batch', 2)
('GAN loss 3.1279 ', 'GAN acc 0.0000', 'Discriminator loss 0.1016', 'Discriminator accuracy 0.9863', 'Total loss: 3.2295', 'for batch', 3)
('GAN loss 3.5515 ', 'GAN acc 0.0000', 'Discriminator loss 0.0640', 'Discriminator accuracy 0.9883', 'Total loss: 3.6155', 'for batch', 4)
('GAN loss 3.7502 ', 'GAN acc 0.0000', 'Discriminator loss 0.0466', 'Discriminator accuracy 0.9883', 'Total loss: 3.7968', 'for batch', 5)
('GAN loss 3.8730 ', 'GAN acc 0.0000', 'Discriminator loss 0.0486', 'Discriminator accuracy 0.9883', 'Total loss: 3.9216', 'for batch', 6)
('GAN loss 3.8129 ', 'GAN acc 0.0000', 'Discriminator loss 0.0629', 'Discriminator accuracy 0.9863', 'Total loss: 3.8759', 'for batch', 7)
('GAN loss 3.5839 ', 'GAN acc 0.0000', 'Discriminator loss 0.0794', 'Discriminator accuracy 0.9805', 'Total loss: 3.6633', 'for batch', 8)
('GAN loss 3.3593 ', 'GAN acc 0.0000', 'Discriminator loss 0.0847', 'Discriminator accuracy 0.9805', 'Total loss: 3.4440', 'for batch', 9)
('GAN loss 3.2829 ', 'GAN acc 0.0000', 'Discriminator loss 0.0680', 'Discriminator accuracy 0.9863', 'Total loss: 3.3509', 'for batch', 10)
('GAN loss 3.3783 ', 'GAN acc 0.0000', 'Discriminator loss 0.0545', 'Discriminator accuracy 0.9922', 'Total loss: 3.4328', 'for batch', 11)
('GAN loss 3.5364 ', 'GAN acc 0.0000', 'Discriminator loss 0.0454', 'Discriminator accuracy 0.9902', 'Total loss: 3.5818', 'for batch', 12)
('GAN loss 3.8549 ', 'GAN acc 0.0000', 'Discriminator loss 0.0667', 'Discriminator accuracy 0.9883', 'Total loss: 3.9215', 'for batch', 13)
('GAN loss 3.7673 ', 'GAN acc 0.0000', 'Discriminator loss 0.0699', 'Discriminator accuracy 0.9883', 'Total loss: 3.8372', 'for batch', 14)
('GAN loss 4.0021 ', 'GAN acc 0.0000', 'Discriminator loss 0.0745', 'Discriminator accuracy 0.9805', 'Total loss: 4.0765', 'for batch', 15)
('GAN loss 4.3901 ', 'GAN acc 0.0000', 'Discriminator loss 0.0484', 'Discriminator accuracy 0.9883', 'Total loss: 4.4385', 'for batch', 16)
('GAN loss 3.3915 ', 'GAN acc 0.0000', 'Discriminator loss 0.0741', 'Discriminator accuracy 0.9844', 'Total loss: 3.4657', 'for batch', 17)
('GAN loss 4.1507 ', 'GAN acc 0.0000', 'Discriminator loss 0.0422', 'Discriminator accuracy 0.9902', 'Total loss: 4.1929', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96604311)
('DISCRIMINATOR_Imagem FAKE=', 0.034612343)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.166849')
----------------------------------
('Epoch', 12, 'of', 50)
('Number of batches', 19)
('GAN loss 3.6518 ', 'GAN acc 0.0000', 'Discriminator loss 0.0772', 'Discriminator accuracy 0.9824', 'Total loss: 3.7289', 'for batch', 0)
('GAN loss 3.6734 ', 'GAN acc 0.0000', 'Discriminator loss 0.1021', 'Discriminator accuracy 0.9785', 'Total loss: 3.7755', 'for batch', 1)
('GAN loss 3.4393 ', 'GAN acc 0.0000', 'Discriminator loss 0.1041', 'Discriminator accuracy 0.9844', 'Total loss: 3.5434', 'for batch', 2)
('GAN loss 4.0675 ', 'GAN acc 0.0000', 'Discriminator loss 0.0839', 'Discriminator accuracy 0.9785', 'Total loss: 4.1514', 'for batch', 3)
('GAN loss 3.7512 ', 'GAN acc 0.0000', 'Discriminator loss 0.0706', 'Discriminator accuracy 0.9766', 'Total loss: 3.8218', 'for batch', 4)
('GAN loss 3.3831 ', 'GAN acc 0.0000', 'Discriminator loss 0.0539', 'Discriminator accuracy 0.9824', 'Total loss: 3.4371', 'for batch', 5)
('GAN loss 3.4427 ', 'GAN acc 0.0000', 'Discriminator loss 0.0565', 'Discriminator accuracy 0.9902', 'Total loss: 3.4991', 'for batch', 6)
('GAN loss 3.4688 ', 'GAN acc 0.0000', 'Discriminator loss 0.0633', 'Discriminator accuracy 0.9863', 'Total loss: 3.5321', 'for batch', 7)
('GAN loss 3.2436 ', 'GAN acc 0.0000', 'Discriminator loss 0.0960', 'Discriminator accuracy 0.9824', 'Total loss: 3.3397', 'for batch', 8)
('GAN loss 3.8950 ', 'GAN acc 0.0000', 'Discriminator loss 0.0935', 'Discriminator accuracy 0.9805', 'Total loss: 3.9885', 'for batch', 9)
('GAN loss 3.5670 ', 'GAN acc 0.0000', 'Discriminator loss 0.1102', 'Discriminator accuracy 0.9844', 'Total loss: 3.6772', 'for batch', 10)
('GAN loss 4.2667 ', 'GAN acc 0.0000', 'Discriminator loss 0.0606', 'Discriminator accuracy 0.9863', 'Total loss: 4.3273', 'for batch', 11)
('GAN loss 3.8939 ', 'GAN acc 0.0000', 'Discriminator loss 0.0416', 'Discriminator accuracy 0.9844', 'Total loss: 3.9356', 'for batch', 12)
('GAN loss 4.4275 ', 'GAN acc 0.0000', 'Discriminator loss 0.0779', 'Discriminator accuracy 0.9805', 'Total loss: 4.5053', 'for batch', 13)
('GAN loss 3.0266 ', 'GAN acc 0.0000', 'Discriminator loss 0.0924', 'Discriminator accuracy 0.9785', 'Total loss: 3.1189', 'for batch', 14)
('GAN loss 3.1367 ', 'GAN acc 0.0000', 'Discriminator loss 0.0860', 'Discriminator accuracy 0.9824', 'Total loss: 3.2227', 'for batch', 15)
('GAN loss 3.2960 ', 'GAN acc 0.0000', 'Discriminator loss 0.0841', 'Discriminator accuracy 0.9824', 'Total loss: 3.3801', 'for batch', 16)
('GAN loss 3.3895 ', 'GAN acc 0.0000', 'Discriminator loss 0.0823', 'Discriminator accuracy 0.9824', 'Total loss: 3.4718', 'for batch', 17)
('GAN loss 3.6373 ', 'GAN acc 0.0000', 'Discriminator loss 0.0575', 'Discriminator accuracy 0.9902', 'Total loss: 3.6948', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96103758)
('DISCRIMINATOR_Imagem FAKE=', 0.042777069)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.725311')
----------------------------------
('Epoch', 13, 'of', 50)
('Number of batches', 19)
('GAN loss 3.8184 ', 'GAN acc 0.0000', 'Discriminator loss 0.0880', 'Discriminator accuracy 0.9805', 'Total loss: 3.9064', 'for batch', 0)
('GAN loss 3.6139 ', 'GAN acc 0.0000', 'Discriminator loss 0.1081', 'Discriminator accuracy 0.9707', 'Total loss: 3.7220', 'for batch', 1)
('GAN loss 3.1697 ', 'GAN acc 0.0000', 'Discriminator loss 0.0713', 'Discriminator accuracy 0.9844', 'Total loss: 3.2410', 'for batch', 2)
('GAN loss 3.3508 ', 'GAN acc 0.0000', 'Discriminator loss 0.0843', 'Discriminator accuracy 0.9844', 'Total loss: 3.4351', 'for batch', 3)
('GAN loss 3.5539 ', 'GAN acc 0.0000', 'Discriminator loss 0.0972', 'Discriminator accuracy 0.9766', 'Total loss: 3.6511', 'for batch', 4)
('GAN loss 6.1503 ', 'GAN acc 0.0000', 'Discriminator loss 0.1539', 'Discriminator accuracy 0.9434', 'Total loss: 6.3041', 'for batch', 5)
('GAN loss 4.7494 ', 'GAN acc 0.0000', 'Discriminator loss 0.1295', 'Discriminator accuracy 0.9648', 'Total loss: 4.8788', 'for batch', 6)
('GAN loss 4.0767 ', 'GAN acc 0.0000', 'Discriminator loss 0.0989', 'Discriminator accuracy 0.9746', 'Total loss: 4.1756', 'for batch', 7)
('GAN loss 3.3637 ', 'GAN acc 0.0000', 'Discriminator loss 0.1136', 'Discriminator accuracy 0.9727', 'Total loss: 3.4773', 'for batch', 8)
('GAN loss 2.5724 ', 'GAN acc 0.0000', 'Discriminator loss 0.1022', 'Discriminator accuracy 0.9746', 'Total loss: 2.6745', 'for batch', 9)
('GAN loss 2.7198 ', 'GAN acc 0.0000', 'Discriminator loss 0.0820', 'Discriminator accuracy 0.9863', 'Total loss: 2.8018', 'for batch', 10)
('GAN loss 3.1485 ', 'GAN acc 0.0000', 'Discriminator loss 0.0698', 'Discriminator accuracy 0.9883', 'Total loss: 3.2182', 'for batch', 11)
('GAN loss 3.5847 ', 'GAN acc 0.0000', 'Discriminator loss 0.0424', 'Discriminator accuracy 0.9922', 'Total loss: 3.6271', 'for batch', 12)
('GAN loss 3.6983 ', 'GAN acc 0.0000', 'Discriminator loss 0.0734', 'Discriminator accuracy 0.9844', 'Total loss: 3.7716', 'for batch', 13)
('GAN loss 3.7229 ', 'GAN acc 0.0000', 'Discriminator loss 0.0686', 'Discriminator accuracy 0.9805', 'Total loss: 3.7915', 'for batch', 14)
('GAN loss 3.1423 ', 'GAN acc 0.0000', 'Discriminator loss 0.0678', 'Discriminator accuracy 0.9824', 'Total loss: 3.2101', 'for batch', 15)
('GAN loss 3.1705 ', 'GAN acc 0.0000', 'Discriminator loss 0.0642', 'Discriminator accuracy 0.9844', 'Total loss: 3.2347', 'for batch', 16)
('GAN loss 3.5104 ', 'GAN acc 0.0000', 'Discriminator loss 0.0603', 'Discriminator accuracy 0.9863', 'Total loss: 3.5707', 'for batch', 17)
('GAN loss 3.5951 ', 'GAN acc 0.0000', 'Discriminator loss 0.0484', 'Discriminator accuracy 0.9902', 'Total loss: 3.6435', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96571612)
('DISCRIMINATOR_Imagem FAKE=', 0.033108842)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.197530')
----------------------------------
('Epoch', 14, 'of', 50)
('Number of batches', 19)
('GAN loss 3.6779 ', 'GAN acc 0.0000', 'Discriminator loss 0.0692', 'Discriminator accuracy 0.9824', 'Total loss: 3.7471', 'for batch', 0)
('GAN loss 3.2470 ', 'GAN acc 0.0000', 'Discriminator loss 0.1074', 'Discriminator accuracy 0.9746', 'Total loss: 3.3545', 'for batch', 1)
('GAN loss 3.1313 ', 'GAN acc 0.0000', 'Discriminator loss 0.0777', 'Discriminator accuracy 0.9824', 'Total loss: 3.2090', 'for batch', 2)
('GAN loss 3.3566 ', 'GAN acc 0.0000', 'Discriminator loss 0.0791', 'Discriminator accuracy 0.9824', 'Total loss: 3.4357', 'for batch', 3)
('GAN loss 3.3579 ', 'GAN acc 0.0000', 'Discriminator loss 0.0681', 'Discriminator accuracy 0.9824', 'Total loss: 3.4259', 'for batch', 4)
('GAN loss 3.2538 ', 'GAN acc 0.0000', 'Discriminator loss 0.0703', 'Discriminator accuracy 0.9805', 'Total loss: 3.3241', 'for batch', 5)
('GAN loss 3.4661 ', 'GAN acc 0.0000', 'Discriminator loss 0.0735', 'Discriminator accuracy 0.9844', 'Total loss: 3.5395', 'for batch', 6)
('GAN loss 3.6753 ', 'GAN acc 0.0000', 'Discriminator loss 0.0705', 'Discriminator accuracy 0.9844', 'Total loss: 3.7458', 'for batch', 7)
('GAN loss 3.5525 ', 'GAN acc 0.0000', 'Discriminator loss 0.0937', 'Discriminator accuracy 0.9785', 'Total loss: 3.6463', 'for batch', 8)
('GAN loss 3.0802 ', 'GAN acc 0.0000', 'Discriminator loss 0.1017', 'Discriminator accuracy 0.9746', 'Total loss: 3.1819', 'for batch', 9)
('GAN loss 3.3636 ', 'GAN acc 0.0000', 'Discriminator loss 0.0612', 'Discriminator accuracy 0.9863', 'Total loss: 3.4248', 'for batch', 10)
('GAN loss 3.9606 ', 'GAN acc 0.0000', 'Discriminator loss 0.0618', 'Discriminator accuracy 0.9863', 'Total loss: 4.0224', 'for batch', 11)
('GAN loss 4.1698 ', 'GAN acc 0.0000', 'Discriminator loss 0.0357', 'Discriminator accuracy 0.9922', 'Total loss: 4.2055', 'for batch', 12)
('GAN loss 4.0509 ', 'GAN acc 0.0039', 'Discriminator loss 0.0810', 'Discriminator accuracy 0.9824', 'Total loss: 4.1319', 'for batch', 13)
('GAN loss 3.6924 ', 'GAN acc 0.0000', 'Discriminator loss 0.0733', 'Discriminator accuracy 0.9805', 'Total loss: 3.7657', 'for batch', 14)
('GAN loss 3.4360 ', 'GAN acc 0.0000', 'Discriminator loss 0.0610', 'Discriminator accuracy 0.9844', 'Total loss: 3.4970', 'for batch', 15)
('GAN loss 3.4878 ', 'GAN acc 0.0000', 'Discriminator loss 0.0609', 'Discriminator accuracy 0.9863', 'Total loss: 3.5487', 'for batch', 16)
('GAN loss 3.7564 ', 'GAN acc 0.0000', 'Discriminator loss 0.0614', 'Discriminator accuracy 0.9863', 'Total loss: 3.8177', 'for batch', 17)
('GAN loss 4.0355 ', 'GAN acc 0.0000', 'Discriminator loss 0.0440', 'Discriminator accuracy 0.9922', 'Total loss: 4.0795', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96298581)
('DISCRIMINATOR_Imagem FAKE=', 0.030889735)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.708624')
----------------------------------
('Epoch', 15, 'of', 50)
('Number of batches', 19)
('GAN loss 3.8146 ', 'GAN acc 0.0000', 'Discriminator loss 0.0678', 'Discriminator accuracy 0.9824', 'Total loss: 3.8824', 'for batch', 0)
('GAN loss 3.1126 ', 'GAN acc 0.0000', 'Discriminator loss 0.1180', 'Discriminator accuracy 0.9727', 'Total loss: 3.2307', 'for batch', 1)
('GAN loss 3.2399 ', 'GAN acc 0.0000', 'Discriminator loss 0.0797', 'Discriminator accuracy 0.9844', 'Total loss: 3.3196', 'for batch', 2)
('GAN loss 3.6387 ', 'GAN acc 0.0000', 'Discriminator loss 0.0626', 'Discriminator accuracy 0.9844', 'Total loss: 3.7012', 'for batch', 3)
('GAN loss 3.5877 ', 'GAN acc 0.0000', 'Discriminator loss 0.0634', 'Discriminator accuracy 0.9824', 'Total loss: 3.6510', 'for batch', 4)
('GAN loss 3.6776 ', 'GAN acc 0.0000', 'Discriminator loss 0.0594', 'Discriminator accuracy 0.9824', 'Total loss: 3.7371', 'for batch', 5)
('GAN loss 3.7151 ', 'GAN acc 0.0000', 'Discriminator loss 0.0575', 'Discriminator accuracy 0.9883', 'Total loss: 3.7726', 'for batch', 6)
('GAN loss 3.5288 ', 'GAN acc 0.0000', 'Discriminator loss 0.0592', 'Discriminator accuracy 0.9844', 'Total loss: 3.5880', 'for batch', 7)
('GAN loss 3.0646 ', 'GAN acc 0.0000', 'Discriminator loss 0.0765', 'Discriminator accuracy 0.9805', 'Total loss: 3.1410', 'for batch', 8)
('GAN loss 3.8546 ', 'GAN acc 0.0000', 'Discriminator loss 0.0858', 'Discriminator accuracy 0.9785', 'Total loss: 3.9405', 'for batch', 9)
('GAN loss 3.9953 ', 'GAN acc 0.0000', 'Discriminator loss 0.0451', 'Discriminator accuracy 0.9902', 'Total loss: 4.0405', 'for batch', 10)
('GAN loss 3.8679 ', 'GAN acc 0.0000', 'Discriminator loss 0.0536', 'Discriminator accuracy 0.9883', 'Total loss: 3.9215', 'for batch', 11)
('GAN loss 4.1825 ', 'GAN acc 0.0000', 'Discriminator loss 0.0284', 'Discriminator accuracy 0.9922', 'Total loss: 4.2110', 'for batch', 12)
('GAN loss 3.8828 ', 'GAN acc 0.0000', 'Discriminator loss 0.0626', 'Discriminator accuracy 0.9844', 'Total loss: 3.9454', 'for batch', 13)
('GAN loss 3.4700 ', 'GAN acc 0.0000', 'Discriminator loss 0.0513', 'Discriminator accuracy 0.9844', 'Total loss: 3.5214', 'for batch', 14)
('GAN loss 3.4351 ', 'GAN acc 0.0000', 'Discriminator loss 0.0522', 'Discriminator accuracy 0.9883', 'Total loss: 3.4872', 'for batch', 15)
('GAN loss 4.0172 ', 'GAN acc 0.0000', 'Discriminator loss 0.0489', 'Discriminator accuracy 0.9883', 'Total loss: 4.0661', 'for batch', 16)
('GAN loss 4.1696 ', 'GAN acc 0.0000', 'Discriminator loss 0.0560', 'Discriminator accuracy 0.9883', 'Total loss: 4.2257', 'for batch', 17)
('GAN loss 4.0776 ', 'GAN acc 0.0000', 'Discriminator loss 0.0392', 'Discriminator accuracy 0.9902', 'Total loss: 4.1168', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97084314)
('DISCRIMINATOR_Imagem FAKE=', 0.022884095)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.189049')
----------------------------------
('Epoch', 16, 'of', 50)
('Number of batches', 19)
('GAN loss 3.6000 ', 'GAN acc 0.0000', 'Discriminator loss 0.0655', 'Discriminator accuracy 0.9844', 'Total loss: 3.6655', 'for batch', 0)
('GAN loss 3.1639 ', 'GAN acc 0.0000', 'Discriminator loss 0.0737', 'Discriminator accuracy 0.9785', 'Total loss: 3.2377', 'for batch', 1)
('GAN loss 4.0695 ', 'GAN acc 0.0000', 'Discriminator loss 0.0661', 'Discriminator accuracy 0.9844', 'Total loss: 4.1356', 'for batch', 2)
('GAN loss 3.9976 ', 'GAN acc 0.0000', 'Discriminator loss 0.0637', 'Discriminator accuracy 0.9844', 'Total loss: 4.0613', 'for batch', 3)
('GAN loss 3.7013 ', 'GAN acc 0.0000', 'Discriminator loss 0.0582', 'Discriminator accuracy 0.9844', 'Total loss: 3.7594', 'for batch', 4)
('GAN loss 3.6072 ', 'GAN acc 0.0000', 'Discriminator loss 0.0535', 'Discriminator accuracy 0.9883', 'Total loss: 3.6607', 'for batch', 5)
('GAN loss 4.5920 ', 'GAN acc 0.0000', 'Discriminator loss 0.0505', 'Discriminator accuracy 0.9922', 'Total loss: 4.6425', 'for batch', 6)
('GAN loss 4.5005 ', 'GAN acc 0.0000', 'Discriminator loss 0.0661', 'Discriminator accuracy 0.9844', 'Total loss: 4.5666', 'for batch', 7)
('GAN loss 3.1899 ', 'GAN acc 0.0000', 'Discriminator loss 0.0827', 'Discriminator accuracy 0.9766', 'Total loss: 3.2726', 'for batch', 8)
('GAN loss 3.4942 ', 'GAN acc 0.0000', 'Discriminator loss 0.0796', 'Discriminator accuracy 0.9766', 'Total loss: 3.5738', 'for batch', 9)
('GAN loss 4.4437 ', 'GAN acc 0.0000', 'Discriminator loss 0.0529', 'Discriminator accuracy 0.9902', 'Total loss: 4.4965', 'for batch', 10)
('GAN loss 9.0148 ', 'GAN acc 0.0000', 'Discriminator loss 0.1111', 'Discriminator accuracy 0.9609', 'Total loss: 9.1259', 'for batch', 11)
('GAN loss 7.4598 ', 'GAN acc 0.0000', 'Discriminator loss 0.0688', 'Discriminator accuracy 0.9805', 'Total loss: 7.5285', 'for batch', 12)
('GAN loss 6.5340 ', 'GAN acc 0.0000', 'Discriminator loss 0.1233', 'Discriminator accuracy 0.9805', 'Total loss: 6.6573', 'for batch', 13)
('GAN loss 5.3119 ', 'GAN acc 0.0000', 'Discriminator loss 0.1049', 'Discriminator accuracy 0.9785', 'Total loss: 5.4169', 'for batch', 14)
('GAN loss 4.1399 ', 'GAN acc 0.0000', 'Discriminator loss 0.0765', 'Discriminator accuracy 0.9824', 'Total loss: 4.2164', 'for batch', 15)
('GAN loss 3.3056 ', 'GAN acc 0.0000', 'Discriminator loss 0.0435', 'Discriminator accuracy 0.9883', 'Total loss: 3.3491', 'for batch', 16)
('GAN loss 3.4877 ', 'GAN acc 0.0000', 'Discriminator loss 0.0529', 'Discriminator accuracy 0.9902', 'Total loss: 3.5406', 'for batch', 17)
('GAN loss 3.9671 ', 'GAN acc 0.0000', 'Discriminator loss 0.0410', 'Discriminator accuracy 0.9922', 'Total loss: 4.0081', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97076339)
('DISCRIMINATOR_Imagem FAKE=', 0.027755)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.691875')
----------------------------------
('Epoch', 17, 'of', 50)
('Number of batches', 19)
('GAN loss 3.9010 ', 'GAN acc 0.0000', 'Discriminator loss 0.0653', 'Discriminator accuracy 0.9844', 'Total loss: 3.9663', 'for batch', 0)
('GAN loss 3.3366 ', 'GAN acc 0.0000', 'Discriminator loss 0.0869', 'Discriminator accuracy 0.9766', 'Total loss: 3.4234', 'for batch', 1)
('GAN loss 3.2475 ', 'GAN acc 0.0000', 'Discriminator loss 0.0660', 'Discriminator accuracy 0.9844', 'Total loss: 3.3135', 'for batch', 2)
('GAN loss 3.4845 ', 'GAN acc 0.0000', 'Discriminator loss 0.0662', 'Discriminator accuracy 0.9844', 'Total loss: 3.5507', 'for batch', 3)
('GAN loss 3.6850 ', 'GAN acc 0.0000', 'Discriminator loss 0.0569', 'Discriminator accuracy 0.9883', 'Total loss: 3.7419', 'for batch', 4)
('GAN loss 3.6561 ', 'GAN acc 0.0000', 'Discriminator loss 0.0599', 'Discriminator accuracy 0.9844', 'Total loss: 3.7161', 'for batch', 5)
('GAN loss 3.9427 ', 'GAN acc 0.0000', 'Discriminator loss 0.0455', 'Discriminator accuracy 0.9922', 'Total loss: 3.9883', 'for batch', 6)
('GAN loss 4.6504 ', 'GAN acc 0.0039', 'Discriminator loss 0.1008', 'Discriminator accuracy 0.9648', 'Total loss: 4.7512', 'for batch', 7)
('GAN loss 4.7746 ', 'GAN acc 0.0000', 'Discriminator loss 0.1082', 'Discriminator accuracy 0.9727', 'Total loss: 4.8828', 'for batch', 8)
('GAN loss 4.1209 ', 'GAN acc 0.0000', 'Discriminator loss 0.1093', 'Discriminator accuracy 0.9766', 'Total loss: 4.2302', 'for batch', 9)
('GAN loss 3.4467 ', 'GAN acc 0.0000', 'Discriminator loss 0.0557', 'Discriminator accuracy 0.9883', 'Total loss: 3.5024', 'for batch', 10)
('GAN loss 3.3868 ', 'GAN acc 0.0000', 'Discriminator loss 0.0582', 'Discriminator accuracy 0.9863', 'Total loss: 3.4450', 'for batch', 11)
('GAN loss 3.8958 ', 'GAN acc 0.0000', 'Discriminator loss 0.0360', 'Discriminator accuracy 0.9941', 'Total loss: 3.9318', 'for batch', 12)
('GAN loss 3.9988 ', 'GAN acc 0.0000', 'Discriminator loss 0.0674', 'Discriminator accuracy 0.9805', 'Total loss: 4.0662', 'for batch', 13)
('GAN loss 3.8656 ', 'GAN acc 0.0000', 'Discriminator loss 0.0625', 'Discriminator accuracy 0.9844', 'Total loss: 3.9281', 'for batch', 14)
('GAN loss 3.6695 ', 'GAN acc 0.0000', 'Discriminator loss 0.0632', 'Discriminator accuracy 0.9844', 'Total loss: 3.7327', 'for batch', 15)
('GAN loss 3.7682 ', 'GAN acc 0.0039', 'Discriminator loss 0.0583', 'Discriminator accuracy 0.9863', 'Total loss: 3.8265', 'for batch', 16)
('GAN loss 3.9569 ', 'GAN acc 0.0000', 'Discriminator loss 0.0548', 'Discriminator accuracy 0.9902', 'Total loss: 4.0117', 'for batch', 17)
('GAN loss 5.1700 ', 'GAN acc 0.0000', 'Discriminator loss 0.0307', 'Discriminator accuracy 0.9941', 'Total loss: 5.2007', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96616262)
('DISCRIMINATOR_Imagem FAKE=', 0.017412286)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.212362')
----------------------------------
('Epoch', 18, 'of', 50)
('Number of batches', 19)
('GAN loss 3.9101 ', 'GAN acc 0.0000', 'Discriminator loss 0.0682', 'Discriminator accuracy 0.9844', 'Total loss: 3.9782', 'for batch', 0)
('GAN loss 3.3086 ', 'GAN acc 0.0000', 'Discriminator loss 0.0958', 'Discriminator accuracy 0.9746', 'Total loss: 3.4044', 'for batch', 1)
('GAN loss 3.2249 ', 'GAN acc 0.0000', 'Discriminator loss 0.0670', 'Discriminator accuracy 0.9844', 'Total loss: 3.2919', 'for batch', 2)
('GAN loss 3.7451 ', 'GAN acc 0.0000', 'Discriminator loss 0.0792', 'Discriminator accuracy 0.9785', 'Total loss: 3.8243', 'for batch', 3)
('GAN loss 3.8322 ', 'GAN acc 0.0000', 'Discriminator loss 0.0661', 'Discriminator accuracy 0.9844', 'Total loss: 3.8983', 'for batch', 4)
('GAN loss 3.5086 ', 'GAN acc 0.0000', 'Discriminator loss 0.0557', 'Discriminator accuracy 0.9844', 'Total loss: 3.5643', 'for batch', 5)
('GAN loss 3.7223 ', 'GAN acc 0.0000', 'Discriminator loss 0.0521', 'Discriminator accuracy 0.9883', 'Total loss: 3.7744', 'for batch', 6)
('GAN loss 3.7138 ', 'GAN acc 0.0000', 'Discriminator loss 0.0592', 'Discriminator accuracy 0.9844', 'Total loss: 3.7730', 'for batch', 7)
('GAN loss 3.2884 ', 'GAN acc 0.0000', 'Discriminator loss 0.0748', 'Discriminator accuracy 0.9805', 'Total loss: 3.3632', 'for batch', 8)
('GAN loss 3.0091 ', 'GAN acc 0.0000', 'Discriminator loss 0.0847', 'Discriminator accuracy 0.9785', 'Total loss: 3.0938', 'for batch', 9)
('GAN loss 3.9221 ', 'GAN acc 0.0000', 'Discriminator loss 0.0553', 'Discriminator accuracy 0.9902', 'Total loss: 3.9773', 'for batch', 10)
('GAN loss 4.2895 ', 'GAN acc 0.0000', 'Discriminator loss 0.0501', 'Discriminator accuracy 0.9883', 'Total loss: 4.3396', 'for batch', 11)
('GAN loss 4.3435 ', 'GAN acc 0.0000', 'Discriminator loss 0.0188', 'Discriminator accuracy 0.9941', 'Total loss: 4.3623', 'for batch', 12)
('GAN loss 4.0772 ', 'GAN acc 0.0000', 'Discriminator loss 0.0622', 'Discriminator accuracy 0.9844', 'Total loss: 4.1394', 'for batch', 13)
('GAN loss 3.7163 ', 'GAN acc 0.0000', 'Discriminator loss 0.0512', 'Discriminator accuracy 0.9863', 'Total loss: 3.7675', 'for batch', 14)
('GAN loss 3.5472 ', 'GAN acc 0.0000', 'Discriminator loss 0.0527', 'Discriminator accuracy 0.9883', 'Total loss: 3.5998', 'for batch', 15)
('GAN loss 3.8533 ', 'GAN acc 0.0000', 'Discriminator loss 0.0475', 'Discriminator accuracy 0.9902', 'Total loss: 3.9008', 'for batch', 16)
('GAN loss 4.0146 ', 'GAN acc 0.0000', 'Discriminator loss 0.0470', 'Discriminator accuracy 0.9883', 'Total loss: 4.0616', 'for batch', 17)
('GAN loss 4.1353 ', 'GAN acc 0.0000', 'Discriminator loss 0.0345', 'Discriminator accuracy 0.9922', 'Total loss: 4.1698', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97200096)
('DISCRIMINATOR_Imagem FAKE=', 0.019289847)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.713594')
----------------------------------
('Epoch', 19, 'of', 50)
('Number of batches', 19)
('GAN loss 3.8929 ', 'GAN acc 0.0000', 'Discriminator loss 0.0636', 'Discriminator accuracy 0.9844', 'Total loss: 3.9565', 'for batch', 0)
('GAN loss 3.1845 ', 'GAN acc 0.0000', 'Discriminator loss 0.0764', 'Discriminator accuracy 0.9785', 'Total loss: 3.2609', 'for batch', 1)
('GAN loss 3.5125 ', 'GAN acc 0.0000', 'Discriminator loss 0.0587', 'Discriminator accuracy 0.9863', 'Total loss: 3.5712', 'for batch', 2)
('GAN loss 3.6309 ', 'GAN acc 0.0000', 'Discriminator loss 0.0676', 'Discriminator accuracy 0.9844', 'Total loss: 3.6985', 'for batch', 3)
('GAN loss 3.7578 ', 'GAN acc 0.0000', 'Discriminator loss 0.0523', 'Discriminator accuracy 0.9863', 'Total loss: 3.8101', 'for batch', 4)
('GAN loss 3.6809 ', 'GAN acc 0.0000', 'Discriminator loss 0.0496', 'Discriminator accuracy 0.9863', 'Total loss: 3.7305', 'for batch', 5)
('GAN loss 4.2247 ', 'GAN acc 0.0000', 'Discriminator loss 0.0421', 'Discriminator accuracy 0.9922', 'Total loss: 4.2668', 'for batch', 6)
('GAN loss 4.0962 ', 'GAN acc 0.0000', 'Discriminator loss 0.0611', 'Discriminator accuracy 0.9844', 'Total loss: 4.1574', 'for batch', 7)
('GAN loss 3.4769 ', 'GAN acc 0.0000', 'Discriminator loss 0.0808', 'Discriminator accuracy 0.9805', 'Total loss: 3.5577', 'for batch', 8)
('GAN loss 3.0624 ', 'GAN acc 0.0000', 'Discriminator loss 0.0828', 'Discriminator accuracy 0.9805', 'Total loss: 3.1452', 'for batch', 9)
('GAN loss 4.7289 ', 'GAN acc 0.0000', 'Discriminator loss 0.0629', 'Discriminator accuracy 0.9902', 'Total loss: 4.7918', 'for batch', 10)
('GAN loss 5.0637 ', 'GAN acc 0.0000', 'Discriminator loss 0.0508', 'Discriminator accuracy 0.9902', 'Total loss: 5.1144', 'for batch', 11)
('GAN loss 4.8155 ', 'GAN acc 0.0000', 'Discriminator loss 0.0285', 'Discriminator accuracy 0.9883', 'Total loss: 4.8440', 'for batch', 12)
('GAN loss 4.2057 ', 'GAN acc 0.0000', 'Discriminator loss 0.0712', 'Discriminator accuracy 0.9844', 'Total loss: 4.2769', 'for batch', 13)
('GAN loss 5.2818 ', 'GAN acc 0.0000', 'Discriminator loss 0.0889', 'Discriminator accuracy 0.9785', 'Total loss: 5.3707', 'for batch', 14)
('GAN loss 5.4410 ', 'GAN acc 0.0000', 'Discriminator loss 0.0781', 'Discriminator accuracy 0.9863', 'Total loss: 5.5190', 'for batch', 15)
('GAN loss 5.1931 ', 'GAN acc 0.0000', 'Discriminator loss 0.0580', 'Discriminator accuracy 0.9883', 'Total loss: 5.2512', 'for batch', 16)
('GAN loss 4.7893 ', 'GAN acc 0.0000', 'Discriminator loss 0.0724', 'Discriminator accuracy 0.9785', 'Total loss: 4.8617', 'for batch', 17)
('GAN loss 4.2706 ', 'GAN acc 0.0000', 'Discriminator loss 0.0384', 'Discriminator accuracy 0.9922', 'Total loss: 4.3091', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96831304)
('DISCRIMINATOR_Imagem FAKE=', 0.015164383)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.165610')
----------------------------------
('Epoch', 20, 'of', 50)
('Number of batches', 19)
('GAN loss 3.5521 ', 'GAN acc 0.0000', 'Discriminator loss 0.0699', 'Discriminator accuracy 0.9844', 'Total loss: 3.6219', 'for batch', 0)
('GAN loss 3.1084 ', 'GAN acc 0.0000', 'Discriminator loss 0.0824', 'Discriminator accuracy 0.9766', 'Total loss: 3.1909', 'for batch', 1)
('GAN loss 3.7130 ', 'GAN acc 0.0000', 'Discriminator loss 0.0615', 'Discriminator accuracy 0.9844', 'Total loss: 3.7745', 'for batch', 2)
('GAN loss 3.9080 ', 'GAN acc 0.0000', 'Discriminator loss 0.0586', 'Discriminator accuracy 0.9844', 'Total loss: 3.9666', 'for batch', 3)
('GAN loss 3.8640 ', 'GAN acc 0.0000', 'Discriminator loss 0.0581', 'Discriminator accuracy 0.9883', 'Total loss: 3.9221', 'for batch', 4)
('GAN loss 3.9361 ', 'GAN acc 0.0000', 'Discriminator loss 0.0377', 'Discriminator accuracy 0.9922', 'Total loss: 3.9738', 'for batch', 5)
('GAN loss 4.2315 ', 'GAN acc 0.0000', 'Discriminator loss 0.0281', 'Discriminator accuracy 0.9922', 'Total loss: 4.2596', 'for batch', 6)
('GAN loss 4.1649 ', 'GAN acc 0.0000', 'Discriminator loss 0.0605', 'Discriminator accuracy 0.9863', 'Total loss: 4.2254', 'for batch', 7)
('GAN loss 3.7599 ', 'GAN acc 0.0000', 'Discriminator loss 0.0678', 'Discriminator accuracy 0.9844', 'Total loss: 3.8277', 'for batch', 8)
('GAN loss 3.2932 ', 'GAN acc 0.0039', 'Discriminator loss 0.0790', 'Discriminator accuracy 0.9785', 'Total loss: 3.3722', 'for batch', 9)
('GAN loss 3.7382 ', 'GAN acc 0.0039', 'Discriminator loss 0.0578', 'Discriminator accuracy 0.9902', 'Total loss: 3.7960', 'for batch', 10)
('GAN loss 4.1554 ', 'GAN acc 0.0000', 'Discriminator loss 0.0444', 'Discriminator accuracy 0.9902', 'Total loss: 4.1998', 'for batch', 11)
('GAN loss 4.4134 ', 'GAN acc 0.0000', 'Discriminator loss 0.0164', 'Discriminator accuracy 0.9961', 'Total loss: 4.4298', 'for batch', 12)
('GAN loss 4.4316 ', 'GAN acc 0.0039', 'Discriminator loss 0.0503', 'Discriminator accuracy 0.9883', 'Total loss: 4.4819', 'for batch', 13)
('GAN loss 4.3971 ', 'GAN acc 0.0000', 'Discriminator loss 0.0424', 'Discriminator accuracy 0.9922', 'Total loss: 4.4395', 'for batch', 14)
('GAN loss 4.1796 ', 'GAN acc 0.0000', 'Discriminator loss 0.0594', 'Discriminator accuracy 0.9883', 'Total loss: 4.2390', 'for batch', 15)
('GAN loss 4.5084 ', 'GAN acc 0.0000', 'Discriminator loss 0.0448', 'Discriminator accuracy 0.9902', 'Total loss: 4.5532', 'for batch', 16)
('GAN loss 4.3500 ', 'GAN acc 0.0000', 'Discriminator loss 0.0416', 'Discriminator accuracy 0.9922', 'Total loss: 4.3916', 'for batch', 17)
('GAN loss 5.8981 ', 'GAN acc 0.0000', 'Discriminator loss 0.0340', 'Discriminator accuracy 0.9941', 'Total loss: 5.9321', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97112203)
('DISCRIMINATOR_Imagem FAKE=', 0.038986068)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.723643')
----------------------------------
('Epoch', 21, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1744 ', 'GAN acc 0.0000', 'Discriminator loss 0.0809', 'Discriminator accuracy 0.9863', 'Total loss: 4.2554', 'for batch', 0)
('GAN loss 4.0622 ', 'GAN acc 0.0000', 'Discriminator loss 0.0812', 'Discriminator accuracy 0.9824', 'Total loss: 4.1434', 'for batch', 1)
('GAN loss 4.2568 ', 'GAN acc 0.0000', 'Discriminator loss 0.0607', 'Discriminator accuracy 0.9863', 'Total loss: 4.3175', 'for batch', 2)
('GAN loss 3.7522 ', 'GAN acc 0.0000', 'Discriminator loss 0.0598', 'Discriminator accuracy 0.9863', 'Total loss: 3.8120', 'for batch', 3)
('GAN loss 3.4839 ', 'GAN acc 0.0000', 'Discriminator loss 0.0551', 'Discriminator accuracy 0.9902', 'Total loss: 3.5390', 'for batch', 4)
('GAN loss 3.7815 ', 'GAN acc 0.0000', 'Discriminator loss 0.0388', 'Discriminator accuracy 0.9941', 'Total loss: 3.8203', 'for batch', 5)
('GAN loss 4.2700 ', 'GAN acc 0.0000', 'Discriminator loss 0.0280', 'Discriminator accuracy 0.9941', 'Total loss: 4.2981', 'for batch', 6)
('GAN loss 4.2430 ', 'GAN acc 0.0000', 'Discriminator loss 0.0598', 'Discriminator accuracy 0.9863', 'Total loss: 4.3028', 'for batch', 7)
('GAN loss 3.9410 ', 'GAN acc 0.0000', 'Discriminator loss 0.0642', 'Discriminator accuracy 0.9863', 'Total loss: 4.0052', 'for batch', 8)
('GAN loss 3.4448 ', 'GAN acc 0.0000', 'Discriminator loss 0.0842', 'Discriminator accuracy 0.9805', 'Total loss: 3.5291', 'for batch', 9)
('GAN loss 3.4021 ', 'GAN acc 0.0000', 'Discriminator loss 0.0517', 'Discriminator accuracy 0.9883', 'Total loss: 3.4538', 'for batch', 10)
('GAN loss 3.7707 ', 'GAN acc 0.0000', 'Discriminator loss 0.0463', 'Discriminator accuracy 0.9902', 'Total loss: 3.8171', 'for batch', 11)
('GAN loss 4.2100 ', 'GAN acc 0.0000', 'Discriminator loss 0.0167', 'Discriminator accuracy 0.9980', 'Total loss: 4.2267', 'for batch', 12)
('GAN loss 4.3433 ', 'GAN acc 0.0000', 'Discriminator loss 0.0459', 'Discriminator accuracy 0.9902', 'Total loss: 4.3892', 'for batch', 13)
('GAN loss 4.3056 ', 'GAN acc 0.0000', 'Discriminator loss 0.0374', 'Discriminator accuracy 0.9922', 'Total loss: 4.3430', 'for batch', 14)
('GAN loss 4.1171 ', 'GAN acc 0.0000', 'Discriminator loss 0.0527', 'Discriminator accuracy 0.9902', 'Total loss: 4.1697', 'for batch', 15)
('GAN loss 4.1235 ', 'GAN acc 0.0000', 'Discriminator loss 0.0350', 'Discriminator accuracy 0.9941', 'Total loss: 4.1584', 'for batch', 16)
('GAN loss 4.2501 ', 'GAN acc 0.0000', 'Discriminator loss 0.0350', 'Discriminator accuracy 0.9941', 'Total loss: 4.2851', 'for batch', 17)
('GAN loss 4.3442 ', 'GAN acc 0.0000', 'Discriminator loss 0.0337', 'Discriminator accuracy 0.9941', 'Total loss: 4.3779', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97752309)
('DISCRIMINATOR_Imagem FAKE=', 0.031075409)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.154243')
----------------------------------
('Epoch', 22, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1163 ', 'GAN acc 0.0000', 'Discriminator loss 0.0702', 'Discriminator accuracy 0.9863', 'Total loss: 4.1865', 'for batch', 0)
('GAN loss 4.7394 ', 'GAN acc 0.0000', 'Discriminator loss 0.0731', 'Discriminator accuracy 0.9824', 'Total loss: 4.8125', 'for batch', 1)
('GAN loss 4.6849 ', 'GAN acc 0.0000', 'Discriminator loss 0.0731', 'Discriminator accuracy 0.9863', 'Total loss: 4.7580', 'for batch', 2)
('GAN loss 4.5604 ', 'GAN acc 0.0000', 'Discriminator loss 0.0688', 'Discriminator accuracy 0.9824', 'Total loss: 4.6292', 'for batch', 3)
('GAN loss 6.9334 ', 'GAN acc 0.0000', 'Discriminator loss 0.0666', 'Discriminator accuracy 0.9824', 'Total loss: 7.0000', 'for batch', 4)
('GAN loss 3.3779 ', 'GAN acc 0.0000', 'Discriminator loss 0.0439', 'Discriminator accuracy 0.9902', 'Total loss: 3.4217', 'for batch', 5)
('GAN loss 3.7711 ', 'GAN acc 0.0000', 'Discriminator loss 0.0325', 'Discriminator accuracy 0.9941', 'Total loss: 3.8035', 'for batch', 6)
('GAN loss 3.8418 ', 'GAN acc 0.0000', 'Discriminator loss 0.0566', 'Discriminator accuracy 0.9863', 'Total loss: 3.8984', 'for batch', 7)
('GAN loss 3.6253 ', 'GAN acc 0.0000', 'Discriminator loss 0.0676', 'Discriminator accuracy 0.9844', 'Total loss: 3.6929', 'for batch', 8)
('GAN loss 3.3729 ', 'GAN acc 0.0000', 'Discriminator loss 0.0829', 'Discriminator accuracy 0.9805', 'Total loss: 3.4558', 'for batch', 9)
('GAN loss 3.5858 ', 'GAN acc 0.0000', 'Discriminator loss 0.0546', 'Discriminator accuracy 0.9883', 'Total loss: 3.6403', 'for batch', 10)
('GAN loss 3.9473 ', 'GAN acc 0.0000', 'Discriminator loss 0.0552', 'Discriminator accuracy 0.9883', 'Total loss: 4.0025', 'for batch', 11)
('GAN loss 4.4150 ', 'GAN acc 0.0000', 'Discriminator loss 0.0261', 'Discriminator accuracy 0.9961', 'Total loss: 4.4411', 'for batch', 12)
('GAN loss 4.4044 ', 'GAN acc 0.0000', 'Discriminator loss 0.0554', 'Discriminator accuracy 0.9902', 'Total loss: 4.4598', 'for batch', 13)
('GAN loss 4.4855 ', 'GAN acc 0.0000', 'Discriminator loss 0.0442', 'Discriminator accuracy 0.9922', 'Total loss: 4.5297', 'for batch', 14)
('GAN loss 4.2397 ', 'GAN acc 0.0000', 'Discriminator loss 0.0657', 'Discriminator accuracy 0.9844', 'Total loss: 4.3055', 'for batch', 15)
('GAN loss 3.7300 ', 'GAN acc 0.0000', 'Discriminator loss 0.0466', 'Discriminator accuracy 0.9863', 'Total loss: 3.7766', 'for batch', 16)
('GAN loss 3.7305 ', 'GAN acc 0.0000', 'Discriminator loss 0.0448', 'Discriminator accuracy 0.9922', 'Total loss: 3.7753', 'for batch', 17)
('GAN loss 4.0547 ', 'GAN acc 0.0000', 'Discriminator loss 0.0343', 'Discriminator accuracy 0.9941', 'Total loss: 4.0889', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97734839)
('DISCRIMINATOR_Imagem FAKE=', 0.019073121)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.673569')
----------------------------------
('Epoch', 23, 'of', 50)
('Number of batches', 19)
('GAN loss 3.9995 ', 'GAN acc 0.0000', 'Discriminator loss 0.0599', 'Discriminator accuracy 0.9883', 'Total loss: 4.0594', 'for batch', 0)
('GAN loss 3.9764 ', 'GAN acc 0.0000', 'Discriminator loss 0.0533', 'Discriminator accuracy 0.9883', 'Total loss: 4.0297', 'for batch', 1)
('GAN loss 3.8440 ', 'GAN acc 0.0000', 'Discriminator loss 0.0517', 'Discriminator accuracy 0.9883', 'Total loss: 3.8957', 'for batch', 2)
('GAN loss 3.7542 ', 'GAN acc 0.0000', 'Discriminator loss 0.0542', 'Discriminator accuracy 0.9883', 'Total loss: 3.8084', 'for batch', 3)
('GAN loss 6.5001 ', 'GAN acc 0.0000', 'Discriminator loss 0.1266', 'Discriminator accuracy 0.9688', 'Total loss: 6.6266', 'for batch', 4)
('GAN loss 8.9979 ', 'GAN acc 0.0000', 'Discriminator loss 0.0743', 'Discriminator accuracy 0.9805', 'Total loss: 9.0721', 'for batch', 5)
('GAN loss 6.9382 ', 'GAN acc 0.0000', 'Discriminator loss 0.1107', 'Discriminator accuracy 0.9746', 'Total loss: 7.0489', 'for batch', 6)
('GAN loss 5.5715 ', 'GAN acc 0.0000', 'Discriminator loss 0.1214', 'Discriminator accuracy 0.9707', 'Total loss: 5.6929', 'for batch', 7)
('GAN loss 4.4703 ', 'GAN acc 0.0000', 'Discriminator loss 0.0830', 'Discriminator accuracy 0.9824', 'Total loss: 4.5532', 'for batch', 8)
('GAN loss 3.6214 ', 'GAN acc 0.0000', 'Discriminator loss 0.0874', 'Discriminator accuracy 0.9805', 'Total loss: 3.7088', 'for batch', 9)
('GAN loss 3.2668 ', 'GAN acc 0.0000', 'Discriminator loss 0.0530', 'Discriminator accuracy 0.9883', 'Total loss: 3.3198', 'for batch', 10)
('GAN loss 3.3798 ', 'GAN acc 0.0000', 'Discriminator loss 0.0535', 'Discriminator accuracy 0.9863', 'Total loss: 3.4332', 'for batch', 11)
('GAN loss 3.7237 ', 'GAN acc 0.0039', 'Discriminator loss 0.0287', 'Discriminator accuracy 0.9941', 'Total loss: 3.7524', 'for batch', 12)
('GAN loss 4.0058 ', 'GAN acc 0.0000', 'Discriminator loss 0.0468', 'Discriminator accuracy 0.9902', 'Total loss: 4.0526', 'for batch', 13)
('GAN loss 4.1990 ', 'GAN acc 0.0039', 'Discriminator loss 0.0493', 'Discriminator accuracy 0.9902', 'Total loss: 4.2483', 'for batch', 14)
('GAN loss 4.5394 ', 'GAN acc 0.0039', 'Discriminator loss 0.0891', 'Discriminator accuracy 0.9766', 'Total loss: 4.6285', 'for batch', 15)
('GAN loss 4.8821 ', 'GAN acc 0.0039', 'Discriminator loss 0.0497', 'Discriminator accuracy 0.9863', 'Total loss: 4.9318', 'for batch', 16)
('GAN loss 5.3490 ', 'GAN acc 0.0000', 'Discriminator loss 0.0612', 'Discriminator accuracy 0.9844', 'Total loss: 5.4102', 'for batch', 17)
('GAN loss 7.0056 ', 'GAN acc 0.0000', 'Discriminator loss 0.1503', 'Discriminator accuracy 0.9629', 'Total loss: 7.1559', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.95394117)
('DISCRIMINATOR_Imagem FAKE=', 0.0032560925)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.228846')
----------------------------------
('Epoch', 24, 'of', 50)
('Number of batches', 19)
('GAN loss 7.0046 ', 'GAN acc 0.0000', 'Discriminator loss 0.1029', 'Discriminator accuracy 0.9785', 'Total loss: 7.1075', 'for batch', 0)
('GAN loss 5.7147 ', 'GAN acc 0.0000', 'Discriminator loss 0.1323', 'Discriminator accuracy 0.9688', 'Total loss: 5.8470', 'for batch', 1)
('GAN loss 4.4845 ', 'GAN acc 0.0000', 'Discriminator loss 0.1290', 'Discriminator accuracy 0.9590', 'Total loss: 4.6135', 'for batch', 2)
('GAN loss 3.6736 ', 'GAN acc 0.0000', 'Discriminator loss 0.0842', 'Discriminator accuracy 0.9785', 'Total loss: 3.7578', 'for batch', 3)
('GAN loss 2.9106 ', 'GAN acc 0.0000', 'Discriminator loss 0.0733', 'Discriminator accuracy 0.9805', 'Total loss: 2.9839', 'for batch', 4)
('GAN loss 3.7519 ', 'GAN acc 0.0000', 'Discriminator loss 0.0724', 'Discriminator accuracy 0.9883', 'Total loss: 3.8242', 'for batch', 5)
('GAN loss 3.9718 ', 'GAN acc 0.0000', 'Discriminator loss 0.0491', 'Discriminator accuracy 0.9922', 'Total loss: 4.0208', 'for batch', 6)
('GAN loss 3.4992 ', 'GAN acc 0.0000', 'Discriminator loss 0.0626', 'Discriminator accuracy 0.9863', 'Total loss: 3.5617', 'for batch', 7)
('GAN loss 3.4190 ', 'GAN acc 0.0000', 'Discriminator loss 0.0804', 'Discriminator accuracy 0.9785', 'Total loss: 3.4994', 'for batch', 8)
('GAN loss 3.3407 ', 'GAN acc 0.0000', 'Discriminator loss 0.0860', 'Discriminator accuracy 0.9805', 'Total loss: 3.4266', 'for batch', 9)
('GAN loss 3.4200 ', 'GAN acc 0.0000', 'Discriminator loss 0.0554', 'Discriminator accuracy 0.9863', 'Total loss: 3.4753', 'for batch', 10)
('GAN loss 3.4608 ', 'GAN acc 0.0000', 'Discriminator loss 0.0674', 'Discriminator accuracy 0.9824', 'Total loss: 3.5282', 'for batch', 11)
('GAN loss 3.6460 ', 'GAN acc 0.0000', 'Discriminator loss 0.0302', 'Discriminator accuracy 0.9941', 'Total loss: 3.6763', 'for batch', 12)
('GAN loss 3.7826 ', 'GAN acc 0.0000', 'Discriminator loss 0.0513', 'Discriminator accuracy 0.9883', 'Total loss: 3.8338', 'for batch', 13)
('GAN loss 3.8847 ', 'GAN acc 0.0000', 'Discriminator loss 0.0441', 'Discriminator accuracy 0.9902', 'Total loss: 3.9288', 'for batch', 14)
('GAN loss 3.8841 ', 'GAN acc 0.0000', 'Discriminator loss 0.0517', 'Discriminator accuracy 0.9883', 'Total loss: 3.9358', 'for batch', 15)
('GAN loss 3.9320 ', 'GAN acc 0.0000', 'Discriminator loss 0.0422', 'Discriminator accuracy 0.9902', 'Total loss: 3.9742', 'for batch', 16)
('GAN loss 4.0313 ', 'GAN acc 0.0000', 'Discriminator loss 0.0382', 'Discriminator accuracy 0.9922', 'Total loss: 4.0695', 'for batch', 17)
('GAN loss 4.1359 ', 'GAN acc 0.0000', 'Discriminator loss 0.0337', 'Discriminator accuracy 0.9941', 'Total loss: 4.1696', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97285128)
('DISCRIMINATOR_Imagem FAKE=', 0.017201092)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.681141')
----------------------------------
('Epoch', 25, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0424 ', 'GAN acc 0.0000', 'Discriminator loss 0.0602', 'Discriminator accuracy 0.9863', 'Total loss: 4.1026', 'for batch', 0)
('GAN loss 3.8716 ', 'GAN acc 0.0000', 'Discriminator loss 0.0577', 'Discriminator accuracy 0.9863', 'Total loss: 3.9293', 'for batch', 1)
('GAN loss 3.7225 ', 'GAN acc 0.0000', 'Discriminator loss 0.0547', 'Discriminator accuracy 0.9883', 'Total loss: 3.7772', 'for batch', 2)
('GAN loss 3.6313 ', 'GAN acc 0.0000', 'Discriminator loss 0.0552', 'Discriminator accuracy 0.9863', 'Total loss: 3.6865', 'for batch', 3)
('GAN loss 3.7446 ', 'GAN acc 0.0000', 'Discriminator loss 0.0476', 'Discriminator accuracy 0.9902', 'Total loss: 3.7922', 'for batch', 4)
('GAN loss 3.9026 ', 'GAN acc 0.0000', 'Discriminator loss 0.0361', 'Discriminator accuracy 0.9941', 'Total loss: 3.9386', 'for batch', 5)
('GAN loss 4.1411 ', 'GAN acc 0.0000', 'Discriminator loss 0.0253', 'Discriminator accuracy 0.9941', 'Total loss: 4.1664', 'for batch', 6)
('GAN loss 4.1589 ', 'GAN acc 0.0000', 'Discriminator loss 0.0602', 'Discriminator accuracy 0.9863', 'Total loss: 4.2191', 'for batch', 7)
('GAN loss 3.9549 ', 'GAN acc 0.0000', 'Discriminator loss 0.0632', 'Discriminator accuracy 0.9844', 'Total loss: 4.0181', 'for batch', 8)
('GAN loss 3.6581 ', 'GAN acc 0.0000', 'Discriminator loss 0.0817', 'Discriminator accuracy 0.9805', 'Total loss: 3.7398', 'for batch', 9)
('GAN loss 3.5689 ', 'GAN acc 0.0000', 'Discriminator loss 0.0527', 'Discriminator accuracy 0.9902', 'Total loss: 3.6216', 'for batch', 10)
('GAN loss 3.6521 ', 'GAN acc 0.0000', 'Discriminator loss 0.0449', 'Discriminator accuracy 0.9902', 'Total loss: 3.6970', 'for batch', 11)
('GAN loss 3.8592 ', 'GAN acc 0.0000', 'Discriminator loss 0.0196', 'Discriminator accuracy 0.9980', 'Total loss: 3.8788', 'for batch', 12)
('GAN loss 3.9801 ', 'GAN acc 0.0000', 'Discriminator loss 0.0477', 'Discriminator accuracy 0.9902', 'Total loss: 4.0278', 'for batch', 13)
('GAN loss 4.0622 ', 'GAN acc 0.0000', 'Discriminator loss 0.0372', 'Discriminator accuracy 0.9922', 'Total loss: 4.0994', 'for batch', 14)
('GAN loss 4.0481 ', 'GAN acc 0.0000', 'Discriminator loss 0.0506', 'Discriminator accuracy 0.9902', 'Total loss: 4.0987', 'for batch', 15)
('GAN loss 4.1228 ', 'GAN acc 0.0000', 'Discriminator loss 0.0335', 'Discriminator accuracy 0.9941', 'Total loss: 4.1563', 'for batch', 16)
('GAN loss 4.2294 ', 'GAN acc 0.0000', 'Discriminator loss 0.0328', 'Discriminator accuracy 0.9941', 'Total loss: 4.2621', 'for batch', 17)
('GAN loss 4.3104 ', 'GAN acc 0.0000', 'Discriminator loss 0.0339', 'Discriminator accuracy 0.9941', 'Total loss: 4.3444', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97844195)
('DISCRIMINATOR_Imagem FAKE=', 0.014277168)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.177981')
----------------------------------
('Epoch', 26, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1530 ', 'GAN acc 0.0000', 'Discriminator loss 0.0596', 'Discriminator accuracy 0.9883', 'Total loss: 4.2126', 'for batch', 0)
('GAN loss 4.0174 ', 'GAN acc 0.0000', 'Discriminator loss 0.0528', 'Discriminator accuracy 0.9883', 'Total loss: 4.0702', 'for batch', 1)
('GAN loss 3.8560 ', 'GAN acc 0.0000', 'Discriminator loss 0.0520', 'Discriminator accuracy 0.9883', 'Total loss: 3.9079', 'for batch', 2)
('GAN loss 3.7491 ', 'GAN acc 0.0000', 'Discriminator loss 0.0533', 'Discriminator accuracy 0.9863', 'Total loss: 3.8025', 'for batch', 3)
('GAN loss 3.7807 ', 'GAN acc 0.0000', 'Discriminator loss 0.0445', 'Discriminator accuracy 0.9902', 'Total loss: 3.8252', 'for batch', 4)
('GAN loss 3.9836 ', 'GAN acc 0.0000', 'Discriminator loss 0.0347', 'Discriminator accuracy 0.9941', 'Total loss: 4.0183', 'for batch', 5)
('GAN loss 4.2565 ', 'GAN acc 0.0000', 'Discriminator loss 0.0209', 'Discriminator accuracy 0.9961', 'Total loss: 4.2774', 'for batch', 6)
('GAN loss 4.2386 ', 'GAN acc 0.0000', 'Discriminator loss 0.0575', 'Discriminator accuracy 0.9863', 'Total loss: 4.2961', 'for batch', 7)
('GAN loss 4.0082 ', 'GAN acc 0.0000', 'Discriminator loss 0.0634', 'Discriminator accuracy 0.9863', 'Total loss: 4.0717', 'for batch', 8)
('GAN loss 3.5793 ', 'GAN acc 0.0000', 'Discriminator loss 0.0799', 'Discriminator accuracy 0.9805', 'Total loss: 3.6592', 'for batch', 9)
('GAN loss 3.5925 ', 'GAN acc 0.0000', 'Discriminator loss 0.0523', 'Discriminator accuracy 0.9902', 'Total loss: 3.6448', 'for batch', 10)
('GAN loss 3.7991 ', 'GAN acc 0.0000', 'Discriminator loss 0.0464', 'Discriminator accuracy 0.9922', 'Total loss: 3.8455', 'for batch', 11)
('GAN loss 4.1174 ', 'GAN acc 0.0000', 'Discriminator loss 0.0180', 'Discriminator accuracy 0.9980', 'Total loss: 4.1354', 'for batch', 12)
('GAN loss 4.1691 ', 'GAN acc 0.0000', 'Discriminator loss 0.0474', 'Discriminator accuracy 0.9902', 'Total loss: 4.2164', 'for batch', 13)
('GAN loss 4.1428 ', 'GAN acc 0.0000', 'Discriminator loss 0.0429', 'Discriminator accuracy 0.9922', 'Total loss: 4.1857', 'for batch', 14)
('GAN loss 6.6427 ', 'GAN acc 0.0000', 'Discriminator loss 0.1861', 'Discriminator accuracy 0.9297', 'Total loss: 6.8288', 'for batch', 15)
('GAN loss 6.6508 ', 'GAN acc 0.0000', 'Discriminator loss 0.0710', 'Discriminator accuracy 0.9844', 'Total loss: 6.7217', 'for batch', 16)
('GAN loss 6.0903 ', 'GAN acc 0.0000', 'Discriminator loss 0.1317', 'Discriminator accuracy 0.9688', 'Total loss: 6.2220', 'for batch', 17)
('GAN loss 5.5378 ', 'GAN acc 0.0000', 'Discriminator loss 0.0456', 'Discriminator accuracy 0.9902', 'Total loss: 5.5834', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.95479739)
('DISCRIMINATOR_Imagem FAKE=', 0.0043309364)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.705962')
----------------------------------
('Epoch', 27, 'of', 50)
('Number of batches', 19)
('GAN loss 4.7567 ', 'GAN acc 0.0000', 'Discriminator loss 0.0929', 'Discriminator accuracy 0.9805', 'Total loss: 4.8496', 'for batch', 0)
('GAN loss 4.0688 ', 'GAN acc 0.0000', 'Discriminator loss 0.0983', 'Discriminator accuracy 0.9746', 'Total loss: 4.1671', 'for batch', 1)
('GAN loss 3.5837 ', 'GAN acc 0.0000', 'Discriminator loss 0.0646', 'Discriminator accuracy 0.9863', 'Total loss: 3.6483', 'for batch', 2)
('GAN loss 3.3583 ', 'GAN acc 0.0000', 'Discriminator loss 0.0598', 'Discriminator accuracy 0.9863', 'Total loss: 3.4181', 'for batch', 3)
('GAN loss 3.3633 ', 'GAN acc 0.0000', 'Discriminator loss 0.0594', 'Discriminator accuracy 0.9883', 'Total loss: 3.4226', 'for batch', 4)
('GAN loss 3.5473 ', 'GAN acc 0.0000', 'Discriminator loss 0.0442', 'Discriminator accuracy 0.9902', 'Total loss: 3.5915', 'for batch', 5)
('GAN loss 3.8389 ', 'GAN acc 0.0000', 'Discriminator loss 0.0341', 'Discriminator accuracy 0.9941', 'Total loss: 3.8730', 'for batch', 6)
('GAN loss 3.9415 ', 'GAN acc 0.0000', 'Discriminator loss 0.0587', 'Discriminator accuracy 0.9863', 'Total loss: 4.0002', 'for batch', 7)
('GAN loss 3.8388 ', 'GAN acc 0.0000', 'Discriminator loss 0.0667', 'Discriminator accuracy 0.9844', 'Total loss: 3.9056', 'for batch', 8)
('GAN loss 3.6406 ', 'GAN acc 0.0000', 'Discriminator loss 0.0834', 'Discriminator accuracy 0.9805', 'Total loss: 3.7240', 'for batch', 9)
('GAN loss 3.5462 ', 'GAN acc 0.0000', 'Discriminator loss 0.0538', 'Discriminator accuracy 0.9883', 'Total loss: 3.6000', 'for batch', 10)
('GAN loss 3.6145 ', 'GAN acc 0.0000', 'Discriminator loss 0.0544', 'Discriminator accuracy 0.9883', 'Total loss: 3.6688', 'for batch', 11)
('GAN loss 3.7211 ', 'GAN acc 0.0000', 'Discriminator loss 0.0260', 'Discriminator accuracy 0.9961', 'Total loss: 3.7471', 'for batch', 12)
('GAN loss 3.9522 ', 'GAN acc 0.0000', 'Discriminator loss 0.0500', 'Discriminator accuracy 0.9902', 'Total loss: 4.0022', 'for batch', 13)
('GAN loss 4.0892 ', 'GAN acc 0.0000', 'Discriminator loss 0.0412', 'Discriminator accuracy 0.9922', 'Total loss: 4.1303', 'for batch', 14)
('GAN loss 4.1630 ', 'GAN acc 0.0000', 'Discriminator loss 0.0589', 'Discriminator accuracy 0.9883', 'Total loss: 4.2218', 'for batch', 15)
('GAN loss 4.1086 ', 'GAN acc 0.0000', 'Discriminator loss 0.0440', 'Discriminator accuracy 0.9883', 'Total loss: 4.1526', 'for batch', 16)
('GAN loss 3.7779 ', 'GAN acc 0.0000', 'Discriminator loss 0.0425', 'Discriminator accuracy 0.9922', 'Total loss: 3.8204', 'for batch', 17)
('GAN loss 4.3255 ', 'GAN acc 0.0000', 'Discriminator loss 0.0381', 'Discriminator accuracy 0.9941', 'Total loss: 4.3636', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97259927)
('DISCRIMINATOR_Imagem FAKE=', 0.050502647)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.189683')
----------------------------------
('Epoch', 28, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1420 ', 'GAN acc 0.0000', 'Discriminator loss 0.0698', 'Discriminator accuracy 0.9844', 'Total loss: 4.2118', 'for batch', 0)
('GAN loss 3.5465 ', 'GAN acc 0.0000', 'Discriminator loss 0.0682', 'Discriminator accuracy 0.9863', 'Total loss: 3.6148', 'for batch', 1)
('GAN loss 3.4952 ', 'GAN acc 0.0000', 'Discriminator loss 0.0704', 'Discriminator accuracy 0.9863', 'Total loss: 3.5656', 'for batch', 2)
('GAN loss 3.6630 ', 'GAN acc 0.0000', 'Discriminator loss 0.0677', 'Discriminator accuracy 0.9863', 'Total loss: 3.7307', 'for batch', 3)
('GAN loss 3.6034 ', 'GAN acc 0.0000', 'Discriminator loss 0.0573', 'Discriminator accuracy 0.9883', 'Total loss: 3.6606', 'for batch', 4)
('GAN loss 3.7340 ', 'GAN acc 0.0000', 'Discriminator loss 0.0467', 'Discriminator accuracy 0.9883', 'Total loss: 3.7807', 'for batch', 5)
('GAN loss 3.9915 ', 'GAN acc 0.0000', 'Discriminator loss 0.0335', 'Discriminator accuracy 0.9941', 'Total loss: 4.0250', 'for batch', 6)
('GAN loss 4.1220 ', 'GAN acc 0.0000', 'Discriminator loss 0.0618', 'Discriminator accuracy 0.9863', 'Total loss: 4.1838', 'for batch', 7)
('GAN loss 3.7130 ', 'GAN acc 0.0000', 'Discriminator loss 0.0731', 'Discriminator accuracy 0.9824', 'Total loss: 3.7861', 'for batch', 8)
('GAN loss 3.4946 ', 'GAN acc 0.0000', 'Discriminator loss 0.0886', 'Discriminator accuracy 0.9805', 'Total loss: 3.5833', 'for batch', 9)
('GAN loss 3.5451 ', 'GAN acc 0.0000', 'Discriminator loss 0.0594', 'Discriminator accuracy 0.9883', 'Total loss: 3.6045', 'for batch', 10)
('GAN loss 3.7851 ', 'GAN acc 0.0000', 'Discriminator loss 0.0658', 'Discriminator accuracy 0.9863', 'Total loss: 3.8508', 'for batch', 11)
('GAN loss 4.0758 ', 'GAN acc 0.0000', 'Discriminator loss 0.0269', 'Discriminator accuracy 0.9902', 'Total loss: 4.1027', 'for batch', 12)
('GAN loss 4.2779 ', 'GAN acc 0.0000', 'Discriminator loss 0.0597', 'Discriminator accuracy 0.9844', 'Total loss: 4.3375', 'for batch', 13)
('GAN loss 4.0492 ', 'GAN acc 0.0000', 'Discriminator loss 0.0458', 'Discriminator accuracy 0.9922', 'Total loss: 4.0950', 'for batch', 14)
('GAN loss 3.9508 ', 'GAN acc 0.0000', 'Discriminator loss 0.0689', 'Discriminator accuracy 0.9805', 'Total loss: 4.0197', 'for batch', 15)
('GAN loss 3.8068 ', 'GAN acc 0.0000', 'Discriminator loss 0.0505', 'Discriminator accuracy 0.9863', 'Total loss: 3.8573', 'for batch', 16)
('GAN loss 3.8852 ', 'GAN acc 0.0000', 'Discriminator loss 0.0612', 'Discriminator accuracy 0.9844', 'Total loss: 3.9464', 'for batch', 17)
('GAN loss 4.4494 ', 'GAN acc 0.0039', 'Discriminator loss 0.0431', 'Discriminator accuracy 0.9902', 'Total loss: 4.4924', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96903491)
('DISCRIMINATOR_Imagem FAKE=', 0.039765175)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.728268')
----------------------------------
('Epoch', 29, 'of', 50)
('Number of batches', 19)
('GAN loss 3.9173 ', 'GAN acc 0.0039', 'Discriminator loss 0.0708', 'Discriminator accuracy 0.9805', 'Total loss: 3.9880', 'for batch', 0)
('GAN loss 3.9430 ', 'GAN acc 0.0000', 'Discriminator loss 0.0754', 'Discriminator accuracy 0.9824', 'Total loss: 4.0184', 'for batch', 1)
('GAN loss 3.6495 ', 'GAN acc 0.0000', 'Discriminator loss 0.0655', 'Discriminator accuracy 0.9863', 'Total loss: 3.7150', 'for batch', 2)
('GAN loss 3.4263 ', 'GAN acc 0.0000', 'Discriminator loss 0.0678', 'Discriminator accuracy 0.9844', 'Total loss: 3.4941', 'for batch', 3)
('GAN loss 3.5907 ', 'GAN acc 0.0000', 'Discriminator loss 0.0567', 'Discriminator accuracy 0.9883', 'Total loss: 3.6474', 'for batch', 4)
('GAN loss 3.7222 ', 'GAN acc 0.0000', 'Discriminator loss 0.0470', 'Discriminator accuracy 0.9902', 'Total loss: 3.7692', 'for batch', 5)
('GAN loss 4.0241 ', 'GAN acc 0.0000', 'Discriminator loss 0.0430', 'Discriminator accuracy 0.9922', 'Total loss: 4.0671', 'for batch', 6)
('GAN loss 4.0626 ', 'GAN acc 0.0000', 'Discriminator loss 0.0602', 'Discriminator accuracy 0.9863', 'Total loss: 4.1228', 'for batch', 7)
('GAN loss 3.7918 ', 'GAN acc 0.0000', 'Discriminator loss 0.0714', 'Discriminator accuracy 0.9824', 'Total loss: 3.8632', 'for batch', 8)
('GAN loss 3.5099 ', 'GAN acc 0.0039', 'Discriminator loss 0.0860', 'Discriminator accuracy 0.9805', 'Total loss: 3.5960', 'for batch', 9)
('GAN loss 3.6519 ', 'GAN acc 0.0000', 'Discriminator loss 0.0606', 'Discriminator accuracy 0.9883', 'Total loss: 3.7125', 'for batch', 10)
('GAN loss 3.8625 ', 'GAN acc 0.0000', 'Discriminator loss 0.0561', 'Discriminator accuracy 0.9883', 'Total loss: 3.9186', 'for batch', 11)
('GAN loss 3.9929 ', 'GAN acc 0.0000', 'Discriminator loss 0.0262', 'Discriminator accuracy 0.9941', 'Total loss: 4.0191', 'for batch', 12)
('GAN loss 4.0211 ', 'GAN acc 0.0000', 'Discriminator loss 0.0523', 'Discriminator accuracy 0.9902', 'Total loss: 4.0734', 'for batch', 13)
('GAN loss 4.0103 ', 'GAN acc 0.0000', 'Discriminator loss 0.0483', 'Discriminator accuracy 0.9883', 'Total loss: 4.0586', 'for batch', 14)
('GAN loss 3.9186 ', 'GAN acc 0.0000', 'Discriminator loss 0.0571', 'Discriminator accuracy 0.9863', 'Total loss: 3.9756', 'for batch', 15)
('GAN loss 3.9888 ', 'GAN acc 0.0000', 'Discriminator loss 0.0428', 'Discriminator accuracy 0.9902', 'Total loss: 4.0316', 'for batch', 16)
('GAN loss 3.9910 ', 'GAN acc 0.0000', 'Discriminator loss 0.0372', 'Discriminator accuracy 0.9902', 'Total loss: 4.0282', 'for batch', 17)
('GAN loss 4.1592 ', 'GAN acc 0.0000', 'Discriminator loss 0.0343', 'Discriminator accuracy 0.9941', 'Total loss: 4.1935', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97182328)
('DISCRIMINATOR_Imagem FAKE=', 0.018603882)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.139931')
----------------------------------
('Epoch', 30, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0343 ', 'GAN acc 0.0000', 'Discriminator loss 0.0579', 'Discriminator accuracy 0.9883', 'Total loss: 4.0922', 'for batch', 0)
('GAN loss 3.8452 ', 'GAN acc 0.0000', 'Discriminator loss 0.0626', 'Discriminator accuracy 0.9844', 'Total loss: 3.9078', 'for batch', 1)
('GAN loss 3.6777 ', 'GAN acc 0.0000', 'Discriminator loss 0.0568', 'Discriminator accuracy 0.9863', 'Total loss: 3.7345', 'for batch', 2)
('GAN loss 3.5646 ', 'GAN acc 0.0000', 'Discriminator loss 0.0621', 'Discriminator accuracy 0.9844', 'Total loss: 3.6267', 'for batch', 3)
('GAN loss 3.7260 ', 'GAN acc 0.0000', 'Discriminator loss 0.0563', 'Discriminator accuracy 0.9902', 'Total loss: 3.7823', 'for batch', 4)
('GAN loss 4.2192 ', 'GAN acc 0.0000', 'Discriminator loss 0.0453', 'Discriminator accuracy 0.9922', 'Total loss: 4.2645', 'for batch', 5)
('GAN loss 4.4176 ', 'GAN acc 0.0000', 'Discriminator loss 0.0370', 'Discriminator accuracy 0.9922', 'Total loss: 4.4546', 'for batch', 6)
('GAN loss 4.3749 ', 'GAN acc 0.0000', 'Discriminator loss 0.0638', 'Discriminator accuracy 0.9863', 'Total loss: 4.4388', 'for batch', 7)
('GAN loss 4.0000 ', 'GAN acc 0.0000', 'Discriminator loss 0.0781', 'Discriminator accuracy 0.9824', 'Total loss: 4.0781', 'for batch', 8)
('GAN loss 3.6395 ', 'GAN acc 0.0000', 'Discriminator loss 0.0879', 'Discriminator accuracy 0.9805', 'Total loss: 3.7274', 'for batch', 9)
('GAN loss 3.5687 ', 'GAN acc 0.0000', 'Discriminator loss 0.0514', 'Discriminator accuracy 0.9902', 'Total loss: 3.6201', 'for batch', 10)
('GAN loss 3.6526 ', 'GAN acc 0.0000', 'Discriminator loss 0.0529', 'Discriminator accuracy 0.9883', 'Total loss: 3.7055', 'for batch', 11)
('GAN loss 3.8530 ', 'GAN acc 0.0000', 'Discriminator loss 0.0218', 'Discriminator accuracy 0.9961', 'Total loss: 3.8749', 'for batch', 12)
('GAN loss 3.9846 ', 'GAN acc 0.0000', 'Discriminator loss 0.0538', 'Discriminator accuracy 0.9883', 'Total loss: 4.0383', 'for batch', 13)
('GAN loss 3.8254 ', 'GAN acc 0.0000', 'Discriminator loss 0.0506', 'Discriminator accuracy 0.9863', 'Total loss: 3.8760', 'for batch', 14)
('GAN loss 3.8483 ', 'GAN acc 0.0000', 'Discriminator loss 0.0547', 'Discriminator accuracy 0.9902', 'Total loss: 3.9030', 'for batch', 15)
('GAN loss 3.9491 ', 'GAN acc 0.0000', 'Discriminator loss 0.0425', 'Discriminator accuracy 0.9902', 'Total loss: 3.9916', 'for batch', 16)
('GAN loss 3.9794 ', 'GAN acc 0.0000', 'Discriminator loss 0.0430', 'Discriminator accuracy 0.9922', 'Total loss: 4.0224', 'for batch', 17)
('GAN loss 4.0249 ', 'GAN acc 0.0000', 'Discriminator loss 0.0363', 'Discriminator accuracy 0.9941', 'Total loss: 4.0612', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96830004)
('DISCRIMINATOR_Imagem FAKE=', 0.042242073)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.727056')
----------------------------------
('Epoch', 31, 'of', 50)
('Number of batches', 19)
('GAN loss 3.9949 ', 'GAN acc 0.0000', 'Discriminator loss 0.0674', 'Discriminator accuracy 0.9863', 'Total loss: 4.0624', 'for batch', 0)
('GAN loss 3.7101 ', 'GAN acc 0.0000', 'Discriminator loss 0.0890', 'Discriminator accuracy 0.9746', 'Total loss: 3.7991', 'for batch', 1)
('GAN loss 3.5427 ', 'GAN acc 0.0000', 'Discriminator loss 0.0667', 'Discriminator accuracy 0.9805', 'Total loss: 3.6094', 'for batch', 2)
('GAN loss 3.9713 ', 'GAN acc 0.0000', 'Discriminator loss 0.0825', 'Discriminator accuracy 0.9844', 'Total loss: 4.0538', 'for batch', 3)
('GAN loss 4.0820 ', 'GAN acc 0.0000', 'Discriminator loss 0.0676', 'Discriminator accuracy 0.9805', 'Total loss: 4.1495', 'for batch', 4)
('GAN loss 4.0074 ', 'GAN acc 0.0000', 'Discriminator loss 0.0460', 'Discriminator accuracy 0.9863', 'Total loss: 4.0533', 'for batch', 5)
('GAN loss 4.1385 ', 'GAN acc 0.0000', 'Discriminator loss 0.0388', 'Discriminator accuracy 0.9902', 'Total loss: 4.1773', 'for batch', 6)
('GAN loss 3.7011 ', 'GAN acc 0.0000', 'Discriminator loss 0.0631', 'Discriminator accuracy 0.9863', 'Total loss: 3.7642', 'for batch', 7)
('GAN loss 3.5603 ', 'GAN acc 0.0000', 'Discriminator loss 0.0709', 'Discriminator accuracy 0.9844', 'Total loss: 3.6312', 'for batch', 8)
('GAN loss 3.1684 ', 'GAN acc 0.0000', 'Discriminator loss 0.0833', 'Discriminator accuracy 0.9805', 'Total loss: 3.2517', 'for batch', 9)
('GAN loss 3.6449 ', 'GAN acc 0.0000', 'Discriminator loss 0.0547', 'Discriminator accuracy 0.9902', 'Total loss: 3.6996', 'for batch', 10)
('GAN loss 3.8416 ', 'GAN acc 0.0000', 'Discriminator loss 0.0564', 'Discriminator accuracy 0.9883', 'Total loss: 3.8981', 'for batch', 11)
('GAN loss 4.0817 ', 'GAN acc 0.0000', 'Discriminator loss 0.0200', 'Discriminator accuracy 0.9941', 'Total loss: 4.1017', 'for batch', 12)
('GAN loss 4.1578 ', 'GAN acc 0.0000', 'Discriminator loss 0.0473', 'Discriminator accuracy 0.9902', 'Total loss: 4.2050', 'for batch', 13)
('GAN loss 4.0979 ', 'GAN acc 0.0000', 'Discriminator loss 0.0399', 'Discriminator accuracy 0.9922', 'Total loss: 4.1378', 'for batch', 14)
('GAN loss 3.9458 ', 'GAN acc 0.0000', 'Discriminator loss 0.0513', 'Discriminator accuracy 0.9863', 'Total loss: 3.9971', 'for batch', 15)
('GAN loss 3.9134 ', 'GAN acc 0.0000', 'Discriminator loss 0.0386', 'Discriminator accuracy 0.9902', 'Total loss: 3.9520', 'for batch', 16)
('GAN loss 4.1286 ', 'GAN acc 0.0000', 'Discriminator loss 0.0352', 'Discriminator accuracy 0.9922', 'Total loss: 4.1637', 'for batch', 17)
('GAN loss 4.2944 ', 'GAN acc 0.0000', 'Discriminator loss 0.0322', 'Discriminator accuracy 0.9941', 'Total loss: 4.3266', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97531313)
('DISCRIMINATOR_Imagem FAKE=', 0.014893433)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.167104')
----------------------------------
('Epoch', 32, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1661 ', 'GAN acc 0.0000', 'Discriminator loss 0.0587', 'Discriminator accuracy 0.9883', 'Total loss: 4.2247', 'for batch', 0)
('GAN loss 3.9679 ', 'GAN acc 0.0000', 'Discriminator loss 0.0539', 'Discriminator accuracy 0.9863', 'Total loss: 4.0218', 'for batch', 1)
('GAN loss 3.7949 ', 'GAN acc 0.0000', 'Discriminator loss 0.0539', 'Discriminator accuracy 0.9883', 'Total loss: 3.8488', 'for batch', 2)
('GAN loss 3.6648 ', 'GAN acc 0.0000', 'Discriminator loss 0.0539', 'Discriminator accuracy 0.9863', 'Total loss: 3.7187', 'for batch', 3)
('GAN loss 3.8273 ', 'GAN acc 0.0000', 'Discriminator loss 0.0491', 'Discriminator accuracy 0.9902', 'Total loss: 3.8764', 'for batch', 4)
('GAN loss 4.1015 ', 'GAN acc 0.0000', 'Discriminator loss 0.0347', 'Discriminator accuracy 0.9941', 'Total loss: 4.1363', 'for batch', 5)
('GAN loss 4.4216 ', 'GAN acc 0.0000', 'Discriminator loss 0.0232', 'Discriminator accuracy 0.9961', 'Total loss: 4.4448', 'for batch', 6)
('GAN loss 4.3132 ', 'GAN acc 0.0000', 'Discriminator loss 0.0562', 'Discriminator accuracy 0.9863', 'Total loss: 4.3694', 'for batch', 7)
('GAN loss 3.9762 ', 'GAN acc 0.0000', 'Discriminator loss 0.0657', 'Discriminator accuracy 0.9863', 'Total loss: 4.0419', 'for batch', 8)
('GAN loss 3.4763 ', 'GAN acc 0.0000', 'Discriminator loss 0.0802', 'Discriminator accuracy 0.9824', 'Total loss: 3.5565', 'for batch', 9)
('GAN loss 3.6120 ', 'GAN acc 0.0000', 'Discriminator loss 0.0509', 'Discriminator accuracy 0.9902', 'Total loss: 3.6629', 'for batch', 10)
('GAN loss 3.9500 ', 'GAN acc 0.0000', 'Discriminator loss 0.0445', 'Discriminator accuracy 0.9922', 'Total loss: 3.9945', 'for batch', 11)
('GAN loss 4.2926 ', 'GAN acc 0.0000', 'Discriminator loss 0.0146', 'Discriminator accuracy 0.9980', 'Total loss: 4.3072', 'for batch', 12)
('GAN loss 4.3455 ', 'GAN acc 0.0000', 'Discriminator loss 0.0456', 'Discriminator accuracy 0.9902', 'Total loss: 4.3911', 'for batch', 13)
('GAN loss 4.3424 ', 'GAN acc 0.0000', 'Discriminator loss 0.0368', 'Discriminator accuracy 0.9922', 'Total loss: 4.3793', 'for batch', 14)
('GAN loss 4.1635 ', 'GAN acc 0.0000', 'Discriminator loss 0.0490', 'Discriminator accuracy 0.9902', 'Total loss: 4.2125', 'for batch', 15)
('GAN loss 4.1417 ', 'GAN acc 0.0000', 'Discriminator loss 0.0333', 'Discriminator accuracy 0.9941', 'Total loss: 4.1751', 'for batch', 16)
('GAN loss 4.2933 ', 'GAN acc 0.0000', 'Discriminator loss 0.0311', 'Discriminator accuracy 0.9941', 'Total loss: 4.3244', 'for batch', 17)
('GAN loss 4.4003 ', 'GAN acc 0.0000', 'Discriminator loss 0.0331', 'Discriminator accuracy 0.9941', 'Total loss: 4.4333', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97934264)
('DISCRIMINATOR_Imagem FAKE=', 0.013435909)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.679205')
----------------------------------
('Epoch', 33, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1999 ', 'GAN acc 0.0000', 'Discriminator loss 0.0578', 'Discriminator accuracy 0.9883', 'Total loss: 4.2577', 'for batch', 0)
('GAN loss 4.0149 ', 'GAN acc 0.0000', 'Discriminator loss 0.0508', 'Discriminator accuracy 0.9883', 'Total loss: 4.0657', 'for batch', 1)
('GAN loss 3.9387 ', 'GAN acc 0.0000', 'Discriminator loss 0.0488', 'Discriminator accuracy 0.9902', 'Total loss: 3.9876', 'for batch', 2)
('GAN loss 3.8454 ', 'GAN acc 0.0000', 'Discriminator loss 0.0506', 'Discriminator accuracy 0.9883', 'Total loss: 3.8960', 'for batch', 3)
('GAN loss 3.9831 ', 'GAN acc 0.0000', 'Discriminator loss 0.0413', 'Discriminator accuracy 0.9922', 'Total loss: 4.0244', 'for batch', 4)
('GAN loss 4.2229 ', 'GAN acc 0.0000', 'Discriminator loss 0.0338', 'Discriminator accuracy 0.9941', 'Total loss: 4.2567', 'for batch', 5)
('GAN loss 4.5182 ', 'GAN acc 0.0000', 'Discriminator loss 0.0159', 'Discriminator accuracy 0.9980', 'Total loss: 4.5342', 'for batch', 6)
('GAN loss 4.3629 ', 'GAN acc 0.0000', 'Discriminator loss 0.0574', 'Discriminator accuracy 0.9863', 'Total loss: 4.4203', 'for batch', 7)
('GAN loss 4.0055 ', 'GAN acc 0.0000', 'Discriminator loss 0.0589', 'Discriminator accuracy 0.9863', 'Total loss: 4.0644', 'for batch', 8)
('GAN loss 3.4309 ', 'GAN acc 0.0000', 'Discriminator loss 0.0769', 'Discriminator accuracy 0.9824', 'Total loss: 3.5078', 'for batch', 9)
('GAN loss 3.8030 ', 'GAN acc 0.0000', 'Discriminator loss 0.0521', 'Discriminator accuracy 0.9902', 'Total loss: 3.8551', 'for batch', 10)
('GAN loss 4.1200 ', 'GAN acc 0.0000', 'Discriminator loss 0.0449', 'Discriminator accuracy 0.9922', 'Total loss: 4.1649', 'for batch', 11)
('GAN loss 4.3306 ', 'GAN acc 0.0000', 'Discriminator loss 0.0132', 'Discriminator accuracy 0.9961', 'Total loss: 4.3437', 'for batch', 12)
('GAN loss 4.3455 ', 'GAN acc 0.0000', 'Discriminator loss 0.0463', 'Discriminator accuracy 0.9902', 'Total loss: 4.3919', 'for batch', 13)
('GAN loss 4.2235 ', 'GAN acc 0.0000', 'Discriminator loss 0.0362', 'Discriminator accuracy 0.9922', 'Total loss: 4.2597', 'for batch', 14)
('GAN loss 4.0728 ', 'GAN acc 0.0000', 'Discriminator loss 0.0501', 'Discriminator accuracy 0.9902', 'Total loss: 4.1229', 'for batch', 15)
('GAN loss 4.1115 ', 'GAN acc 0.0000', 'Discriminator loss 0.0338', 'Discriminator accuracy 0.9941', 'Total loss: 4.1452', 'for batch', 16)
('GAN loss 4.2434 ', 'GAN acc 0.0000', 'Discriminator loss 0.0319', 'Discriminator accuracy 0.9941', 'Total loss: 4.2753', 'for batch', 17)
('GAN loss 4.4208 ', 'GAN acc 0.0000', 'Discriminator loss 0.0328', 'Discriminator accuracy 0.9941', 'Total loss: 4.4536', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98029107)
('DISCRIMINATOR_Imagem FAKE=', 0.013636965)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.171294')
----------------------------------
('Epoch', 34, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2154 ', 'GAN acc 0.0000', 'Discriminator loss 0.0595', 'Discriminator accuracy 0.9883', 'Total loss: 4.2750', 'for batch', 0)
('GAN loss 4.0835 ', 'GAN acc 0.0000', 'Discriminator loss 0.0578', 'Discriminator accuracy 0.9902', 'Total loss: 4.1413', 'for batch', 1)
('GAN loss 7.3171 ', 'GAN acc 0.0000', 'Discriminator loss 0.1470', 'Discriminator accuracy 0.9512', 'Total loss: 7.4641', 'for batch', 2)
('GAN loss 6.8942 ', 'GAN acc 0.0000', 'Discriminator loss 0.0710', 'Discriminator accuracy 0.9844', 'Total loss: 6.9652', 'for batch', 3)
('GAN loss 5.2094 ', 'GAN acc 0.0000', 'Discriminator loss 0.0942', 'Discriminator accuracy 0.9805', 'Total loss: 5.3036', 'for batch', 4)
('GAN loss 4.5627 ', 'GAN acc 0.0000', 'Discriminator loss 0.0612', 'Discriminator accuracy 0.9883', 'Total loss: 4.6239', 'for batch', 5)
('GAN loss 4.1399 ', 'GAN acc 0.0000', 'Discriminator loss 0.0542', 'Discriminator accuracy 0.9883', 'Total loss: 4.1941', 'for batch', 6)
('GAN loss 3.7494 ', 'GAN acc 0.0000', 'Discriminator loss 0.0611', 'Discriminator accuracy 0.9863', 'Total loss: 3.8105', 'for batch', 7)
('GAN loss 3.4604 ', 'GAN acc 0.0000', 'Discriminator loss 0.0661', 'Discriminator accuracy 0.9844', 'Total loss: 3.5265', 'for batch', 8)
('GAN loss 3.1503 ', 'GAN acc 0.0000', 'Discriminator loss 0.0822', 'Discriminator accuracy 0.9785', 'Total loss: 3.2325', 'for batch', 9)
('GAN loss 3.4977 ', 'GAN acc 0.0000', 'Discriminator loss 0.0552', 'Discriminator accuracy 0.9883', 'Total loss: 3.5530', 'for batch', 10)
('GAN loss 3.7163 ', 'GAN acc 0.0000', 'Discriminator loss 0.0614', 'Discriminator accuracy 0.9863', 'Total loss: 3.7777', 'for batch', 11)
('GAN loss 3.9339 ', 'GAN acc 0.0000', 'Discriminator loss 0.0247', 'Discriminator accuracy 0.9941', 'Total loss: 3.9585', 'for batch', 12)
('GAN loss 4.0552 ', 'GAN acc 0.0000', 'Discriminator loss 0.0478', 'Discriminator accuracy 0.9902', 'Total loss: 4.1030', 'for batch', 13)
('GAN loss 4.0605 ', 'GAN acc 0.0000', 'Discriminator loss 0.0384', 'Discriminator accuracy 0.9922', 'Total loss: 4.0989', 'for batch', 14)
('GAN loss 3.8965 ', 'GAN acc 0.0000', 'Discriminator loss 0.0597', 'Discriminator accuracy 0.9844', 'Total loss: 3.9562', 'for batch', 15)
('GAN loss 3.8662 ', 'GAN acc 0.0000', 'Discriminator loss 0.0387', 'Discriminator accuracy 0.9902', 'Total loss: 3.9049', 'for batch', 16)
('GAN loss 4.0089 ', 'GAN acc 0.0000', 'Discriminator loss 0.0364', 'Discriminator accuracy 0.9922', 'Total loss: 4.0453', 'for batch', 17)
('GAN loss 4.1544 ', 'GAN acc 0.0000', 'Discriminator loss 0.0331', 'Discriminator accuracy 0.9941', 'Total loss: 4.1875', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97572583)
('DISCRIMINATOR_Imagem FAKE=', 0.01565093)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.732382')
----------------------------------
('Epoch', 35, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1638 ', 'GAN acc 0.0000', 'Discriminator loss 0.0579', 'Discriminator accuracy 0.9883', 'Total loss: 4.2217', 'for batch', 0)
('GAN loss 4.0520 ', 'GAN acc 0.0000', 'Discriminator loss 0.0538', 'Discriminator accuracy 0.9883', 'Total loss: 4.1058', 'for batch', 1)
('GAN loss 3.9493 ', 'GAN acc 0.0000', 'Discriminator loss 0.0557', 'Discriminator accuracy 0.9883', 'Total loss: 4.0050', 'for batch', 2)
('GAN loss 3.8009 ', 'GAN acc 0.0000', 'Discriminator loss 0.0527', 'Discriminator accuracy 0.9863', 'Total loss: 3.8535', 'for batch', 3)
('GAN loss 3.9063 ', 'GAN acc 0.0000', 'Discriminator loss 0.0480', 'Discriminator accuracy 0.9902', 'Total loss: 3.9543', 'for batch', 4)
('GAN loss 4.9526 ', 'GAN acc 0.0000', 'Discriminator loss 0.0785', 'Discriminator accuracy 0.9707', 'Total loss: 5.0311', 'for batch', 5)
('GAN loss 6.1460 ', 'GAN acc 0.0000', 'Discriminator loss 0.0456', 'Discriminator accuracy 0.9805', 'Total loss: 6.1916', 'for batch', 6)
('GAN loss 5.8909 ', 'GAN acc 0.0000', 'Discriminator loss 0.0820', 'Discriminator accuracy 0.9863', 'Total loss: 5.9729', 'for batch', 7)
('GAN loss 5.0774 ', 'GAN acc 0.0000', 'Discriminator loss 0.1069', 'Discriminator accuracy 0.9766', 'Total loss: 5.1844', 'for batch', 8)
('GAN loss 4.3131 ', 'GAN acc 0.0000', 'Discriminator loss 0.0966', 'Discriminator accuracy 0.9785', 'Total loss: 4.4098', 'for batch', 9)
('GAN loss 3.8308 ', 'GAN acc 0.0000', 'Discriminator loss 0.0568', 'Discriminator accuracy 0.9863', 'Total loss: 3.8876', 'for batch', 10)
('GAN loss 3.5383 ', 'GAN acc 0.0000', 'Discriminator loss 0.0558', 'Discriminator accuracy 0.9863', 'Total loss: 3.5941', 'for batch', 11)
('GAN loss 3.5015 ', 'GAN acc 0.0000', 'Discriminator loss 0.0244', 'Discriminator accuracy 0.9941', 'Total loss: 3.5258', 'for batch', 12)
('GAN loss 3.5998 ', 'GAN acc 0.0000', 'Discriminator loss 0.0515', 'Discriminator accuracy 0.9902', 'Total loss: 3.6514', 'for batch', 13)
('GAN loss 3.7101 ', 'GAN acc 0.0000', 'Discriminator loss 0.0435', 'Discriminator accuracy 0.9922', 'Total loss: 3.7536', 'for batch', 14)
('GAN loss 3.7439 ', 'GAN acc 0.0000', 'Discriminator loss 0.0527', 'Discriminator accuracy 0.9883', 'Total loss: 3.7965', 'for batch', 15)
('GAN loss 3.8594 ', 'GAN acc 0.0000', 'Discriminator loss 0.0404', 'Discriminator accuracy 0.9902', 'Total loss: 3.8998', 'for batch', 16)
('GAN loss 3.9552 ', 'GAN acc 0.0000', 'Discriminator loss 0.0396', 'Discriminator accuracy 0.9922', 'Total loss: 3.9949', 'for batch', 17)
('GAN loss 4.1069 ', 'GAN acc 0.0000', 'Discriminator loss 0.0336', 'Discriminator accuracy 0.9941', 'Total loss: 4.1405', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97188413)
('DISCRIMINATOR_Imagem FAKE=', 0.021624522)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.213521')
----------------------------------
('Epoch', 36, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0112 ', 'GAN acc 0.0000', 'Discriminator loss 0.0646', 'Discriminator accuracy 0.9863', 'Total loss: 4.0759', 'for batch', 0)
('GAN loss 3.8348 ', 'GAN acc 0.0000', 'Discriminator loss 0.0606', 'Discriminator accuracy 0.9844', 'Total loss: 3.8954', 'for batch', 1)
('GAN loss 3.7855 ', 'GAN acc 0.0000', 'Discriminator loss 0.0620', 'Discriminator accuracy 0.9863', 'Total loss: 3.8475', 'for batch', 2)
('GAN loss 3.7050 ', 'GAN acc 0.0000', 'Discriminator loss 0.0652', 'Discriminator accuracy 0.9844', 'Total loss: 3.7702', 'for batch', 3)
('GAN loss 3.7405 ', 'GAN acc 0.0000', 'Discriminator loss 0.0576', 'Discriminator accuracy 0.9863', 'Total loss: 3.7980', 'for batch', 4)
('GAN loss 3.9676 ', 'GAN acc 0.0000', 'Discriminator loss 0.0425', 'Discriminator accuracy 0.9941', 'Total loss: 4.0101', 'for batch', 5)
('GAN loss 4.1397 ', 'GAN acc 0.0000', 'Discriminator loss 0.0372', 'Discriminator accuracy 0.9902', 'Total loss: 4.1768', 'for batch', 6)
('GAN loss 4.1268 ', 'GAN acc 0.0000', 'Discriminator loss 0.0618', 'Discriminator accuracy 0.9863', 'Total loss: 4.1887', 'for batch', 7)
('GAN loss 3.8093 ', 'GAN acc 0.0000', 'Discriminator loss 0.0762', 'Discriminator accuracy 0.9844', 'Total loss: 3.8855', 'for batch', 8)
('GAN loss 3.5543 ', 'GAN acc 0.0000', 'Discriminator loss 0.0872', 'Discriminator accuracy 0.9805', 'Total loss: 3.6415', 'for batch', 9)
('GAN loss 3.6011 ', 'GAN acc 0.0000', 'Discriminator loss 0.0539', 'Discriminator accuracy 0.9902', 'Total loss: 3.6551', 'for batch', 10)
('GAN loss 3.7018 ', 'GAN acc 0.0000', 'Discriminator loss 0.0545', 'Discriminator accuracy 0.9863', 'Total loss: 3.7563', 'for batch', 11)
('GAN loss 3.9064 ', 'GAN acc 0.0000', 'Discriminator loss 0.0197', 'Discriminator accuracy 0.9961', 'Total loss: 3.9262', 'for batch', 12)
('GAN loss 3.7678 ', 'GAN acc 0.0000', 'Discriminator loss 0.0594', 'Discriminator accuracy 0.9844', 'Total loss: 3.8272', 'for batch', 13)
('GAN loss 3.7007 ', 'GAN acc 0.0000', 'Discriminator loss 0.0494', 'Discriminator accuracy 0.9863', 'Total loss: 3.7502', 'for batch', 14)
('GAN loss 4.1074 ', 'GAN acc 0.0000', 'Discriminator loss 0.0489', 'Discriminator accuracy 0.9883', 'Total loss: 4.1563', 'for batch', 15)
('GAN loss 3.8762 ', 'GAN acc 0.0000', 'Discriminator loss 0.0411', 'Discriminator accuracy 0.9883', 'Total loss: 3.9174', 'for batch', 16)
('GAN loss 3.7080 ', 'GAN acc 0.0000', 'Discriminator loss 0.0425', 'Discriminator accuracy 0.9902', 'Total loss: 3.7505', 'for batch', 17)
('GAN loss 4.0826 ', 'GAN acc 0.0000', 'Discriminator loss 0.0426', 'Discriminator accuracy 0.9922', 'Total loss: 4.1252', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96946019)
('DISCRIMINATOR_Imagem FAKE=', 0.018494621)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.721434')
----------------------------------
('Epoch', 37, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2264 ', 'GAN acc 0.0000', 'Discriminator loss 0.0623', 'Discriminator accuracy 0.9863', 'Total loss: 4.2888', 'for batch', 0)
('GAN loss 4.0553 ', 'GAN acc 0.0000', 'Discriminator loss 0.0751', 'Discriminator accuracy 0.9805', 'Total loss: 4.1304', 'for batch', 1)
('GAN loss 3.9021 ', 'GAN acc 0.0000', 'Discriminator loss 0.0597', 'Discriminator accuracy 0.9844', 'Total loss: 3.9619', 'for batch', 2)
('GAN loss 3.6586 ', 'GAN acc 0.0000', 'Discriminator loss 0.0583', 'Discriminator accuracy 0.9844', 'Total loss: 3.7168', 'for batch', 3)
('GAN loss 3.6408 ', 'GAN acc 0.0000', 'Discriminator loss 0.0507', 'Discriminator accuracy 0.9883', 'Total loss: 3.6915', 'for batch', 4)
('GAN loss 3.9402 ', 'GAN acc 0.0000', 'Discriminator loss 0.0372', 'Discriminator accuracy 0.9941', 'Total loss: 3.9774', 'for batch', 5)
('GAN loss 4.3289 ', 'GAN acc 0.0000', 'Discriminator loss 0.0256', 'Discriminator accuracy 0.9941', 'Total loss: 4.3545', 'for batch', 6)
('GAN loss 4.2181 ', 'GAN acc 0.0000', 'Discriminator loss 0.0568', 'Discriminator accuracy 0.9863', 'Total loss: 4.2749', 'for batch', 7)
('GAN loss 3.8516 ', 'GAN acc 0.0000', 'Discriminator loss 0.0672', 'Discriminator accuracy 0.9844', 'Total loss: 3.9188', 'for batch', 8)
('GAN loss 3.5677 ', 'GAN acc 0.0000', 'Discriminator loss 0.0772', 'Discriminator accuracy 0.9805', 'Total loss: 3.6449', 'for batch', 9)
('GAN loss 3.7004 ', 'GAN acc 0.0000', 'Discriminator loss 0.0519', 'Discriminator accuracy 0.9902', 'Total loss: 3.7523', 'for batch', 10)
('GAN loss 3.9959 ', 'GAN acc 0.0000', 'Discriminator loss 0.0454', 'Discriminator accuracy 0.9922', 'Total loss: 4.0413', 'for batch', 11)
('GAN loss 4.4101 ', 'GAN acc 0.0000', 'Discriminator loss 0.0129', 'Discriminator accuracy 1.0000', 'Total loss: 4.4230', 'for batch', 12)
('GAN loss 4.5097 ', 'GAN acc 0.0000', 'Discriminator loss 0.0482', 'Discriminator accuracy 0.9902', 'Total loss: 4.5579', 'for batch', 13)
('GAN loss 4.4454 ', 'GAN acc 0.0000', 'Discriminator loss 0.0398', 'Discriminator accuracy 0.9922', 'Total loss: 4.4852', 'for batch', 14)
('GAN loss 4.2962 ', 'GAN acc 0.0000', 'Discriminator loss 0.0536', 'Discriminator accuracy 0.9902', 'Total loss: 4.3498', 'for batch', 15)
('GAN loss 4.1679 ', 'GAN acc 0.0000', 'Discriminator loss 0.0348', 'Discriminator accuracy 0.9941', 'Total loss: 4.2026', 'for batch', 16)
('GAN loss 4.2458 ', 'GAN acc 0.0000', 'Discriminator loss 0.0347', 'Discriminator accuracy 0.9922', 'Total loss: 4.2804', 'for batch', 17)
('GAN loss 4.2590 ', 'GAN acc 0.0000', 'Discriminator loss 0.0353', 'Discriminator accuracy 0.9941', 'Total loss: 4.2943', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9754476)
('DISCRIMINATOR_Imagem FAKE=', 0.020489182)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.194360')
----------------------------------
('Epoch', 38, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1846 ', 'GAN acc 0.0000', 'Discriminator loss 0.0634', 'Discriminator accuracy 0.9883', 'Total loss: 4.2480', 'for batch', 0)
('GAN loss 3.9398 ', 'GAN acc 0.0000', 'Discriminator loss 0.0586', 'Discriminator accuracy 0.9863', 'Total loss: 3.9984', 'for batch', 1)
('GAN loss 3.9395 ', 'GAN acc 0.0000', 'Discriminator loss 0.0591', 'Discriminator accuracy 0.9883', 'Total loss: 3.9986', 'for batch', 2)
('GAN loss 3.8425 ', 'GAN acc 0.0000', 'Discriminator loss 0.0583', 'Discriminator accuracy 0.9883', 'Total loss: 3.9008', 'for batch', 3)
('GAN loss 3.9427 ', 'GAN acc 0.0000', 'Discriminator loss 0.0482', 'Discriminator accuracy 0.9902', 'Total loss: 3.9909', 'for batch', 4)
('GAN loss 4.0777 ', 'GAN acc 0.0000', 'Discriminator loss 0.0404', 'Discriminator accuracy 0.9941', 'Total loss: 4.1182', 'for batch', 5)
('GAN loss 4.3738 ', 'GAN acc 0.0000', 'Discriminator loss 0.0243', 'Discriminator accuracy 0.9941', 'Total loss: 4.3981', 'for batch', 6)
('GAN loss 4.1243 ', 'GAN acc 0.0000', 'Discriminator loss 0.0640', 'Discriminator accuracy 0.9863', 'Total loss: 4.1884', 'for batch', 7)
('GAN loss 3.9773 ', 'GAN acc 0.0000', 'Discriminator loss 0.0666', 'Discriminator accuracy 0.9863', 'Total loss: 4.0439', 'for batch', 8)
('GAN loss 3.6552 ', 'GAN acc 0.0000', 'Discriminator loss 0.0890', 'Discriminator accuracy 0.9805', 'Total loss: 3.7442', 'for batch', 9)
('GAN loss 3.7653 ', 'GAN acc 0.0000', 'Discriminator loss 0.0529', 'Discriminator accuracy 0.9883', 'Total loss: 3.8183', 'for batch', 10)
('GAN loss 3.6480 ', 'GAN acc 0.0000', 'Discriminator loss 0.0527', 'Discriminator accuracy 0.9883', 'Total loss: 3.7007', 'for batch', 11)
('GAN loss 4.0444 ', 'GAN acc 0.0000', 'Discriminator loss 0.0191', 'Discriminator accuracy 0.9961', 'Total loss: 4.0636', 'for batch', 12)
('GAN loss 4.0749 ', 'GAN acc 0.0000', 'Discriminator loss 0.0497', 'Discriminator accuracy 0.9902', 'Total loss: 4.1246', 'for batch', 13)
('GAN loss 4.0735 ', 'GAN acc 0.0000', 'Discriminator loss 0.0374', 'Discriminator accuracy 0.9922', 'Total loss: 4.1109', 'for batch', 14)
('GAN loss 4.0422 ', 'GAN acc 0.0000', 'Discriminator loss 0.0546', 'Discriminator accuracy 0.9883', 'Total loss: 4.0968', 'for batch', 15)
('GAN loss 3.9715 ', 'GAN acc 0.0000', 'Discriminator loss 0.0394', 'Discriminator accuracy 0.9922', 'Total loss: 4.0110', 'for batch', 16)
('GAN loss 4.0879 ', 'GAN acc 0.0000', 'Discriminator loss 0.0374', 'Discriminator accuracy 0.9902', 'Total loss: 4.1253', 'for batch', 17)
('GAN loss 4.1690 ', 'GAN acc 0.0000', 'Discriminator loss 0.0348', 'Discriminator accuracy 0.9941', 'Total loss: 4.2038', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97521633)
('DISCRIMINATOR_Imagem FAKE=', 0.07034228)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.730831')
----------------------------------
('Epoch', 39, 'of', 50)
('Number of batches', 19)
('GAN loss 4.3893 ', 'GAN acc 0.0000', 'Discriminator loss 0.0845', 'Discriminator accuracy 0.9805', 'Total loss: 4.4738', 'for batch', 0)
('GAN loss 5.4756 ', 'GAN acc 0.0000', 'Discriminator loss 0.1023', 'Discriminator accuracy 0.9805', 'Total loss: 5.5780', 'for batch', 1)
('GAN loss 5.7681 ', 'GAN acc 0.0000', 'Discriminator loss 0.0892', 'Discriminator accuracy 0.9785', 'Total loss: 5.8573', 'for batch', 2)
('GAN loss 5.2539 ', 'GAN acc 0.0000', 'Discriminator loss 0.0821', 'Discriminator accuracy 0.9824', 'Total loss: 5.3361', 'for batch', 3)
('GAN loss 4.0899 ', 'GAN acc 0.0000', 'Discriminator loss 0.0791', 'Discriminator accuracy 0.9805', 'Total loss: 4.1690', 'for batch', 4)
('GAN loss 3.6255 ', 'GAN acc 0.0000', 'Discriminator loss 0.0468', 'Discriminator accuracy 0.9902', 'Total loss: 3.6723', 'for batch', 5)
('GAN loss 3.6598 ', 'GAN acc 0.0000', 'Discriminator loss 0.0336', 'Discriminator accuracy 0.9941', 'Total loss: 3.6933', 'for batch', 6)
('GAN loss 3.6314 ', 'GAN acc 0.0000', 'Discriminator loss 0.0597', 'Discriminator accuracy 0.9863', 'Total loss: 3.6912', 'for batch', 7)
('GAN loss 3.6046 ', 'GAN acc 0.0000', 'Discriminator loss 0.0639', 'Discriminator accuracy 0.9863', 'Total loss: 3.6684', 'for batch', 8)
('GAN loss 3.5313 ', 'GAN acc 0.0000', 'Discriminator loss 0.0826', 'Discriminator accuracy 0.9805', 'Total loss: 3.6139', 'for batch', 9)
('GAN loss 3.6339 ', 'GAN acc 0.0000', 'Discriminator loss 0.0552', 'Discriminator accuracy 0.9883', 'Total loss: 3.6890', 'for batch', 10)
('GAN loss 3.7072 ', 'GAN acc 0.0000', 'Discriminator loss 0.0541', 'Discriminator accuracy 0.9883', 'Total loss: 3.7613', 'for batch', 11)
('GAN loss 3.8845 ', 'GAN acc 0.0000', 'Discriminator loss 0.0206', 'Discriminator accuracy 0.9961', 'Total loss: 3.9051', 'for batch', 12)
('GAN loss 4.0119 ', 'GAN acc 0.0000', 'Discriminator loss 0.0506', 'Discriminator accuracy 0.9902', 'Total loss: 4.0625', 'for batch', 13)
('GAN loss 4.0648 ', 'GAN acc 0.0000', 'Discriminator loss 0.0411', 'Discriminator accuracy 0.9922', 'Total loss: 4.1060', 'for batch', 14)
('GAN loss 3.8610 ', 'GAN acc 0.0000', 'Discriminator loss 0.0607', 'Discriminator accuracy 0.9863', 'Total loss: 3.9217', 'for batch', 15)
('GAN loss 3.8335 ', 'GAN acc 0.0000', 'Discriminator loss 0.0413', 'Discriminator accuracy 0.9902', 'Total loss: 3.8748', 'for batch', 16)
('GAN loss 4.0063 ', 'GAN acc 0.0000', 'Discriminator loss 0.0372', 'Discriminator accuracy 0.9922', 'Total loss: 4.0435', 'for batch', 17)
('GAN loss 4.1727 ', 'GAN acc 0.0000', 'Discriminator loss 0.0343', 'Discriminator accuracy 0.9941', 'Total loss: 4.2070', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97585386)
('DISCRIMINATOR_Imagem FAKE=', 0.01738335)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.192743')
----------------------------------
('Epoch', 40, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0396 ', 'GAN acc 0.0000', 'Discriminator loss 0.0657', 'Discriminator accuracy 0.9863', 'Total loss: 4.1052', 'for batch', 0)
('GAN loss 3.9969 ', 'GAN acc 0.0000', 'Discriminator loss 0.0541', 'Discriminator accuracy 0.9883', 'Total loss: 4.0509', 'for batch', 1)
('GAN loss 3.8832 ', 'GAN acc 0.0000', 'Discriminator loss 0.0564', 'Discriminator accuracy 0.9863', 'Total loss: 3.9396', 'for batch', 2)
('GAN loss 3.9312 ', 'GAN acc 0.0000', 'Discriminator loss 0.0552', 'Discriminator accuracy 0.9883', 'Total loss: 3.9864', 'for batch', 3)
('GAN loss 3.9781 ', 'GAN acc 0.0000', 'Discriminator loss 0.0453', 'Discriminator accuracy 0.9902', 'Total loss: 4.0234', 'for batch', 4)
('GAN loss 4.0144 ', 'GAN acc 0.0000', 'Discriminator loss 0.0416', 'Discriminator accuracy 0.9902', 'Total loss: 4.0560', 'for batch', 5)
('GAN loss 4.2310 ', 'GAN acc 0.0000', 'Discriminator loss 0.0193', 'Discriminator accuracy 0.9980', 'Total loss: 4.2503', 'for batch', 6)
('GAN loss 4.1190 ', 'GAN acc 0.0000', 'Discriminator loss 0.0596', 'Discriminator accuracy 0.9863', 'Total loss: 4.1785', 'for batch', 7)
('GAN loss 3.8937 ', 'GAN acc 0.0000', 'Discriminator loss 0.0608', 'Discriminator accuracy 0.9883', 'Total loss: 3.9545', 'for batch', 8)
('GAN loss 4.1920 ', 'GAN acc 0.0000', 'Discriminator loss 0.1076', 'Discriminator accuracy 0.9805', 'Total loss: 4.2997', 'for batch', 9)
('GAN loss 4.7377 ', 'GAN acc 0.0000', 'Discriminator loss 0.0607', 'Discriminator accuracy 0.9883', 'Total loss: 4.7984', 'for batch', 10)
('GAN loss 4.1539 ', 'GAN acc 0.0000', 'Discriminator loss 0.0559', 'Discriminator accuracy 0.9883', 'Total loss: 4.2097', 'for batch', 11)
('GAN loss 3.9536 ', 'GAN acc 0.0000', 'Discriminator loss 0.0202', 'Discriminator accuracy 0.9941', 'Total loss: 3.9738', 'for batch', 12)
('GAN loss 3.9732 ', 'GAN acc 0.0000', 'Discriminator loss 0.0499', 'Discriminator accuracy 0.9902', 'Total loss: 4.0231', 'for batch', 13)
('GAN loss 3.9097 ', 'GAN acc 0.0000', 'Discriminator loss 0.0395', 'Discriminator accuracy 0.9922', 'Total loss: 3.9492', 'for batch', 14)
('GAN loss 3.8559 ', 'GAN acc 0.0000', 'Discriminator loss 0.0578', 'Discriminator accuracy 0.9863', 'Total loss: 3.9137', 'for batch', 15)
('GAN loss 3.8990 ', 'GAN acc 0.0000', 'Discriminator loss 0.0495', 'Discriminator accuracy 0.9863', 'Total loss: 3.9486', 'for batch', 16)
('GAN loss 4.1121 ', 'GAN acc 0.0000', 'Discriminator loss 0.0403', 'Discriminator accuracy 0.9922', 'Total loss: 4.1524', 'for batch', 17)
('GAN loss 4.3338 ', 'GAN acc 0.0000', 'Discriminator loss 0.0335', 'Discriminator accuracy 0.9941', 'Total loss: 4.3672', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97533947)
('DISCRIMINATOR_Imagem FAKE=', 0.016013965)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.172345')
----------------------------------
('Epoch', 41, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2429 ', 'GAN acc 0.0000', 'Discriminator loss 0.0626', 'Discriminator accuracy 0.9883', 'Total loss: 4.3055', 'for batch', 0)
('GAN loss 4.8802 ', 'GAN acc 0.0000', 'Discriminator loss 0.0668', 'Discriminator accuracy 0.9883', 'Total loss: 4.9470', 'for batch', 1)
('GAN loss 5.2359 ', 'GAN acc 0.0000', 'Discriminator loss 0.0660', 'Discriminator accuracy 0.9863', 'Total loss: 5.3018', 'for batch', 2)
('GAN loss 5.2806 ', 'GAN acc 0.0000', 'Discriminator loss 0.0629', 'Discriminator accuracy 0.9863', 'Total loss: 5.3435', 'for batch', 3)
('GAN loss 4.5076 ', 'GAN acc 0.0039', 'Discriminator loss 0.0513', 'Discriminator accuracy 0.9902', 'Total loss: 4.5590', 'for batch', 4)
('GAN loss 4.3550 ', 'GAN acc 0.0000', 'Discriminator loss 0.0516', 'Discriminator accuracy 0.9883', 'Total loss: 4.4066', 'for batch', 5)
('GAN loss 5.0831 ', 'GAN acc 0.0000', 'Discriminator loss 0.0486', 'Discriminator accuracy 0.9863', 'Total loss: 5.1317', 'for batch', 6)
('GAN loss 5.2413 ', 'GAN acc 0.0000', 'Discriminator loss 0.0791', 'Discriminator accuracy 0.9863', 'Total loss: 5.3204', 'for batch', 7)
('GAN loss 4.5745 ', 'GAN acc 0.0000', 'Discriminator loss 0.1008', 'Discriminator accuracy 0.9766', 'Total loss: 4.6753', 'for batch', 8)
('GAN loss 3.7897 ', 'GAN acc 0.0000', 'Discriminator loss 0.0953', 'Discriminator accuracy 0.9785', 'Total loss: 3.8851', 'for batch', 9)
('GAN loss 3.7479 ', 'GAN acc 0.0000', 'Discriminator loss 0.0611', 'Discriminator accuracy 0.9883', 'Total loss: 3.8090', 'for batch', 10)
('GAN loss 3.6116 ', 'GAN acc 0.0000', 'Discriminator loss 0.0649', 'Discriminator accuracy 0.9844', 'Total loss: 3.6764', 'for batch', 11)
('GAN loss 3.5966 ', 'GAN acc 0.0000', 'Discriminator loss 0.0295', 'Discriminator accuracy 0.9941', 'Total loss: 3.6261', 'for batch', 12)
('GAN loss 3.4556 ', 'GAN acc 0.0000', 'Discriminator loss 0.0642', 'Discriminator accuracy 0.9844', 'Total loss: 3.5198', 'for batch', 13)
('GAN loss 3.5222 ', 'GAN acc 0.0000', 'Discriminator loss 0.0528', 'Discriminator accuracy 0.9863', 'Total loss: 3.5750', 'for batch', 14)
('GAN loss 3.5171 ', 'GAN acc 0.0000', 'Discriminator loss 0.0540', 'Discriminator accuracy 0.9863', 'Total loss: 3.5711', 'for batch', 15)
('GAN loss 3.6382 ', 'GAN acc 0.0000', 'Discriminator loss 0.0487', 'Discriminator accuracy 0.9902', 'Total loss: 3.6869', 'for batch', 16)
('GAN loss 3.8429 ', 'GAN acc 0.0000', 'Discriminator loss 0.0465', 'Discriminator accuracy 0.9922', 'Total loss: 3.8894', 'for batch', 17)
('GAN loss 4.0026 ', 'GAN acc 0.0000', 'Discriminator loss 0.0386', 'Discriminator accuracy 0.9922', 'Total loss: 4.0412', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96725154)
('DISCRIMINATOR_Imagem FAKE=', 0.027541248)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.772697')
----------------------------------
('Epoch', 42, 'of', 50)
('Number of batches', 19)
('GAN loss 3.8666 ', 'GAN acc 0.0000', 'Discriminator loss 0.0634', 'Discriminator accuracy 0.9844', 'Total loss: 3.9300', 'for batch', 0)
('GAN loss 3.4342 ', 'GAN acc 0.0000', 'Discriminator loss 0.0783', 'Discriminator accuracy 0.9785', 'Total loss: 3.5125', 'for batch', 1)
('GAN loss 3.3516 ', 'GAN acc 0.0000', 'Discriminator loss 0.0628', 'Discriminator accuracy 0.9844', 'Total loss: 3.4144', 'for batch', 2)
('GAN loss 3.5998 ', 'GAN acc 0.0000', 'Discriminator loss 0.0609', 'Discriminator accuracy 0.9844', 'Total loss: 3.6607', 'for batch', 3)
('GAN loss 3.8133 ', 'GAN acc 0.0000', 'Discriminator loss 0.0505', 'Discriminator accuracy 0.9883', 'Total loss: 3.8639', 'for batch', 4)
('GAN loss 3.7483 ', 'GAN acc 0.0000', 'Discriminator loss 0.0442', 'Discriminator accuracy 0.9883', 'Total loss: 3.7925', 'for batch', 5)
('GAN loss 4.0074 ', 'GAN acc 0.0000', 'Discriminator loss 0.0491', 'Discriminator accuracy 0.9902', 'Total loss: 4.0565', 'for batch', 6)
('GAN loss 3.7570 ', 'GAN acc 0.0000', 'Discriminator loss 0.0591', 'Discriminator accuracy 0.9863', 'Total loss: 3.8162', 'for batch', 7)
('GAN loss 3.5583 ', 'GAN acc 0.0000', 'Discriminator loss 0.0763', 'Discriminator accuracy 0.9824', 'Total loss: 3.6346', 'for batch', 8)
('GAN loss 3.3698 ', 'GAN acc 0.0000', 'Discriminator loss 0.0852', 'Discriminator accuracy 0.9785', 'Total loss: 3.4550', 'for batch', 9)
('GAN loss 3.6629 ', 'GAN acc 0.0000', 'Discriminator loss 0.0544', 'Discriminator accuracy 0.9883', 'Total loss: 3.7173', 'for batch', 10)
('GAN loss 3.8667 ', 'GAN acc 0.0000', 'Discriminator loss 0.0576', 'Discriminator accuracy 0.9863', 'Total loss: 3.9243', 'for batch', 11)
('GAN loss 4.2013 ', 'GAN acc 0.0000', 'Discriminator loss 0.0184', 'Discriminator accuracy 0.9961', 'Total loss: 4.2197', 'for batch', 12)
('GAN loss 4.2664 ', 'GAN acc 0.0000', 'Discriminator loss 0.0496', 'Discriminator accuracy 0.9883', 'Total loss: 4.3160', 'for batch', 13)
('GAN loss 4.1181 ', 'GAN acc 0.0000', 'Discriminator loss 0.0393', 'Discriminator accuracy 0.9902', 'Total loss: 4.1574', 'for batch', 14)
('GAN loss 3.9585 ', 'GAN acc 0.0000', 'Discriminator loss 0.0519', 'Discriminator accuracy 0.9883', 'Total loss: 4.0104', 'for batch', 15)
('GAN loss 4.0117 ', 'GAN acc 0.0000', 'Discriminator loss 0.0397', 'Discriminator accuracy 0.9902', 'Total loss: 4.0514', 'for batch', 16)
('GAN loss 4.2407 ', 'GAN acc 0.0000', 'Discriminator loss 0.0363', 'Discriminator accuracy 0.9922', 'Total loss: 4.2769', 'for batch', 17)
('GAN loss 4.3796 ', 'GAN acc 0.0000', 'Discriminator loss 0.0329', 'Discriminator accuracy 0.9941', 'Total loss: 4.4126', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97455812)
('DISCRIMINATOR_Imagem FAKE=', 0.013567188)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.210762')
----------------------------------
('Epoch', 43, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2227 ', 'GAN acc 0.0000', 'Discriminator loss 0.0586', 'Discriminator accuracy 0.9883', 'Total loss: 4.2813', 'for batch', 0)
('GAN loss 4.0129 ', 'GAN acc 0.0000', 'Discriminator loss 0.0550', 'Discriminator accuracy 0.9883', 'Total loss: 4.0679', 'for batch', 1)
('GAN loss 3.8332 ', 'GAN acc 0.0000', 'Discriminator loss 0.0513', 'Discriminator accuracy 0.9883', 'Total loss: 3.8845', 'for batch', 2)
('GAN loss 3.7847 ', 'GAN acc 0.0000', 'Discriminator loss 0.0524', 'Discriminator accuracy 0.9883', 'Total loss: 3.8371', 'for batch', 3)
('GAN loss 4.0302 ', 'GAN acc 0.0000', 'Discriminator loss 0.0469', 'Discriminator accuracy 0.9902', 'Total loss: 4.0770', 'for batch', 4)
('GAN loss 4.2534 ', 'GAN acc 0.0000', 'Discriminator loss 0.0397', 'Discriminator accuracy 0.9941', 'Total loss: 4.2931', 'for batch', 5)
('GAN loss 4.6314 ', 'GAN acc 0.0000', 'Discriminator loss 0.0235', 'Discriminator accuracy 0.9980', 'Total loss: 4.6549', 'for batch', 6)
('GAN loss 4.6203 ', 'GAN acc 0.0000', 'Discriminator loss 0.0675', 'Discriminator accuracy 0.9863', 'Total loss: 4.6878', 'for batch', 7)
('GAN loss 4.4486 ', 'GAN acc 0.0000', 'Discriminator loss 0.0733', 'Discriminator accuracy 0.9844', 'Total loss: 4.5219', 'for batch', 8)
('GAN loss 4.0924 ', 'GAN acc 0.0000', 'Discriminator loss 0.0875', 'Discriminator accuracy 0.9805', 'Total loss: 4.1799', 'for batch', 9)
('GAN loss 3.7422 ', 'GAN acc 0.0000', 'Discriminator loss 0.0520', 'Discriminator accuracy 0.9883', 'Total loss: 3.7942', 'for batch', 10)
('GAN loss 3.6322 ', 'GAN acc 0.0000', 'Discriminator loss 0.0483', 'Discriminator accuracy 0.9902', 'Total loss: 3.6805', 'for batch', 11)
('GAN loss 3.8734 ', 'GAN acc 0.0000', 'Discriminator loss 0.0174', 'Discriminator accuracy 0.9980', 'Total loss: 3.8908', 'for batch', 12)
('GAN loss 4.0384 ', 'GAN acc 0.0000', 'Discriminator loss 0.0488', 'Discriminator accuracy 0.9902', 'Total loss: 4.0872', 'for batch', 13)
('GAN loss 4.0688 ', 'GAN acc 0.0000', 'Discriminator loss 0.0412', 'Discriminator accuracy 0.9922', 'Total loss: 4.1100', 'for batch', 14)
('GAN loss 4.0452 ', 'GAN acc 0.0000', 'Discriminator loss 0.0536', 'Discriminator accuracy 0.9883', 'Total loss: 4.0988', 'for batch', 15)
('GAN loss 3.9938 ', 'GAN acc 0.0000', 'Discriminator loss 0.0391', 'Discriminator accuracy 0.9902', 'Total loss: 4.0329', 'for batch', 16)
('GAN loss 4.0899 ', 'GAN acc 0.0000', 'Discriminator loss 0.0357', 'Discriminator accuracy 0.9941', 'Total loss: 4.1256', 'for batch', 17)
('GAN loss 4.2268 ', 'GAN acc 0.0000', 'Discriminator loss 0.0338', 'Discriminator accuracy 0.9941', 'Total loss: 4.2606', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97543776)
('DISCRIMINATOR_Imagem FAKE=', 0.016476646)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.708802')
----------------------------------
('Epoch', 44, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1019 ', 'GAN acc 0.0000', 'Discriminator loss 0.0592', 'Discriminator accuracy 0.9883', 'Total loss: 4.1611', 'for batch', 0)
('GAN loss 3.9853 ', 'GAN acc 0.0000', 'Discriminator loss 0.0528', 'Discriminator accuracy 0.9883', 'Total loss: 4.0381', 'for batch', 1)
('GAN loss 4.0121 ', 'GAN acc 0.0000', 'Discriminator loss 0.0593', 'Discriminator accuracy 0.9883', 'Total loss: 4.0714', 'for batch', 2)
('GAN loss 4.1809 ', 'GAN acc 0.0000', 'Discriminator loss 0.0545', 'Discriminator accuracy 0.9883', 'Total loss: 4.2354', 'for batch', 3)
('GAN loss 4.2039 ', 'GAN acc 0.0000', 'Discriminator loss 0.0458', 'Discriminator accuracy 0.9902', 'Total loss: 4.2498', 'for batch', 4)
('GAN loss 4.1109 ', 'GAN acc 0.0000', 'Discriminator loss 0.0418', 'Discriminator accuracy 0.9902', 'Total loss: 4.1527', 'for batch', 5)
('GAN loss 4.1562 ', 'GAN acc 0.0000', 'Discriminator loss 0.0222', 'Discriminator accuracy 0.9941', 'Total loss: 4.1783', 'for batch', 6)
('GAN loss 4.0418 ', 'GAN acc 0.0000', 'Discriminator loss 0.0603', 'Discriminator accuracy 0.9863', 'Total loss: 4.1022', 'for batch', 7)
('GAN loss 3.8695 ', 'GAN acc 0.0000', 'Discriminator loss 0.0584', 'Discriminator accuracy 0.9863', 'Total loss: 3.9279', 'for batch', 8)
('GAN loss 3.6264 ', 'GAN acc 0.0000', 'Discriminator loss 0.0825', 'Discriminator accuracy 0.9805', 'Total loss: 3.7089', 'for batch', 9)
('GAN loss 3.7909 ', 'GAN acc 0.0000', 'Discriminator loss 0.0502', 'Discriminator accuracy 0.9883', 'Total loss: 3.8411', 'for batch', 10)
('GAN loss 3.6102 ', 'GAN acc 0.0000', 'Discriminator loss 0.0525', 'Discriminator accuracy 0.9883', 'Total loss: 3.6627', 'for batch', 11)
('GAN loss 3.9946 ', 'GAN acc 0.0000', 'Discriminator loss 0.0161', 'Discriminator accuracy 0.9980', 'Total loss: 4.0107', 'for batch', 12)
('GAN loss 4.1592 ', 'GAN acc 0.0000', 'Discriminator loss 0.0492', 'Discriminator accuracy 0.9902', 'Total loss: 4.2084', 'for batch', 13)
('GAN loss 4.1670 ', 'GAN acc 0.0000', 'Discriminator loss 0.0362', 'Discriminator accuracy 0.9922', 'Total loss: 4.2032', 'for batch', 14)
('GAN loss 3.9931 ', 'GAN acc 0.0000', 'Discriminator loss 0.0518', 'Discriminator accuracy 0.9883', 'Total loss: 4.0449', 'for batch', 15)
('GAN loss 3.9910 ', 'GAN acc 0.0000', 'Discriminator loss 0.0377', 'Discriminator accuracy 0.9922', 'Total loss: 4.0287', 'for batch', 16)
('GAN loss 4.1253 ', 'GAN acc 0.0000', 'Discriminator loss 0.0327', 'Discriminator accuracy 0.9941', 'Total loss: 4.1580', 'for batch', 17)
('GAN loss 4.2690 ', 'GAN acc 0.0000', 'Discriminator loss 0.0321', 'Discriminator accuracy 0.9941', 'Total loss: 4.3011', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97660196)
('DISCRIMINATOR_Imagem FAKE=', 0.015147797)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.203830')
----------------------------------
('Epoch', 45, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1885 ', 'GAN acc 0.0000', 'Discriminator loss 0.0577', 'Discriminator accuracy 0.9883', 'Total loss: 4.2462', 'for batch', 0)
('GAN loss 4.0732 ', 'GAN acc 0.0000', 'Discriminator loss 0.0518', 'Discriminator accuracy 0.9883', 'Total loss: 4.1251', 'for batch', 1)
('GAN loss 3.9646 ', 'GAN acc 0.0000', 'Discriminator loss 0.0506', 'Discriminator accuracy 0.9883', 'Total loss: 4.0152', 'for batch', 2)
('GAN loss 3.8341 ', 'GAN acc 0.0000', 'Discriminator loss 0.0511', 'Discriminator accuracy 0.9883', 'Total loss: 3.8852', 'for batch', 3)
('GAN loss 3.9339 ', 'GAN acc 0.0000', 'Discriminator loss 0.0432', 'Discriminator accuracy 0.9902', 'Total loss: 3.9771', 'for batch', 4)
('GAN loss 4.0930 ', 'GAN acc 0.0000', 'Discriminator loss 0.0358', 'Discriminator accuracy 0.9941', 'Total loss: 4.1288', 'for batch', 5)
('GAN loss 4.3965 ', 'GAN acc 0.0000', 'Discriminator loss 0.0161', 'Discriminator accuracy 0.9980', 'Total loss: 4.4126', 'for batch', 6)
('GAN loss 4.2573 ', 'GAN acc 0.0000', 'Discriminator loss 0.0580', 'Discriminator accuracy 0.9863', 'Total loss: 4.3153', 'for batch', 7)
('GAN loss 4.0395 ', 'GAN acc 0.0000', 'Discriminator loss 0.0574', 'Discriminator accuracy 0.9883', 'Total loss: 4.0969', 'for batch', 8)
('GAN loss 3.5875 ', 'GAN acc 0.0000', 'Discriminator loss 0.0801', 'Discriminator accuracy 0.9824', 'Total loss: 3.6676', 'for batch', 9)
('GAN loss 3.7784 ', 'GAN acc 0.0000', 'Discriminator loss 0.0513', 'Discriminator accuracy 0.9902', 'Total loss: 3.8298', 'for batch', 10)
('GAN loss 3.9572 ', 'GAN acc 0.0000', 'Discriminator loss 0.0446', 'Discriminator accuracy 0.9902', 'Total loss: 4.0018', 'for batch', 11)
('GAN loss 4.2192 ', 'GAN acc 0.0000', 'Discriminator loss 0.0125', 'Discriminator accuracy 0.9980', 'Total loss: 4.2317', 'for batch', 12)
('GAN loss 4.2594 ', 'GAN acc 0.0000', 'Discriminator loss 0.0489', 'Discriminator accuracy 0.9902', 'Total loss: 4.3083', 'for batch', 13)
('GAN loss 4.1699 ', 'GAN acc 0.0000', 'Discriminator loss 0.0331', 'Discriminator accuracy 0.9922', 'Total loss: 4.2030', 'for batch', 14)
('GAN loss 4.0099 ', 'GAN acc 0.0000', 'Discriminator loss 0.0511', 'Discriminator accuracy 0.9902', 'Total loss: 4.0610', 'for batch', 15)
('GAN loss 4.2208 ', 'GAN acc 0.0000', 'Discriminator loss 0.0361', 'Discriminator accuracy 0.9941', 'Total loss: 4.2569', 'for batch', 16)
('GAN loss 4.5191 ', 'GAN acc 0.0000', 'Discriminator loss 0.0368', 'Discriminator accuracy 0.9941', 'Total loss: 4.5558', 'for batch', 17)
('GAN loss 4.9382 ', 'GAN acc 0.0000', 'Discriminator loss 0.0388', 'Discriminator accuracy 0.9941', 'Total loss: 4.9770', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97536767)
('DISCRIMINATOR_Imagem FAKE=', 0.027977908)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.725880')
----------------------------------
('Epoch', 46, 'of', 50)
('Number of batches', 19)
('GAN loss 5.1293 ', 'GAN acc 0.0000', 'Discriminator loss 0.0658', 'Discriminator accuracy 0.9883', 'Total loss: 5.1950', 'for batch', 0)
('GAN loss 4.9262 ', 'GAN acc 0.0000', 'Discriminator loss 0.0531', 'Discriminator accuracy 0.9883', 'Total loss: 4.9793', 'for batch', 1)
('GAN loss 4.3411 ', 'GAN acc 0.0000', 'Discriminator loss 0.0568', 'Discriminator accuracy 0.9863', 'Total loss: 4.3978', 'for batch', 2)
('GAN loss 3.8028 ', 'GAN acc 0.0000', 'Discriminator loss 0.0496', 'Discriminator accuracy 0.9883', 'Total loss: 3.8525', 'for batch', 3)
('GAN loss 3.6326 ', 'GAN acc 0.0000', 'Discriminator loss 0.0499', 'Discriminator accuracy 0.9902', 'Total loss: 3.6825', 'for batch', 4)
('GAN loss 3.8366 ', 'GAN acc 0.0000', 'Discriminator loss 0.0386', 'Discriminator accuracy 0.9922', 'Total loss: 3.8753', 'for batch', 5)
('GAN loss 4.1862 ', 'GAN acc 0.0000', 'Discriminator loss 0.0199', 'Discriminator accuracy 0.9980', 'Total loss: 4.2061', 'for batch', 6)
('GAN loss 4.1745 ', 'GAN acc 0.0000', 'Discriminator loss 0.0578', 'Discriminator accuracy 0.9863', 'Total loss: 4.2323', 'for batch', 7)
('GAN loss 4.0276 ', 'GAN acc 0.0000', 'Discriminator loss 0.0580', 'Discriminator accuracy 0.9883', 'Total loss: 4.0855', 'for batch', 8)
('GAN loss 3.6664 ', 'GAN acc 0.0000', 'Discriminator loss 0.0790', 'Discriminator accuracy 0.9824', 'Total loss: 3.7455', 'for batch', 9)
('GAN loss 3.5025 ', 'GAN acc 0.0000', 'Discriminator loss 0.0501', 'Discriminator accuracy 0.9883', 'Total loss: 3.5526', 'for batch', 10)
('GAN loss 3.7005 ', 'GAN acc 0.0000', 'Discriminator loss 0.0494', 'Discriminator accuracy 0.9883', 'Total loss: 3.7499', 'for batch', 11)
('GAN loss 4.1857 ', 'GAN acc 0.0000', 'Discriminator loss 0.0134', 'Discriminator accuracy 1.0000', 'Total loss: 4.1992', 'for batch', 12)
('GAN loss 4.3585 ', 'GAN acc 0.0000', 'Discriminator loss 0.0479', 'Discriminator accuracy 0.9902', 'Total loss: 4.4064', 'for batch', 13)
('GAN loss 4.2651 ', 'GAN acc 0.0000', 'Discriminator loss 0.0353', 'Discriminator accuracy 0.9922', 'Total loss: 4.3003', 'for batch', 14)
('GAN loss 4.1087 ', 'GAN acc 0.0000', 'Discriminator loss 0.0513', 'Discriminator accuracy 0.9902', 'Total loss: 4.1601', 'for batch', 15)
('GAN loss 4.1152 ', 'GAN acc 0.0000', 'Discriminator loss 0.0345', 'Discriminator accuracy 0.9941', 'Total loss: 4.1498', 'for batch', 16)
('GAN loss 4.2147 ', 'GAN acc 0.0000', 'Discriminator loss 0.0299', 'Discriminator accuracy 0.9941', 'Total loss: 4.2446', 'for batch', 17)
('GAN loss 4.3478 ', 'GAN acc 0.0000', 'Discriminator loss 0.0329', 'Discriminator accuracy 0.9941', 'Total loss: 4.3807', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97844535)
('DISCRIMINATOR_Imagem FAKE=', 0.014129265)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.186724')
----------------------------------
('Epoch', 47, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2033 ', 'GAN acc 0.0000', 'Discriminator loss 0.0571', 'Discriminator accuracy 0.9883', 'Total loss: 4.2604', 'for batch', 0)
('GAN loss 4.0908 ', 'GAN acc 0.0000', 'Discriminator loss 0.0499', 'Discriminator accuracy 0.9902', 'Total loss: 4.1407', 'for batch', 1)
('GAN loss 3.9845 ', 'GAN acc 0.0000', 'Discriminator loss 0.0494', 'Discriminator accuracy 0.9902', 'Total loss: 4.0339', 'for batch', 2)
('GAN loss 3.9065 ', 'GAN acc 0.0000', 'Discriminator loss 0.0490', 'Discriminator accuracy 0.9902', 'Total loss: 3.9554', 'for batch', 3)
('GAN loss 3.9620 ', 'GAN acc 0.0000', 'Discriminator loss 0.0444', 'Discriminator accuracy 0.9902', 'Total loss: 4.0064', 'for batch', 4)
('GAN loss 4.0500 ', 'GAN acc 0.0000', 'Discriminator loss 0.0341', 'Discriminator accuracy 0.9941', 'Total loss: 4.0841', 'for batch', 5)
('GAN loss 4.3468 ', 'GAN acc 0.0000', 'Discriminator loss 0.0170', 'Discriminator accuracy 0.9980', 'Total loss: 4.3637', 'for batch', 6)
('GAN loss 4.2310 ', 'GAN acc 0.0000', 'Discriminator loss 0.0534', 'Discriminator accuracy 0.9863', 'Total loss: 4.2844', 'for batch', 7)
('GAN loss 3.9844 ', 'GAN acc 0.0000', 'Discriminator loss 0.0587', 'Discriminator accuracy 0.9883', 'Total loss: 4.0432', 'for batch', 8)
('GAN loss 3.4147 ', 'GAN acc 0.0000', 'Discriminator loss 0.0751', 'Discriminator accuracy 0.9824', 'Total loss: 3.4898', 'for batch', 9)
('GAN loss 3.9798 ', 'GAN acc 0.0000', 'Discriminator loss 0.0510', 'Discriminator accuracy 0.9902', 'Total loss: 4.0308', 'for batch', 10)
('GAN loss 4.1386 ', 'GAN acc 0.0000', 'Discriminator loss 0.0436', 'Discriminator accuracy 0.9902', 'Total loss: 4.1821', 'for batch', 11)
('GAN loss 4.4174 ', 'GAN acc 0.0000', 'Discriminator loss 0.0093', 'Discriminator accuracy 1.0000', 'Total loss: 4.4266', 'for batch', 12)
('GAN loss 4.4149 ', 'GAN acc 0.0000', 'Discriminator loss 0.0483', 'Discriminator accuracy 0.9902', 'Total loss: 4.4632', 'for batch', 13)
('GAN loss 4.2919 ', 'GAN acc 0.0000', 'Discriminator loss 0.0336', 'Discriminator accuracy 0.9922', 'Total loss: 4.3255', 'for batch', 14)
('GAN loss 4.0959 ', 'GAN acc 0.0000', 'Discriminator loss 0.0479', 'Discriminator accuracy 0.9902', 'Total loss: 4.1439', 'for batch', 15)
('GAN loss 4.1204 ', 'GAN acc 0.0000', 'Discriminator loss 0.0330', 'Discriminator accuracy 0.9941', 'Total loss: 4.1534', 'for batch', 16)
('GAN loss 4.2619 ', 'GAN acc 0.0000', 'Discriminator loss 0.0298', 'Discriminator accuracy 0.9941', 'Total loss: 4.2917', 'for batch', 17)
('GAN loss 4.3894 ', 'GAN acc 0.0000', 'Discriminator loss 0.0322', 'Discriminator accuracy 0.9941', 'Total loss: 4.4217', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98097742)
('DISCRIMINATOR_Imagem FAKE=', 0.013311166)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.700783')
----------------------------------
('Epoch', 48, 'of', 50)
('Number of batches', 19)
('GAN loss 4.2694 ', 'GAN acc 0.0000', 'Discriminator loss 0.0579', 'Discriminator accuracy 0.9883', 'Total loss: 4.3273', 'for batch', 0)
('GAN loss 4.1281 ', 'GAN acc 0.0000', 'Discriminator loss 0.0486', 'Discriminator accuracy 0.9902', 'Total loss: 4.1768', 'for batch', 1)
('GAN loss 4.0166 ', 'GAN acc 0.0000', 'Discriminator loss 0.0484', 'Discriminator accuracy 0.9902', 'Total loss: 4.0650', 'for batch', 2)
('GAN loss 3.9293 ', 'GAN acc 0.0000', 'Discriminator loss 0.0497', 'Discriminator accuracy 0.9883', 'Total loss: 3.9790', 'for batch', 3)
('GAN loss 3.9505 ', 'GAN acc 0.0000', 'Discriminator loss 0.0428', 'Discriminator accuracy 0.9902', 'Total loss: 3.9933', 'for batch', 4)
('GAN loss 4.1449 ', 'GAN acc 0.0000', 'Discriminator loss 0.0340', 'Discriminator accuracy 0.9941', 'Total loss: 4.1789', 'for batch', 5)
('GAN loss 4.4045 ', 'GAN acc 0.0000', 'Discriminator loss 0.0160', 'Discriminator accuracy 0.9980', 'Total loss: 4.4205', 'for batch', 6)
('GAN loss 4.3152 ', 'GAN acc 0.0000', 'Discriminator loss 0.0514', 'Discriminator accuracy 0.9883', 'Total loss: 4.3666', 'for batch', 7)
('GAN loss 4.0932 ', 'GAN acc 0.0000', 'Discriminator loss 0.0576', 'Discriminator accuracy 0.9883', 'Total loss: 4.1508', 'for batch', 8)
('GAN loss 3.6327 ', 'GAN acc 0.0000', 'Discriminator loss 0.0770', 'Discriminator accuracy 0.9824', 'Total loss: 3.7097', 'for batch', 9)
('GAN loss 3.7650 ', 'GAN acc 0.0000', 'Discriminator loss 0.0509', 'Discriminator accuracy 0.9902', 'Total loss: 3.8159', 'for batch', 10)
('GAN loss 3.9704 ', 'GAN acc 0.0000', 'Discriminator loss 0.0414', 'Discriminator accuracy 0.9922', 'Total loss: 4.0118', 'for batch', 11)
('GAN loss 4.3435 ', 'GAN acc 0.0000', 'Discriminator loss 0.0102', 'Discriminator accuracy 1.0000', 'Total loss: 4.3537', 'for batch', 12)
('GAN loss 4.4158 ', 'GAN acc 0.0000', 'Discriminator loss 0.0478', 'Discriminator accuracy 0.9902', 'Total loss: 4.4636', 'for batch', 13)
('GAN loss 4.3112 ', 'GAN acc 0.0000', 'Discriminator loss 0.0357', 'Discriminator accuracy 0.9922', 'Total loss: 4.3470', 'for batch', 14)
('GAN loss 4.1596 ', 'GAN acc 0.0000', 'Discriminator loss 0.0483', 'Discriminator accuracy 0.9902', 'Total loss: 4.2079', 'for batch', 15)
('GAN loss 4.1612 ', 'GAN acc 0.0000', 'Discriminator loss 0.0321', 'Discriminator accuracy 0.9941', 'Total loss: 4.1933', 'for batch', 16)
('GAN loss 4.2555 ', 'GAN acc 0.0000', 'Discriminator loss 0.0284', 'Discriminator accuracy 0.9941', 'Total loss: 4.2839', 'for batch', 17)
('GAN loss 4.3617 ', 'GAN acc 0.0000', 'Discriminator loss 0.0326', 'Discriminator accuracy 0.9941', 'Total loss: 4.3944', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98196995)
('DISCRIMINATOR_Imagem FAKE=', 0.013585079)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.177269')
----------------------------------
('Epoch', 49, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1807 ', 'GAN acc 0.0000', 'Discriminator loss 0.0584', 'Discriminator accuracy 0.9883', 'Total loss: 4.2390', 'for batch', 0)
('GAN loss 4.0979 ', 'GAN acc 0.0000', 'Discriminator loss 0.0487', 'Discriminator accuracy 0.9902', 'Total loss: 4.1466', 'for batch', 1)
('GAN loss 3.9849 ', 'GAN acc 0.0000', 'Discriminator loss 0.0485', 'Discriminator accuracy 0.9902', 'Total loss: 4.0335', 'for batch', 2)
('GAN loss 3.9062 ', 'GAN acc 0.0000', 'Discriminator loss 0.0478', 'Discriminator accuracy 0.9902', 'Total loss: 3.9540', 'for batch', 3)
('GAN loss 4.0230 ', 'GAN acc 0.0000', 'Discriminator loss 0.0431', 'Discriminator accuracy 0.9922', 'Total loss: 4.0661', 'for batch', 4)
('GAN loss 4.2174 ', 'GAN acc 0.0000', 'Discriminator loss 0.0321', 'Discriminator accuracy 0.9941', 'Total loss: 4.2496', 'for batch', 5)
('GAN loss 4.5417 ', 'GAN acc 0.0000', 'Discriminator loss 0.0161', 'Discriminator accuracy 0.9980', 'Total loss: 4.5578', 'for batch', 6)
('GAN loss 4.4544 ', 'GAN acc 0.0000', 'Discriminator loss 0.0566', 'Discriminator accuracy 0.9883', 'Total loss: 4.5110', 'for batch', 7)
('GAN loss 4.3270 ', 'GAN acc 0.0000', 'Discriminator loss 0.0575', 'Discriminator accuracy 0.9883', 'Total loss: 4.3845', 'for batch', 8)
('GAN loss 4.5102 ', 'GAN acc 0.0000', 'Discriminator loss 0.0966', 'Discriminator accuracy 0.9746', 'Total loss: 4.6068', 'for batch', 9)
('GAN loss 4.8884 ', 'GAN acc 0.0000', 'Discriminator loss 0.0577', 'Discriminator accuracy 0.9883', 'Total loss: 4.9461', 'for batch', 10)
('GAN loss 4.7840 ', 'GAN acc 0.0000', 'Discriminator loss 0.0497', 'Discriminator accuracy 0.9883', 'Total loss: 4.8337', 'for batch', 11)
('GAN loss 4.4189 ', 'GAN acc 0.0000', 'Discriminator loss 0.0111', 'Discriminator accuracy 0.9961', 'Total loss: 4.4300', 'for batch', 12)
('GAN loss 3.9213 ', 'GAN acc 0.0000', 'Discriminator loss 0.0492', 'Discriminator accuracy 0.9902', 'Total loss: 3.9705', 'for batch', 13)
('GAN loss 3.8293 ', 'GAN acc 0.0000', 'Discriminator loss 0.0366', 'Discriminator accuracy 0.9922', 'Total loss: 3.8658', 'for batch', 14)
('GAN loss 3.7058 ', 'GAN acc 0.0000', 'Discriminator loss 0.0504', 'Discriminator accuracy 0.9883', 'Total loss: 3.7562', 'for batch', 15)
('GAN loss 3.9029 ', 'GAN acc 0.0000', 'Discriminator loss 0.0370', 'Discriminator accuracy 0.9941', 'Total loss: 3.9399', 'for batch', 16)
('GAN loss 4.1450 ', 'GAN acc 0.0000', 'Discriminator loss 0.0332', 'Discriminator accuracy 0.9941', 'Total loss: 4.1781', 'for batch', 17)
('GAN loss 4.3115 ', 'GAN acc 0.0000', 'Discriminator loss 0.0329', 'Discriminator accuracy 0.9941', 'Total loss: 4.3443', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97751111)
('DISCRIMINATOR_Imagem FAKE=', 0.014630794)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.705622')
----------------------------------
('Epoch', 50, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1985 ', 'GAN acc 0.0000', 'Discriminator loss 0.0580', 'Discriminator accuracy 0.9883', 'Total loss: 4.2566', 'for batch', 0)
('GAN loss 4.1116 ', 'GAN acc 0.0000', 'Discriminator loss 0.0514', 'Discriminator accuracy 0.9902', 'Total loss: 4.1630', 'for batch', 1)
('GAN loss 4.0038 ', 'GAN acc 0.0000', 'Discriminator loss 0.0510', 'Discriminator accuracy 0.9883', 'Total loss: 4.0548', 'for batch', 2)
('GAN loss 3.8867 ', 'GAN acc 0.0000', 'Discriminator loss 0.0479', 'Discriminator accuracy 0.9902', 'Total loss: 3.9345', 'for batch', 3)
('GAN loss 3.9236 ', 'GAN acc 0.0000', 'Discriminator loss 0.0427', 'Discriminator accuracy 0.9902', 'Total loss: 3.9662', 'for batch', 4)
('GAN loss 4.0514 ', 'GAN acc 0.0000', 'Discriminator loss 0.0336', 'Discriminator accuracy 0.9941', 'Total loss: 4.0850', 'for batch', 5)
('GAN loss 4.3560 ', 'GAN acc 0.0000', 'Discriminator loss 0.0170', 'Discriminator accuracy 0.9980', 'Total loss: 4.3730', 'for batch', 6)
('GAN loss 4.2160 ', 'GAN acc 0.0000', 'Discriminator loss 0.0562', 'Discriminator accuracy 0.9863', 'Total loss: 4.2723', 'for batch', 7)
('GAN loss 3.9932 ', 'GAN acc 0.0000', 'Discriminator loss 0.0571', 'Discriminator accuracy 0.9883', 'Total loss: 4.0503', 'for batch', 8)
('GAN loss 3.3945 ', 'GAN acc 0.0000', 'Discriminator loss 0.0766', 'Discriminator accuracy 0.9824', 'Total loss: 3.4711', 'for batch', 9)
('GAN loss 3.9029 ', 'GAN acc 0.0000', 'Discriminator loss 0.0507', 'Discriminator accuracy 0.9902', 'Total loss: 3.9536', 'for batch', 10)
('GAN loss 4.1010 ', 'GAN acc 0.0000', 'Discriminator loss 0.0440', 'Discriminator accuracy 0.9902', 'Total loss: 4.1450', 'for batch', 11)
('GAN loss 4.3948 ', 'GAN acc 0.0000', 'Discriminator loss 0.0092', 'Discriminator accuracy 1.0000', 'Total loss: 4.4040', 'for batch', 12)
('GAN loss 4.4376 ', 'GAN acc 0.0000', 'Discriminator loss 0.0499', 'Discriminator accuracy 0.9902', 'Total loss: 4.4875', 'for batch', 13)
('GAN loss 4.3089 ', 'GAN acc 0.0000', 'Discriminator loss 0.0342', 'Discriminator accuracy 0.9922', 'Total loss: 4.3431', 'for batch', 14)
('GAN loss 4.1644 ', 'GAN acc 0.0000', 'Discriminator loss 0.0498', 'Discriminator accuracy 0.9902', 'Total loss: 4.2142', 'for batch', 15)
('GAN loss 4.1681 ', 'GAN acc 0.0000', 'Discriminator loss 0.0340', 'Discriminator accuracy 0.9941', 'Total loss: 4.2021', 'for batch', 16)
('GAN loss 4.2325 ', 'GAN acc 0.0000', 'Discriminator loss 0.0301', 'Discriminator accuracy 0.9941', 'Total loss: 4.2626', 'for batch', 17)
('GAN loss 4.3527 ', 'GAN acc 0.0000', 'Discriminator loss 0.0312', 'Discriminator accuracy 0.9941', 'Total loss: 4.3839', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98022741)
('DISCRIMINATOR_Imagem FAKE=', 0.013804912)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.171211')
----------------------------------
End of training
Saving histograms
----------------------------------
('Total samples = ', 5000, ' Batch size =', 256, ' Epochs = ', 50)
('Generator loss 4.3527 ', 'Discriminator loss 0.0312', 'Total: 4.3839')
----------------------------------
---DISCRIMINATOR---
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_13 (Convolution2D) (None, 32, 16, 16)    608         convolution2d_input_3[0][0]      
____________________________________________________________________________________________________
leakyrelu_13 (LeakyReLU)         (None, 32, 16, 16)    0           convolution2d_13[0][0]           
____________________________________________________________________________________________________
dropout_6 (Dropout)              (None, 32, 16, 16)    0           leakyrelu_13[0][0]               
____________________________________________________________________________________________________
convolution2d_14 (Convolution2D) (None, 64, 8, 8)      18496       dropout_6[0][0]                  
____________________________________________________________________________________________________
leakyrelu_14 (LeakyReLU)         (None, 64, 8, 8)      0           convolution2d_14[0][0]           
____________________________________________________________________________________________________
dropout_7 (Dropout)              (None, 64, 8, 8)      0           leakyrelu_14[0][0]               
____________________________________________________________________________________________________
convolution2d_15 (Convolution2D) (None, 128, 4, 4)     73856       dropout_7[0][0]                  
____________________________________________________________________________________________________
leakyrelu_15 (LeakyReLU)         (None, 128, 4, 4)     0           convolution2d_15[0][0]           
____________________________________________________________________________________________________
dropout_8 (Dropout)              (None, 128, 4, 4)     0           leakyrelu_15[0][0]               
____________________________________________________________________________________________________
convolution2d_16 (Convolution2D) (None, 256, 2, 2)     295168      dropout_8[0][0]                  
____________________________________________________________________________________________________
leakyrelu_16 (LeakyReLU)         (None, 256, 2, 2)     0           convolution2d_16[0][0]           
____________________________________________________________________________________________________
dropout_9 (Dropout)              (None, 256, 2, 2)     0           leakyrelu_16[0][0]               
____________________________________________________________________________________________________
flatten_2 (Flatten)              (None, 1024)          0           dropout_9[0][0]                  
____________________________________________________________________________________________________
dense_3 (Dense)                  (None, 1024)          1049600     flatten_2[0][0]                  
____________________________________________________________________________________________________
leakyrelu_17 (LeakyReLU)         (None, 1024)          0           dense_3[0][0]                    
____________________________________________________________________________________________________
dropout_10 (Dropout)             (None, 1024)          0           leakyrelu_17[0][0]               
____________________________________________________________________________________________________
dense_4 (Dense)                  (None, 1)             1025        dropout_10[0][0]                 
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
None
----------------------------------
---GENERATOR---
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_17 (Convolution2D) (None, 32, 32, 32)    320         convolution2d_input_4[0][0]      
____________________________________________________________________________________________________
leakyrelu_18 (LeakyReLU)         (None, 32, 32, 32)    0           convolution2d_17[0][0]           
____________________________________________________________________________________________________
convolution2d_18 (Convolution2D) (None, 64, 32, 32)    18496       leakyrelu_18[0][0]               
____________________________________________________________________________________________________
batchnormalization_7 (BatchNormal(None, 64, 32, 32)    128         convolution2d_18[0][0]           
____________________________________________________________________________________________________
leakyrelu_19 (LeakyReLU)         (None, 64, 32, 32)    0           batchnormalization_7[0][0]       
____________________________________________________________________________________________________
convolution2d_19 (Convolution2D) (None, 128, 32, 32)   73856       leakyrelu_19[0][0]               
____________________________________________________________________________________________________
batchnormalization_8 (BatchNormal(None, 128, 32, 32)   256         convolution2d_19[0][0]           
____________________________________________________________________________________________________
leakyrelu_20 (LeakyReLU)         (None, 128, 32, 32)   0           batchnormalization_8[0][0]       
____________________________________________________________________________________________________
convolution2d_20 (Convolution2D) (None, 256, 32, 32)   295168      leakyrelu_20[0][0]               
____________________________________________________________________________________________________
batchnormalization_9 (BatchNormal(None, 256, 32, 32)   512         convolution2d_20[0][0]           
____________________________________________________________________________________________________
leakyrelu_21 (LeakyReLU)         (None, 256, 32, 32)   0           batchnormalization_9[0][0]       
____________________________________________________________________________________________________
convolution2d_21 (Convolution2D) (None, 128, 32, 32)   295040      leakyrelu_21[0][0]               
____________________________________________________________________________________________________
batchnormalization_10 (BatchNorma(None, 128, 32, 32)   256         convolution2d_21[0][0]           
____________________________________________________________________________________________________
leakyrelu_22 (LeakyReLU)         (None, 128, 32, 32)   0           batchnormalization_10[0][0]      
____________________________________________________________________________________________________
convolution2d_22 (Convolution2D) (None, 64, 32, 32)    73792       leakyrelu_22[0][0]               
____________________________________________________________________________________________________
batchnormalization_11 (BatchNorma(None, 64, 32, 32)    128         convolution2d_22[0][0]           
____________________________________________________________________________________________________
leakyrelu_23 (LeakyReLU)         (None, 64, 32, 32)    0           batchnormalization_11[0][0]      
____________________________________________________________________________________________________
convolution2d_23 (Convolution2D) (None, 32, 32, 32)    18464       leakyrelu_23[0][0]               
____________________________________________________________________________________________________
batchnormalization_12 (BatchNorma(None, 32, 32, 32)    64          convolution2d_23[0][0]           
____________________________________________________________________________________________________
leakyrelu_24 (LeakyReLU)         (None, 32, 32, 32)    0           batchnormalization_12[0][0]      
____________________________________________________________________________________________________
convolution2d_24 (Convolution2D) (None, 2, 32, 32)     578         leakyrelu_24[0][0]               
____________________________________________________________________________________________________
lambda_2 (Lambda)                (None, 2, 32, 32)     0           convolution2d_24[0][0]           
====================================================================================================
Total params: 777058
____________________________________________________________________________________________________
None
----------------------------------
---GAN---
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_5 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_4 (Sequential)        (None, 1)             0           lambda_2[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
None
----------------------------------
('Training with dataset based on class - ', 'truck', 'with', 5000, 'samples')
----------------------------------
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_8 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_7 (Sequential)        (None, 1)             0           lambda_3[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_25 (Convolution2D) (None, 32, 16, 16)    608         convolution2d_input_5[0][0]      
____________________________________________________________________________________________________
leakyrelu_25 (LeakyReLU)         (None, 32, 16, 16)    0           convolution2d_25[0][0]           
____________________________________________________________________________________________________
dropout_11 (Dropout)             (None, 32, 16, 16)    0           leakyrelu_25[0][0]               
____________________________________________________________________________________________________
convolution2d_26 (Convolution2D) (None, 64, 8, 8)      18496       dropout_11[0][0]                 
____________________________________________________________________________________________________
leakyrelu_26 (LeakyReLU)         (None, 64, 8, 8)      0           convolution2d_26[0][0]           
____________________________________________________________________________________________________
dropout_12 (Dropout)             (None, 64, 8, 8)      0           leakyrelu_26[0][0]               
____________________________________________________________________________________________________
convolution2d_27 (Convolution2D) (None, 128, 4, 4)     73856       dropout_12[0][0]                 
____________________________________________________________________________________________________
leakyrelu_27 (LeakyReLU)         (None, 128, 4, 4)     0           convolution2d_27[0][0]           
____________________________________________________________________________________________________
dropout_13 (Dropout)             (None, 128, 4, 4)     0           leakyrelu_27[0][0]               
____________________________________________________________________________________________________
convolution2d_28 (Convolution2D) (None, 256, 2, 2)     295168      dropout_13[0][0]                 
____________________________________________________________________________________________________
leakyrelu_28 (LeakyReLU)         (None, 256, 2, 2)     0           convolution2d_28[0][0]           
____________________________________________________________________________________________________
dropout_14 (Dropout)             (None, 256, 2, 2)     0           leakyrelu_28[0][0]               
____________________________________________________________________________________________________
flatten_3 (Flatten)              (None, 1024)          0           dropout_14[0][0]                 
____________________________________________________________________________________________________
dense_5 (Dense)                  (None, 1024)          1049600     flatten_3[0][0]                  
____________________________________________________________________________________________________
leakyrelu_29 (LeakyReLU)         (None, 1024)          0           dense_5[0][0]                    
____________________________________________________________________________________________________
dropout_15 (Dropout)             (None, 1024)          0           leakyrelu_29[0][0]               
____________________________________________________________________________________________________
dense_6 (Dense)                  (None, 1)             1025        dropout_15[0][0]                 
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
('Epoch', 1, 'of', 50)
('Number of batches', 19)
('GAN loss 1.7748 ', 'GAN acc 0.0117', 'Discriminator loss 0.7808', 'Discriminator accuracy 0.4961', 'Total loss: 2.5556', 'for batch', 0)
('GAN loss 2.4065 ', 'GAN acc 0.0000', 'Discriminator loss 0.5521', 'Discriminator accuracy 0.4980', 'Total loss: 2.9587', 'for batch', 1)
('GAN loss 2.5083 ', 'GAN acc 0.0000', 'Discriminator loss 0.5349', 'Discriminator accuracy 0.5059', 'Total loss: 3.0432', 'for batch', 2)
('GAN loss 2.5055 ', 'GAN acc 0.0000', 'Discriminator loss 0.5123', 'Discriminator accuracy 0.5059', 'Total loss: 3.0178', 'for batch', 3)
('GAN loss 2.1965 ', 'GAN acc 0.0000', 'Discriminator loss 0.5266', 'Discriminator accuracy 0.5039', 'Total loss: 2.7231', 'for batch', 4)
('GAN loss 1.9922 ', 'GAN acc 0.0000', 'Discriminator loss 0.5365', 'Discriminator accuracy 0.5117', 'Total loss: 2.5287', 'for batch', 5)
('GAN loss 1.7972 ', 'GAN acc 0.0000', 'Discriminator loss 0.5334', 'Discriminator accuracy 0.5234', 'Total loss: 2.3306', 'for batch', 6)
('GAN loss 1.7225 ', 'GAN acc 0.0000', 'Discriminator loss 0.5226', 'Discriminator accuracy 0.5703', 'Total loss: 2.2451', 'for batch', 7)
('GAN loss 1.5769 ', 'GAN acc 0.0000', 'Discriminator loss 0.5152', 'Discriminator accuracy 0.6836', 'Total loss: 2.0921', 'for batch', 8)
('GAN loss 1.3924 ', 'GAN acc 0.0078', 'Discriminator loss 0.5229', 'Discriminator accuracy 0.7539', 'Total loss: 1.9153', 'for batch', 9)
('GAN loss 1.3473 ', 'GAN acc 0.0430', 'Discriminator loss 0.5202', 'Discriminator accuracy 0.8184', 'Total loss: 1.8675', 'for batch', 10)
('GAN loss 1.1247 ', 'GAN acc 0.1250', 'Discriminator loss 0.5399', 'Discriminator accuracy 0.8809', 'Total loss: 1.6646', 'for batch', 11)
('GAN loss 0.9400 ', 'GAN acc 0.1797', 'Discriminator loss 0.6043', 'Discriminator accuracy 0.7324', 'Total loss: 1.5443', 'for batch', 12)
('GAN loss 0.8809 ', 'GAN acc 0.0586', 'Discriminator loss 0.6109', 'Discriminator accuracy 0.8164', 'Total loss: 1.4918', 'for batch', 13)
('GAN loss 0.7221 ', 'GAN acc 0.3359', 'Discriminator loss 0.6451', 'Discriminator accuracy 0.7031', 'Total loss: 1.3672', 'for batch', 14)
('GAN loss 0.6696 ', 'GAN acc 0.8555', 'Discriminator loss 0.6471', 'Discriminator accuracy 0.5527', 'Total loss: 1.3167', 'for batch', 15)
('GAN loss 0.6423 ', 'GAN acc 0.9805', 'Discriminator loss 0.6290', 'Discriminator accuracy 0.4824', 'Total loss: 1.2713', 'for batch', 16)
('GAN loss 0.6371 ', 'GAN acc 0.9961', 'Discriminator loss 0.5986', 'Discriminator accuracy 0.4883', 'Total loss: 1.2357', 'for batch', 17)
('GAN loss 0.6354 ', 'GAN acc 0.9961', 'Discriminator loss 0.5820', 'Discriminator accuracy 0.4824', 'Total loss: 1.2173', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.73521924)
('DISCRIMINATOR_Imagem FAKE=', 0.53350157)
('Discriminator trained', 12, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:34.772561')
----------------------------------
('Epoch', 2, 'of', 50)
('Number of batches', 19)
('GAN loss 0.6383 ', 'GAN acc 1.0000', 'Discriminator loss 0.5544', 'Discriminator accuracy 0.4961', 'Total loss: 1.1927', 'for batch', 0)
('GAN loss 0.7315 ', 'GAN acc 0.4141', 'Discriminator loss 0.5618', 'Discriminator accuracy 0.5098', 'Total loss: 1.2933', 'for batch', 1)
('GAN loss 0.6269 ', 'GAN acc 0.9453', 'Discriminator loss 0.5455', 'Discriminator accuracy 0.4980', 'Total loss: 1.1724', 'for batch', 2)
('GAN loss 0.6805 ', 'GAN acc 0.5469', 'Discriminator loss 0.8900', 'Discriminator accuracy 0.4922', 'Total loss: 1.5705', 'for batch', 3)
('GAN loss 3.0506 ', 'GAN acc 0.0000', 'Discriminator loss 0.8251', 'Discriminator accuracy 0.5840', 'Total loss: 3.8757', 'for batch', 4)
('GAN loss 1.0378 ', 'GAN acc 0.0000', 'Discriminator loss 0.6284', 'Discriminator accuracy 0.7168', 'Total loss: 1.6662', 'for batch', 5)
('GAN loss 0.8980 ', 'GAN acc 0.0000', 'Discriminator loss 0.7467', 'Discriminator accuracy 0.5879', 'Total loss: 1.6447', 'for batch', 6)
('GAN loss 0.8579 ', 'GAN acc 0.0000', 'Discriminator loss 0.6918', 'Discriminator accuracy 0.6602', 'Total loss: 1.5497', 'for batch', 7)
('GAN loss 0.8294 ', 'GAN acc 0.0000', 'Discriminator loss 0.6414', 'Discriminator accuracy 0.7539', 'Total loss: 1.4708', 'for batch', 8)
('GAN loss 0.8345 ', 'GAN acc 0.0000', 'Discriminator loss 0.5797', 'Discriminator accuracy 0.8691', 'Total loss: 1.4142', 'for batch', 9)
('GAN loss 0.8239 ', 'GAN acc 0.0117', 'Discriminator loss 0.5561', 'Discriminator accuracy 0.8828', 'Total loss: 1.3800', 'for batch', 10)
('GAN loss 1.0160 ', 'GAN acc 0.0000', 'Discriminator loss 0.5438', 'Discriminator accuracy 0.7598', 'Total loss: 1.5598', 'for batch', 11)
('GAN loss 0.9519 ', 'GAN acc 0.0000', 'Discriminator loss 0.4628', 'Discriminator accuracy 0.9336', 'Total loss: 1.4146', 'for batch', 12)
('GAN loss 0.9922 ', 'GAN acc 0.0000', 'Discriminator loss 0.4356', 'Discriminator accuracy 0.9551', 'Total loss: 1.4277', 'for batch', 13)
('GAN loss 1.0403 ', 'GAN acc 0.0000', 'Discriminator loss 0.4017', 'Discriminator accuracy 0.9648', 'Total loss: 1.4420', 'for batch', 14)
('GAN loss 1.1342 ', 'GAN acc 0.0000', 'Discriminator loss 0.3711', 'Discriminator accuracy 0.9668', 'Total loss: 1.5053', 'for batch', 15)
('GAN loss 1.1771 ', 'GAN acc 0.0000', 'Discriminator loss 0.3517', 'Discriminator accuracy 0.9590', 'Total loss: 1.5288', 'for batch', 16)
('GAN loss 1.3234 ', 'GAN acc 0.0000', 'Discriminator loss 0.3283', 'Discriminator accuracy 0.9609', 'Total loss: 1.6517', 'for batch', 17)
('GAN loss 1.4233 ', 'GAN acc 0.0000', 'Discriminator loss 0.2936', 'Discriminator accuracy 0.9570', 'Total loss: 1.7169', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.81691259)
('DISCRIMINATOR_Imagem FAKE=', 0.27283815)
('Discriminator trained', 19, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.089506')
----------------------------------
('Epoch', 3, 'of', 50)
('Number of batches', 19)
('GAN loss 1.4778 ', 'GAN acc 0.0000', 'Discriminator loss 0.2876', 'Discriminator accuracy 0.9629', 'Total loss: 1.7654', 'for batch', 0)
('GAN loss 1.9029 ', 'GAN acc 0.0000', 'Discriminator loss 0.2856', 'Discriminator accuracy 0.9434', 'Total loss: 2.1885', 'for batch', 1)
('GAN loss 2.0898 ', 'GAN acc 0.0039', 'Discriminator loss 0.2530', 'Discriminator accuracy 0.9355', 'Total loss: 2.3429', 'for batch', 2)
('GAN loss 2.0775 ', 'GAN acc 0.0039', 'Discriminator loss 0.2509', 'Discriminator accuracy 0.9395', 'Total loss: 2.3284', 'for batch', 3)
('GAN loss 2.2022 ', 'GAN acc 0.0000', 'Discriminator loss 0.2243', 'Discriminator accuracy 0.9473', 'Total loss: 2.4266', 'for batch', 4)
('GAN loss 2.1411 ', 'GAN acc 0.0000', 'Discriminator loss 0.2228', 'Discriminator accuracy 0.9316', 'Total loss: 2.3639', 'for batch', 5)
('GAN loss 2.0119 ', 'GAN acc 0.0000', 'Discriminator loss 0.2451', 'Discriminator accuracy 0.9316', 'Total loss: 2.2570', 'for batch', 6)
('GAN loss 2.1516 ', 'GAN acc 0.0000', 'Discriminator loss 0.2171', 'Discriminator accuracy 0.9492', 'Total loss: 2.3687', 'for batch', 7)
('GAN loss 2.0817 ', 'GAN acc 0.0000', 'Discriminator loss 0.1923', 'Discriminator accuracy 0.9453', 'Total loss: 2.2740', 'for batch', 8)
('GAN loss 2.3652 ', 'GAN acc 0.0000', 'Discriminator loss 0.1719', 'Discriminator accuracy 0.9668', 'Total loss: 2.5371', 'for batch', 9)
('GAN loss 2.3326 ', 'GAN acc 0.0000', 'Discriminator loss 0.2113', 'Discriminator accuracy 0.9355', 'Total loss: 2.5439', 'for batch', 10)
('GAN loss 2.2461 ', 'GAN acc 0.0000', 'Discriminator loss 0.1917', 'Discriminator accuracy 0.9473', 'Total loss: 2.4378', 'for batch', 11)
('GAN loss 2.5869 ', 'GAN acc 0.0000', 'Discriminator loss 0.1952', 'Discriminator accuracy 0.9395', 'Total loss: 2.7822', 'for batch', 12)
('GAN loss 2.2737 ', 'GAN acc 0.0000', 'Discriminator loss 0.1788', 'Discriminator accuracy 0.9473', 'Total loss: 2.4525', 'for batch', 13)
('GAN loss 2.6516 ', 'GAN acc 0.0000', 'Discriminator loss 0.1440', 'Discriminator accuracy 0.9688', 'Total loss: 2.7957', 'for batch', 14)
('GAN loss 2.5989 ', 'GAN acc 0.0000', 'Discriminator loss 0.1351', 'Discriminator accuracy 0.9648', 'Total loss: 2.7340', 'for batch', 15)
('GAN loss 2.3779 ', 'GAN acc 0.0039', 'Discriminator loss 0.1520', 'Discriminator accuracy 0.9629', 'Total loss: 2.5298', 'for batch', 16)
('GAN loss 2.9052 ', 'GAN acc 0.0000', 'Discriminator loss 0.1783', 'Discriminator accuracy 0.9531', 'Total loss: 3.0836', 'for batch', 17)
('GAN loss 2.6760 ', 'GAN acc 0.0000', 'Discriminator loss 0.1311', 'Discriminator accuracy 0.9551', 'Total loss: 2.8072', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.92714912)
('DISCRIMINATOR_Imagem FAKE=', 0.087324344)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.663250')
----------------------------------
('Epoch', 4, 'of', 50)
('Number of batches', 19)
('GAN loss 2.6360 ', 'GAN acc 0.0000', 'Discriminator loss 0.1137', 'Discriminator accuracy 0.9785', 'Total loss: 2.7497', 'for batch', 0)
('GAN loss 2.7352 ', 'GAN acc 0.0000', 'Discriminator loss 0.1557', 'Discriminator accuracy 0.9609', 'Total loss: 2.8909', 'for batch', 1)
('GAN loss 2.7222 ', 'GAN acc 0.0000', 'Discriminator loss 0.1437', 'Discriminator accuracy 0.9609', 'Total loss: 2.8659', 'for batch', 2)
('GAN loss 3.3814 ', 'GAN acc 0.0000', 'Discriminator loss 0.1270', 'Discriminator accuracy 0.9707', 'Total loss: 3.5084', 'for batch', 3)
('GAN loss 2.7753 ', 'GAN acc 0.0000', 'Discriminator loss 0.1248', 'Discriminator accuracy 0.9590', 'Total loss: 2.9001', 'for batch', 4)
('GAN loss 2.7111 ', 'GAN acc 0.0000', 'Discriminator loss 0.0948', 'Discriminator accuracy 0.9688', 'Total loss: 2.8059', 'for batch', 5)
('GAN loss 2.9213 ', 'GAN acc 0.0000', 'Discriminator loss 0.1308', 'Discriminator accuracy 0.9688', 'Total loss: 3.0521', 'for batch', 6)
('GAN loss 3.0572 ', 'GAN acc 0.0000', 'Discriminator loss 0.1075', 'Discriminator accuracy 0.9785', 'Total loss: 3.1647', 'for batch', 7)
('GAN loss 5.0618 ', 'GAN acc 0.0000', 'Discriminator loss 0.1319', 'Discriminator accuracy 0.9668', 'Total loss: 5.1937', 'for batch', 8)
('GAN loss 4.5082 ', 'GAN acc 0.0000', 'Discriminator loss 0.1105', 'Discriminator accuracy 0.9629', 'Total loss: 4.6186', 'for batch', 9)
('GAN loss 3.2378 ', 'GAN acc 0.0000', 'Discriminator loss 0.1715', 'Discriminator accuracy 0.9336', 'Total loss: 3.4093', 'for batch', 10)
('GAN loss 2.4693 ', 'GAN acc 0.0000', 'Discriminator loss 0.0729', 'Discriminator accuracy 0.9785', 'Total loss: 2.5422', 'for batch', 11)
('GAN loss 2.9528 ', 'GAN acc 0.0000', 'Discriminator loss 0.0838', 'Discriminator accuracy 0.9863', 'Total loss: 3.0366', 'for batch', 12)
('GAN loss 3.2078 ', 'GAN acc 0.0000', 'Discriminator loss 0.0706', 'Discriminator accuracy 0.9863', 'Total loss: 3.2784', 'for batch', 13)
('GAN loss 3.5087 ', 'GAN acc 0.0000', 'Discriminator loss 0.0757', 'Discriminator accuracy 0.9883', 'Total loss: 3.5844', 'for batch', 14)
('GAN loss 5.0499 ', 'GAN acc 0.0000', 'Discriminator loss 0.1307', 'Discriminator accuracy 0.9688', 'Total loss: 5.1806', 'for batch', 15)
('GAN loss 4.5064 ', 'GAN acc 0.0000', 'Discriminator loss 0.1312', 'Discriminator accuracy 0.9551', 'Total loss: 4.6376', 'for batch', 16)
('GAN loss 3.4636 ', 'GAN acc 0.0000', 'Discriminator loss 0.1475', 'Discriminator accuracy 0.9629', 'Total loss: 3.6112', 'for batch', 17)
('GAN loss 3.0264 ', 'GAN acc 0.0039', 'Discriminator loss 0.1061', 'Discriminator accuracy 0.9707', 'Total loss: 3.1325', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.95618725)
('DISCRIMINATOR_Imagem FAKE=', 0.14537899)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.163685')
----------------------------------
('Epoch', 5, 'of', 50)
('Number of batches', 19)
('GAN loss 3.1150 ', 'GAN acc 0.0000', 'Discriminator loss 0.1026', 'Discriminator accuracy 0.9824', 'Total loss: 3.2176', 'for batch', 0)
('GAN loss 2.9702 ', 'GAN acc 0.0000', 'Discriminator loss 0.1114', 'Discriminator accuracy 0.9707', 'Total loss: 3.0816', 'for batch', 1)
('GAN loss 4.4292 ', 'GAN acc 0.0000', 'Discriminator loss 0.1066', 'Discriminator accuracy 0.9746', 'Total loss: 4.5359', 'for batch', 2)
('GAN loss 3.1526 ', 'GAN acc 0.0000', 'Discriminator loss 0.0868', 'Discriminator accuracy 0.9727', 'Total loss: 3.2394', 'for batch', 3)
('GAN loss 3.0988 ', 'GAN acc 0.0000', 'Discriminator loss 0.1140', 'Discriminator accuracy 0.9707', 'Total loss: 3.2128', 'for batch', 4)
('GAN loss 3.2465 ', 'GAN acc 0.0000', 'Discriminator loss 0.0668', 'Discriminator accuracy 0.9863', 'Total loss: 3.3133', 'for batch', 5)
('GAN loss 3.2017 ', 'GAN acc 0.0000', 'Discriminator loss 0.0865', 'Discriminator accuracy 0.9785', 'Total loss: 3.2882', 'for batch', 6)
('GAN loss 3.3711 ', 'GAN acc 0.0000', 'Discriminator loss 0.0595', 'Discriminator accuracy 0.9883', 'Total loss: 3.4306', 'for batch', 7)
('GAN loss 3.7129 ', 'GAN acc 0.0000', 'Discriminator loss 0.0444', 'Discriminator accuracy 0.9922', 'Total loss: 3.7573', 'for batch', 8)
('GAN loss 3.8044 ', 'GAN acc 0.0000', 'Discriminator loss 0.0462', 'Discriminator accuracy 0.9922', 'Total loss: 3.8506', 'for batch', 9)
('GAN loss 3.9407 ', 'GAN acc 0.0000', 'Discriminator loss 0.0564', 'Discriminator accuracy 0.9902', 'Total loss: 3.9971', 'for batch', 10)
('GAN loss 4.3284 ', 'GAN acc 0.0000', 'Discriminator loss 0.0749', 'Discriminator accuracy 0.9785', 'Total loss: 4.4032', 'for batch', 11)
('GAN loss 4.0457 ', 'GAN acc 0.0000', 'Discriminator loss 0.0966', 'Discriminator accuracy 0.9668', 'Total loss: 4.1423', 'for batch', 12)
('GAN loss 3.4195 ', 'GAN acc 0.0000', 'Discriminator loss 0.0916', 'Discriminator accuracy 0.9746', 'Total loss: 3.5111', 'for batch', 13)
('GAN loss 4.8436 ', 'GAN acc 0.0000', 'Discriminator loss 0.1137', 'Discriminator accuracy 0.9727', 'Total loss: 4.9573', 'for batch', 14)
('GAN loss 4.3736 ', 'GAN acc 0.0000', 'Discriminator loss 0.0867', 'Discriminator accuracy 0.9727', 'Total loss: 4.4603', 'for batch', 15)
('GAN loss 3.5526 ', 'GAN acc 0.0000', 'Discriminator loss 0.1161', 'Discriminator accuracy 0.9688', 'Total loss: 3.6686', 'for batch', 16)
('GAN loss 2.6818 ', 'GAN acc 0.0000', 'Discriminator loss 0.0910', 'Discriminator accuracy 0.9766', 'Total loss: 2.7728', 'for batch', 17)
('GAN loss 3.2461 ', 'GAN acc 0.0000', 'Discriminator loss 0.0707', 'Discriminator accuracy 0.9922', 'Total loss: 3.3168', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97253954)
('DISCRIMINATOR_Imagem FAKE=', 0.067329526)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.703442')
----------------------------------
('Epoch', 6, 'of', 50)
('Number of batches', 19)
('GAN loss 3.7577 ', 'GAN acc 0.0000', 'Discriminator loss 0.0695', 'Discriminator accuracy 0.9902', 'Total loss: 3.8272', 'for batch', 0)
('GAN loss 3.8338 ', 'GAN acc 0.0000', 'Discriminator loss 0.0890', 'Discriminator accuracy 0.9766', 'Total loss: 3.9228', 'for batch', 1)
('GAN loss 3.6587 ', 'GAN acc 0.0000', 'Discriminator loss 0.0767', 'Discriminator accuracy 0.9844', 'Total loss: 3.7354', 'for batch', 2)
('GAN loss 3.9114 ', 'GAN acc 0.0000', 'Discriminator loss 0.0816', 'Discriminator accuracy 0.9824', 'Total loss: 3.9930', 'for batch', 3)
('GAN loss 3.5660 ', 'GAN acc 0.0000', 'Discriminator loss 0.0750', 'Discriminator accuracy 0.9805', 'Total loss: 3.6409', 'for batch', 4)
('GAN loss 3.6131 ', 'GAN acc 0.0000', 'Discriminator loss 0.0841', 'Discriminator accuracy 0.9805', 'Total loss: 3.6971', 'for batch', 5)
('GAN loss 2.9515 ', 'GAN acc 0.0000', 'Discriminator loss 0.1154', 'Discriminator accuracy 0.9688', 'Total loss: 3.0670', 'for batch', 6)
('GAN loss 4.5810 ', 'GAN acc 0.0000', 'Discriminator loss 0.0890', 'Discriminator accuracy 0.9805', 'Total loss: 4.6701', 'for batch', 7)
('GAN loss 4.0417 ', 'GAN acc 0.0000', 'Discriminator loss 0.0616', 'Discriminator accuracy 0.9805', 'Total loss: 4.1033', 'for batch', 8)
('GAN loss 3.8174 ', 'GAN acc 0.0000', 'Discriminator loss 0.0497', 'Discriminator accuracy 0.9902', 'Total loss: 3.8672', 'for batch', 9)
('GAN loss 3.4761 ', 'GAN acc 0.0000', 'Discriminator loss 0.0565', 'Discriminator accuracy 0.9863', 'Total loss: 3.5327', 'for batch', 10)
('GAN loss 3.6959 ', 'GAN acc 0.0000', 'Discriminator loss 0.0546', 'Discriminator accuracy 0.9902', 'Total loss: 3.7504', 'for batch', 11)
('GAN loss 3.7712 ', 'GAN acc 0.0000', 'Discriminator loss 0.0644', 'Discriminator accuracy 0.9844', 'Total loss: 3.8356', 'for batch', 12)
('GAN loss 3.7561 ', 'GAN acc 0.0078', 'Discriminator loss 0.0819', 'Discriminator accuracy 0.9824', 'Total loss: 3.8380', 'for batch', 13)
('GAN loss 4.3084 ', 'GAN acc 0.0000', 'Discriminator loss 0.0740', 'Discriminator accuracy 0.9863', 'Total loss: 4.3823', 'for batch', 14)
('GAN loss 4.3098 ', 'GAN acc 0.0000', 'Discriminator loss 0.0703', 'Discriminator accuracy 0.9883', 'Total loss: 4.3801', 'for batch', 15)
('GAN loss 3.6816 ', 'GAN acc 0.0000', 'Discriminator loss 0.1048', 'Discriminator accuracy 0.9727', 'Total loss: 3.7864', 'for batch', 16)
('GAN loss 15.3965 ', 'GAN acc 0.0000', 'Discriminator loss 0.4475', 'Discriminator accuracy 0.8984', 'Total loss: 15.8440', 'for batch', 17)
('GAN loss 15.0022 ', 'GAN acc 0.0000', 'Discriminator loss 0.8621', 'Discriminator accuracy 0.8633', 'Total loss: 15.8643', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.8629064)
('DISCRIMINATOR_Imagem FAKE=', 0.0024699883)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.212676')
----------------------------------
('Epoch', 7, 'of', 50)
('Number of batches', 19)
('GAN loss 7.2658 ', 'GAN acc 0.0117', 'Discriminator loss 0.5070', 'Discriminator accuracy 0.9160', 'Total loss: 7.7727', 'for batch', 0)
('GAN loss 3.0714 ', 'GAN acc 0.0000', 'Discriminator loss 0.5571', 'Discriminator accuracy 0.5703', 'Total loss: 3.6285', 'for batch', 1)
('GAN loss 3.7917 ', 'GAN acc 0.0000', 'Discriminator loss 0.1900', 'Discriminator accuracy 0.9492', 'Total loss: 3.9817', 'for batch', 2)
('GAN loss 3.9499 ', 'GAN acc 0.0000', 'Discriminator loss 0.0926', 'Discriminator accuracy 0.9766', 'Total loss: 4.0425', 'for batch', 3)
('GAN loss 3.8602 ', 'GAN acc 0.0000', 'Discriminator loss 0.0968', 'Discriminator accuracy 0.9668', 'Total loss: 3.9570', 'for batch', 4)
('GAN loss 3.6612 ', 'GAN acc 0.0000', 'Discriminator loss 0.0878', 'Discriminator accuracy 0.9688', 'Total loss: 3.7490', 'for batch', 5)
('GAN loss 3.4279 ', 'GAN acc 0.0000', 'Discriminator loss 0.1135', 'Discriminator accuracy 0.9727', 'Total loss: 3.5414', 'for batch', 6)
('GAN loss 3.4041 ', 'GAN acc 0.0000', 'Discriminator loss 0.0830', 'Discriminator accuracy 0.9785', 'Total loss: 3.4871', 'for batch', 7)
('GAN loss 3.4538 ', 'GAN acc 0.0000', 'Discriminator loss 0.0522', 'Discriminator accuracy 0.9883', 'Total loss: 3.5060', 'for batch', 8)
('GAN loss 3.3289 ', 'GAN acc 0.0000', 'Discriminator loss 0.0559', 'Discriminator accuracy 0.9902', 'Total loss: 3.3849', 'for batch', 9)
('GAN loss 3.6191 ', 'GAN acc 0.0000', 'Discriminator loss 0.0635', 'Discriminator accuracy 0.9824', 'Total loss: 3.6826', 'for batch', 10)
('GAN loss 3.5570 ', 'GAN acc 0.0000', 'Discriminator loss 0.0639', 'Discriminator accuracy 0.9844', 'Total loss: 3.6209', 'for batch', 11)
('GAN loss 3.3757 ', 'GAN acc 0.0000', 'Discriminator loss 0.0774', 'Discriminator accuracy 0.9727', 'Total loss: 3.4531', 'for batch', 12)
('GAN loss 3.3441 ', 'GAN acc 0.0000', 'Discriminator loss 0.0843', 'Discriminator accuracy 0.9844', 'Total loss: 3.4285', 'for batch', 13)
('GAN loss 3.4298 ', 'GAN acc 0.0000', 'Discriminator loss 0.0619', 'Discriminator accuracy 0.9863', 'Total loss: 3.4917', 'for batch', 14)
('GAN loss 3.3528 ', 'GAN acc 0.0000', 'Discriminator loss 0.0657', 'Discriminator accuracy 0.9863', 'Total loss: 3.4185', 'for batch', 15)
('GAN loss 3.4038 ', 'GAN acc 0.0000', 'Discriminator loss 0.0977', 'Discriminator accuracy 0.9766', 'Total loss: 3.5015', 'for batch', 16)
('GAN loss 3.7776 ', 'GAN acc 0.0000', 'Discriminator loss 0.0940', 'Discriminator accuracy 0.9707', 'Total loss: 3.8716', 'for batch', 17)
('GAN loss 3.6119 ', 'GAN acc 0.0000', 'Discriminator loss 0.0672', 'Discriminator accuracy 0.9824', 'Total loss: 3.6791', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96459246)
('DISCRIMINATOR_Imagem FAKE=', 0.038896132)
('Discriminator trained', 1, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.698702')
----------------------------------
('Epoch', 8, 'of', 50)
('Number of batches', 19)
('GAN loss 3.6333 ', 'GAN acc 0.0000', 'Discriminator loss 0.0695', 'Discriminator accuracy 0.9824', 'Total loss: 3.7028', 'for batch', 0)
('GAN loss 3.5073 ', 'GAN acc 0.0000', 'Discriminator loss 0.0992', 'Discriminator accuracy 0.9746', 'Total loss: 3.6065', 'for batch', 1)
('GAN loss 3.4678 ', 'GAN acc 0.0000', 'Discriminator loss 0.0742', 'Discriminator accuracy 0.9844', 'Total loss: 3.5420', 'for batch', 2)
('GAN loss 3.4601 ', 'GAN acc 0.0000', 'Discriminator loss 0.0613', 'Discriminator accuracy 0.9883', 'Total loss: 3.5214', 'for batch', 3)
('GAN loss 3.3899 ', 'GAN acc 0.0000', 'Discriminator loss 0.0650', 'Discriminator accuracy 0.9844', 'Total loss: 3.4548', 'for batch', 4)
('GAN loss 5.4376 ', 'GAN acc 0.0000', 'Discriminator loss 0.1328', 'Discriminator accuracy 0.9570', 'Total loss: 5.5704', 'for batch', 5)
('GAN loss 4.2675 ', 'GAN acc 0.0000', 'Discriminator loss 0.1229', 'Discriminator accuracy 0.9668', 'Total loss: 4.3904', 'for batch', 6)
('GAN loss 4.0496 ', 'GAN acc 0.0000', 'Discriminator loss 0.0856', 'Discriminator accuracy 0.9746', 'Total loss: 4.1352', 'for batch', 7)
('GAN loss 3.7978 ', 'GAN acc 0.0000', 'Discriminator loss 0.0518', 'Discriminator accuracy 0.9844', 'Total loss: 3.8496', 'for batch', 8)
('GAN loss 3.6918 ', 'GAN acc 0.0000', 'Discriminator loss 0.0561', 'Discriminator accuracy 0.9883', 'Total loss: 3.7479', 'for batch', 9)
('GAN loss 3.5544 ', 'GAN acc 0.0000', 'Discriminator loss 0.0580', 'Discriminator accuracy 0.9863', 'Total loss: 3.6124', 'for batch', 10)
('GAN loss 3.4160 ', 'GAN acc 0.0000', 'Discriminator loss 0.0587', 'Discriminator accuracy 0.9824', 'Total loss: 3.4747', 'for batch', 11)
('GAN loss 3.3073 ', 'GAN acc 0.0000', 'Discriminator loss 0.0682', 'Discriminator accuracy 0.9785', 'Total loss: 3.3755', 'for batch', 12)
('GAN loss 3.1809 ', 'GAN acc 0.0000', 'Discriminator loss 0.0897', 'Discriminator accuracy 0.9824', 'Total loss: 3.2707', 'for batch', 13)
('GAN loss 3.4184 ', 'GAN acc 0.0039', 'Discriminator loss 0.0683', 'Discriminator accuracy 0.9863', 'Total loss: 3.4867', 'for batch', 14)
('GAN loss 3.4887 ', 'GAN acc 0.0000', 'Discriminator loss 0.0683', 'Discriminator accuracy 0.9883', 'Total loss: 3.5570', 'for batch', 15)
('GAN loss 3.6068 ', 'GAN acc 0.0000', 'Discriminator loss 0.0761', 'Discriminator accuracy 0.9824', 'Total loss: 3.6829', 'for batch', 16)
('GAN loss 3.4805 ', 'GAN acc 0.0000', 'Discriminator loss 0.0971', 'Discriminator accuracy 0.9785', 'Total loss: 3.5775', 'for batch', 17)
('GAN loss 3.5139 ', 'GAN acc 0.0000', 'Discriminator loss 0.0772', 'Discriminator accuracy 0.9824', 'Total loss: 3.5911', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96603245)
('DISCRIMINATOR_Imagem FAKE=', 0.084024042)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.209315')
----------------------------------
('Epoch', 9, 'of', 50)
('Number of batches', 19)
('GAN loss 3.5510 ', 'GAN acc 0.0000', 'Discriminator loss 0.0833', 'Discriminator accuracy 0.9844', 'Total loss: 3.6343', 'for batch', 0)
('GAN loss 3.4394 ', 'GAN acc 0.0000', 'Discriminator loss 0.1109', 'Discriminator accuracy 0.9727', 'Total loss: 3.5504', 'for batch', 1)
('GAN loss 3.6434 ', 'GAN acc 0.0000', 'Discriminator loss 0.0935', 'Discriminator accuracy 0.9746', 'Total loss: 3.7369', 'for batch', 2)
('GAN loss 4.2457 ', 'GAN acc 0.0000', 'Discriminator loss 0.0741', 'Discriminator accuracy 0.9785', 'Total loss: 4.3198', 'for batch', 3)
('GAN loss 3.3637 ', 'GAN acc 0.0000', 'Discriminator loss 0.0728', 'Discriminator accuracy 0.9824', 'Total loss: 3.4365', 'for batch', 4)
('GAN loss 3.3575 ', 'GAN acc 0.0000', 'Discriminator loss 0.0728', 'Discriminator accuracy 0.9824', 'Total loss: 3.4303', 'for batch', 5)
('GAN loss 3.6007 ', 'GAN acc 0.0000', 'Discriminator loss 0.1198', 'Discriminator accuracy 0.9668', 'Total loss: 3.7205', 'for batch', 6)
('GAN loss 3.1175 ', 'GAN acc 0.0000', 'Discriminator loss 0.0862', 'Discriminator accuracy 0.9805', 'Total loss: 3.2036', 'for batch', 7)
('GAN loss 3.2905 ', 'GAN acc 0.0000', 'Discriminator loss 0.0646', 'Discriminator accuracy 0.9902', 'Total loss: 3.3550', 'for batch', 8)
('GAN loss 3.4894 ', 'GAN acc 0.0000', 'Discriminator loss 0.0612', 'Discriminator accuracy 0.9883', 'Total loss: 3.5507', 'for batch', 9)
('GAN loss 3.5786 ', 'GAN acc 0.0000', 'Discriminator loss 0.0858', 'Discriminator accuracy 0.9688', 'Total loss: 3.6643', 'for batch', 10)
('GAN loss 3.3828 ', 'GAN acc 0.0000', 'Discriminator loss 0.0757', 'Discriminator accuracy 0.9766', 'Total loss: 3.4584', 'for batch', 11)
('GAN loss 3.9590 ', 'GAN acc 0.0039', 'Discriminator loss 0.0728', 'Discriminator accuracy 0.9766', 'Total loss: 4.0318', 'for batch', 12)
('GAN loss 3.5850 ', 'GAN acc 0.0000', 'Discriminator loss 0.1196', 'Discriminator accuracy 0.9824', 'Total loss: 3.7046', 'for batch', 13)
('GAN loss 3.8844 ', 'GAN acc 0.0000', 'Discriminator loss 0.0583', 'Discriminator accuracy 0.9883', 'Total loss: 3.9427', 'for batch', 14)
('GAN loss 3.6068 ', 'GAN acc 0.0000', 'Discriminator loss 0.0605', 'Discriminator accuracy 0.9824', 'Total loss: 3.6673', 'for batch', 15)
('GAN loss 3.4752 ', 'GAN acc 0.0000', 'Discriminator loss 0.1114', 'Discriminator accuracy 0.9824', 'Total loss: 3.5866', 'for batch', 16)
('GAN loss 3.0789 ', 'GAN acc 0.0000', 'Discriminator loss 0.1047', 'Discriminator accuracy 0.9785', 'Total loss: 3.1836', 'for batch', 17)
('GAN loss 3.1303 ', 'GAN acc 0.0000', 'Discriminator loss 0.0806', 'Discriminator accuracy 0.9805', 'Total loss: 3.2109', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96895123)
('DISCRIMINATOR_Imagem FAKE=', 0.11258162)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.713529')
----------------------------------
('Epoch', 10, 'of', 50)
('Number of batches', 19)
('GAN loss 3.6908 ', 'GAN acc 0.0000', 'Discriminator loss 0.0691', 'Discriminator accuracy 0.9883', 'Total loss: 3.7599', 'for batch', 0)
('GAN loss 3.0853 ', 'GAN acc 0.0000', 'Discriminator loss 0.1106', 'Discriminator accuracy 0.9746', 'Total loss: 3.1959', 'for batch', 1)
('GAN loss 3.1521 ', 'GAN acc 0.0000', 'Discriminator loss 0.0926', 'Discriminator accuracy 0.9766', 'Total loss: 3.2447', 'for batch', 2)
('GAN loss 3.6356 ', 'GAN acc 0.0000', 'Discriminator loss 0.0659', 'Discriminator accuracy 0.9844', 'Total loss: 3.7015', 'for batch', 3)
('GAN loss 3.3380 ', 'GAN acc 0.0000', 'Discriminator loss 0.0744', 'Discriminator accuracy 0.9883', 'Total loss: 3.4125', 'for batch', 4)
('GAN loss 3.7753 ', 'GAN acc 0.0000', 'Discriminator loss 0.0787', 'Discriminator accuracy 0.9805', 'Total loss: 3.8539', 'for batch', 5)
('GAN loss 2.9691 ', 'GAN acc 0.0000', 'Discriminator loss 0.1142', 'Discriminator accuracy 0.9766', 'Total loss: 3.0833', 'for batch', 6)
('GAN loss 3.4116 ', 'GAN acc 0.0000', 'Discriminator loss 0.0759', 'Discriminator accuracy 0.9863', 'Total loss: 3.4875', 'for batch', 7)
('GAN loss 3.4324 ', 'GAN acc 0.0000', 'Discriminator loss 0.0558', 'Discriminator accuracy 0.9883', 'Total loss: 3.4882', 'for batch', 8)
('GAN loss 3.4920 ', 'GAN acc 0.0000', 'Discriminator loss 0.0675', 'Discriminator accuracy 0.9883', 'Total loss: 3.5595', 'for batch', 9)
('GAN loss 3.3658 ', 'GAN acc 0.0000', 'Discriminator loss 0.0756', 'Discriminator accuracy 0.9805', 'Total loss: 3.4414', 'for batch', 10)
('GAN loss 3.1904 ', 'GAN acc 0.0000', 'Discriminator loss 0.0824', 'Discriminator accuracy 0.9824', 'Total loss: 3.2728', 'for batch', 11)
('GAN loss 3.5840 ', 'GAN acc 0.0000', 'Discriminator loss 0.0827', 'Discriminator accuracy 0.9785', 'Total loss: 3.6667', 'for batch', 12)
('GAN loss 3.5464 ', 'GAN acc 0.0000', 'Discriminator loss 0.1084', 'Discriminator accuracy 0.9844', 'Total loss: 3.6549', 'for batch', 13)
('GAN loss 3.5075 ', 'GAN acc 0.0000', 'Discriminator loss 0.0741', 'Discriminator accuracy 0.9844', 'Total loss: 3.5816', 'for batch', 14)
('GAN loss 3.5280 ', 'GAN acc 0.0000', 'Discriminator loss 0.0688', 'Discriminator accuracy 0.9844', 'Total loss: 3.5968', 'for batch', 15)
('GAN loss 3.5431 ', 'GAN acc 0.0000', 'Discriminator loss 0.1023', 'Discriminator accuracy 0.9805', 'Total loss: 3.6454', 'for batch', 16)
('GAN loss 3.3724 ', 'GAN acc 0.0000', 'Discriminator loss 0.0954', 'Discriminator accuracy 0.9805', 'Total loss: 3.4678', 'for batch', 17)
('GAN loss 3.4103 ', 'GAN acc 0.0000', 'Discriminator loss 0.0604', 'Discriminator accuracy 0.9844', 'Total loss: 3.4707', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97200686)
('DISCRIMINATOR_Imagem FAKE=', 0.060635705)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.190171')
----------------------------------
('Epoch', 11, 'of', 50)
('Number of batches', 19)
('GAN loss 3.2152 ', 'GAN acc 0.0000', 'Discriminator loss 0.0788', 'Discriminator accuracy 0.9883', 'Total loss: 3.2940', 'for batch', 0)
('GAN loss 3.2378 ', 'GAN acc 0.0000', 'Discriminator loss 0.1008', 'Discriminator accuracy 0.9746', 'Total loss: 3.3386', 'for batch', 1)
('GAN loss 3.1907 ', 'GAN acc 0.0000', 'Discriminator loss 0.0790', 'Discriminator accuracy 0.9805', 'Total loss: 3.2697', 'for batch', 2)
('GAN loss 3.4599 ', 'GAN acc 0.0000', 'Discriminator loss 0.0639', 'Discriminator accuracy 0.9863', 'Total loss: 3.5238', 'for batch', 3)
('GAN loss 3.4637 ', 'GAN acc 0.0000', 'Discriminator loss 0.0639', 'Discriminator accuracy 0.9863', 'Total loss: 3.5276', 'for batch', 4)
('GAN loss 3.4520 ', 'GAN acc 0.0000', 'Discriminator loss 0.0691', 'Discriminator accuracy 0.9844', 'Total loss: 3.5211', 'for batch', 5)
('GAN loss 3.1918 ', 'GAN acc 0.0000', 'Discriminator loss 0.1120', 'Discriminator accuracy 0.9688', 'Total loss: 3.3038', 'for batch', 6)
('GAN loss 3.2156 ', 'GAN acc 0.0000', 'Discriminator loss 0.0712', 'Discriminator accuracy 0.9883', 'Total loss: 3.2868', 'for batch', 7)
('GAN loss 3.6465 ', 'GAN acc 0.0000', 'Discriminator loss 0.0488', 'Discriminator accuracy 0.9922', 'Total loss: 3.6953', 'for batch', 8)
('GAN loss 4.0492 ', 'GAN acc 0.0000', 'Discriminator loss 0.0485', 'Discriminator accuracy 0.9922', 'Total loss: 4.0977', 'for batch', 9)
('GAN loss 3.9272 ', 'GAN acc 0.0000', 'Discriminator loss 0.0596', 'Discriminator accuracy 0.9844', 'Total loss: 3.9868', 'for batch', 10)
('GAN loss 3.6887 ', 'GAN acc 0.0039', 'Discriminator loss 0.0819', 'Discriminator accuracy 0.9746', 'Total loss: 3.7707', 'for batch', 11)
('GAN loss 3.7428 ', 'GAN acc 0.0039', 'Discriminator loss 0.0981', 'Discriminator accuracy 0.9668', 'Total loss: 3.8409', 'for batch', 12)
('GAN loss 3.9171 ', 'GAN acc 0.0039', 'Discriminator loss 0.1198', 'Discriminator accuracy 0.9785', 'Total loss: 4.0370', 'for batch', 13)
('GAN loss 4.9292 ', 'GAN acc 0.0000', 'Discriminator loss 0.0916', 'Discriminator accuracy 0.9805', 'Total loss: 5.0209', 'for batch', 14)
('GAN loss 4.5107 ', 'GAN acc 0.0000', 'Discriminator loss 0.0767', 'Discriminator accuracy 0.9766', 'Total loss: 4.5875', 'for batch', 15)
('GAN loss 3.9836 ', 'GAN acc 0.0000', 'Discriminator loss 0.1330', 'Discriminator accuracy 0.9746', 'Total loss: 4.1166', 'for batch', 16)
('GAN loss 3.3958 ', 'GAN acc 0.0000', 'Discriminator loss 0.1050', 'Discriminator accuracy 0.9805', 'Total loss: 3.5008', 'for batch', 17)
('GAN loss 3.2242 ', 'GAN acc 0.0039', 'Discriminator loss 0.0694', 'Discriminator accuracy 0.9863', 'Total loss: 3.2936', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97046572)
('DISCRIMINATOR_Imagem FAKE=', 0.10865791)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.716432')
----------------------------------
('Epoch', 12, 'of', 50)
('Number of batches', 19)
('GAN loss 3.6103 ', 'GAN acc 0.0039', 'Discriminator loss 0.0834', 'Discriminator accuracy 0.9824', 'Total loss: 3.6936', 'for batch', 0)
('GAN loss 3.9823 ', 'GAN acc 0.0000', 'Discriminator loss 0.1178', 'Discriminator accuracy 0.9727', 'Total loss: 4.1001', 'for batch', 1)
('GAN loss 3.8089 ', 'GAN acc 0.0078', 'Discriminator loss 0.0867', 'Discriminator accuracy 0.9805', 'Total loss: 3.8956', 'for batch', 2)
('GAN loss 3.9145 ', 'GAN acc 0.0000', 'Discriminator loss 0.0660', 'Discriminator accuracy 0.9824', 'Total loss: 3.9805', 'for batch', 3)
('GAN loss 3.7563 ', 'GAN acc 0.0000', 'Discriminator loss 0.0755', 'Discriminator accuracy 0.9805', 'Total loss: 3.8318', 'for batch', 4)
('GAN loss 3.6913 ', 'GAN acc 0.0000', 'Discriminator loss 0.0832', 'Discriminator accuracy 0.9746', 'Total loss: 3.7745', 'for batch', 5)
('GAN loss 3.1687 ', 'GAN acc 0.0000', 'Discriminator loss 0.1280', 'Discriminator accuracy 0.9668', 'Total loss: 3.2967', 'for batch', 6)
('GAN loss 3.2810 ', 'GAN acc 0.0039', 'Discriminator loss 0.0834', 'Discriminator accuracy 0.9824', 'Total loss: 3.3644', 'for batch', 7)
('GAN loss 3.5601 ', 'GAN acc 0.0039', 'Discriminator loss 0.0547', 'Discriminator accuracy 0.9902', 'Total loss: 3.6148', 'for batch', 8)
('GAN loss 3.9331 ', 'GAN acc 0.0000', 'Discriminator loss 0.0678', 'Discriminator accuracy 0.9883', 'Total loss: 4.0009', 'for batch', 9)
('GAN loss 3.7689 ', 'GAN acc 0.0000', 'Discriminator loss 0.0719', 'Discriminator accuracy 0.9746', 'Total loss: 3.8408', 'for batch', 10)
('GAN loss 3.4313 ', 'GAN acc 0.0000', 'Discriminator loss 0.0811', 'Discriminator accuracy 0.9766', 'Total loss: 3.5123', 'for batch', 11)
('GAN loss 3.2714 ', 'GAN acc 0.0000', 'Discriminator loss 0.0850', 'Discriminator accuracy 0.9785', 'Total loss: 3.3564', 'for batch', 12)
('GAN loss 4.1437 ', 'GAN acc 0.0000', 'Discriminator loss 0.1516', 'Discriminator accuracy 0.9688', 'Total loss: 4.2953', 'for batch', 13)
('GAN loss 4.1920 ', 'GAN acc 0.0000', 'Discriminator loss 0.0649', 'Discriminator accuracy 0.9844', 'Total loss: 4.2569', 'for batch', 14)
('GAN loss 3.9817 ', 'GAN acc 0.0000', 'Discriminator loss 0.0747', 'Discriminator accuracy 0.9785', 'Total loss: 4.0564', 'for batch', 15)
('GAN loss 3.5398 ', 'GAN acc 0.0000', 'Discriminator loss 0.0995', 'Discriminator accuracy 0.9805', 'Total loss: 3.6393', 'for batch', 16)
('GAN loss 3.2879 ', 'GAN acc 0.0000', 'Discriminator loss 0.1081', 'Discriminator accuracy 0.9805', 'Total loss: 3.3959', 'for batch', 17)
('GAN loss 3.6786 ', 'GAN acc 0.0000', 'Discriminator loss 0.0783', 'Discriminator accuracy 0.9824', 'Total loss: 3.7570', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96592987)
('DISCRIMINATOR_Imagem FAKE=', 0.081023991)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.206161')
----------------------------------
('Epoch', 13, 'of', 50)
('Number of batches', 19)
('GAN loss 3.8072 ', 'GAN acc 0.0000', 'Discriminator loss 0.0728', 'Discriminator accuracy 0.9844', 'Total loss: 3.8800', 'for batch', 0)
('GAN loss 3.5396 ', 'GAN acc 0.0000', 'Discriminator loss 0.1058', 'Discriminator accuracy 0.9746', 'Total loss: 3.6454', 'for batch', 1)
('GAN loss 3.1635 ', 'GAN acc 0.0000', 'Discriminator loss 0.0886', 'Discriminator accuracy 0.9785', 'Total loss: 3.2521', 'for batch', 2)
('GAN loss 3.1798 ', 'GAN acc 0.0000', 'Discriminator loss 0.0639', 'Discriminator accuracy 0.9844', 'Total loss: 3.2437', 'for batch', 3)
('GAN loss 3.2328 ', 'GAN acc 0.0000', 'Discriminator loss 0.0741', 'Discriminator accuracy 0.9824', 'Total loss: 3.3069', 'for batch', 4)
('GAN loss 3.3341 ', 'GAN acc 0.0000', 'Discriminator loss 0.0655', 'Discriminator accuracy 0.9863', 'Total loss: 3.3996', 'for batch', 5)
('GAN loss 3.1266 ', 'GAN acc 0.0000', 'Discriminator loss 0.1235', 'Discriminator accuracy 0.9727', 'Total loss: 3.2501', 'for batch', 6)
('GAN loss 3.2588 ', 'GAN acc 0.0000', 'Discriminator loss 0.0712', 'Discriminator accuracy 0.9824', 'Total loss: 3.3301', 'for batch', 7)
('GAN loss 3.4889 ', 'GAN acc 0.0000', 'Discriminator loss 0.0468', 'Discriminator accuracy 0.9902', 'Total loss: 3.5358', 'for batch', 8)
('GAN loss 3.6344 ', 'GAN acc 0.0000', 'Discriminator loss 0.0563', 'Discriminator accuracy 0.9883', 'Total loss: 3.6907', 'for batch', 9)
('GAN loss 3.5010 ', 'GAN acc 0.0000', 'Discriminator loss 0.0533', 'Discriminator accuracy 0.9863', 'Total loss: 3.5543', 'for batch', 10)
('GAN loss 3.3439 ', 'GAN acc 0.0000', 'Discriminator loss 0.0698', 'Discriminator accuracy 0.9785', 'Total loss: 3.4137', 'for batch', 11)
('GAN loss 3.3844 ', 'GAN acc 0.0000', 'Discriminator loss 0.0678', 'Discriminator accuracy 0.9824', 'Total loss: 3.4522', 'for batch', 12)
('GAN loss 3.3754 ', 'GAN acc 0.0000', 'Discriminator loss 0.1167', 'Discriminator accuracy 0.9844', 'Total loss: 3.4921', 'for batch', 13)
('GAN loss 3.7643 ', 'GAN acc 0.0000', 'Discriminator loss 0.0696', 'Discriminator accuracy 0.9863', 'Total loss: 3.8339', 'for batch', 14)
('GAN loss 3.8423 ', 'GAN acc 0.0000', 'Discriminator loss 0.0591', 'Discriminator accuracy 0.9863', 'Total loss: 3.9013', 'for batch', 15)
('GAN loss 3.5863 ', 'GAN acc 0.0000', 'Discriminator loss 0.0854', 'Discriminator accuracy 0.9824', 'Total loss: 3.6718', 'for batch', 16)
('GAN loss 3.6462 ', 'GAN acc 0.0000', 'Discriminator loss 0.0945', 'Discriminator accuracy 0.9805', 'Total loss: 3.7406', 'for batch', 17)
('GAN loss 3.9216 ', 'GAN acc 0.0000', 'Discriminator loss 0.0719', 'Discriminator accuracy 0.9824', 'Total loss: 3.9935', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96756035)
('DISCRIMINATOR_Imagem FAKE=', 0.048071954)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.753991')
----------------------------------
('Epoch', 14, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0991 ', 'GAN acc 0.0000', 'Discriminator loss 0.0666', 'Discriminator accuracy 0.9844', 'Total loss: 4.1657', 'for batch', 0)
('GAN loss 3.8887 ', 'GAN acc 0.0000', 'Discriminator loss 0.1130', 'Discriminator accuracy 0.9727', 'Total loss: 4.0017', 'for batch', 1)
('GAN loss 3.6856 ', 'GAN acc 0.0039', 'Discriminator loss 0.0897', 'Discriminator accuracy 0.9805', 'Total loss: 3.7753', 'for batch', 2)
('GAN loss 3.6415 ', 'GAN acc 0.0000', 'Discriminator loss 0.0772', 'Discriminator accuracy 0.9863', 'Total loss: 3.7187', 'for batch', 3)
('GAN loss 3.5183 ', 'GAN acc 0.0000', 'Discriminator loss 0.0666', 'Discriminator accuracy 0.9844', 'Total loss: 3.5850', 'for batch', 4)
('GAN loss 4.0262 ', 'GAN acc 0.0000', 'Discriminator loss 0.0787', 'Discriminator accuracy 0.9844', 'Total loss: 4.1050', 'for batch', 5)
('GAN loss 3.7654 ', 'GAN acc 0.0000', 'Discriminator loss 0.1373', 'Discriminator accuracy 0.9707', 'Total loss: 3.9027', 'for batch', 6)
('GAN loss 3.4598 ', 'GAN acc 0.0000', 'Discriminator loss 0.0841', 'Discriminator accuracy 0.9785', 'Total loss: 3.5440', 'for batch', 7)
('GAN loss 3.3966 ', 'GAN acc 0.0000', 'Discriminator loss 0.0406', 'Discriminator accuracy 0.9922', 'Total loss: 3.4372', 'for batch', 8)
('GAN loss 3.5518 ', 'GAN acc 0.0000', 'Discriminator loss 0.0492', 'Discriminator accuracy 0.9902', 'Total loss: 3.6010', 'for batch', 9)
('GAN loss 3.6145 ', 'GAN acc 0.0039', 'Discriminator loss 0.0461', 'Discriminator accuracy 0.9863', 'Total loss: 3.6607', 'for batch', 10)
('GAN loss 3.7773 ', 'GAN acc 0.0000', 'Discriminator loss 0.0672', 'Discriminator accuracy 0.9824', 'Total loss: 3.8445', 'for batch', 11)
('GAN loss 4.7162 ', 'GAN acc 0.0000', 'Discriminator loss 0.1042', 'Discriminator accuracy 0.9668', 'Total loss: 4.8205', 'for batch', 12)
('GAN loss 4.6640 ', 'GAN acc 0.0000', 'Discriminator loss 0.1058', 'Discriminator accuracy 0.9785', 'Total loss: 4.7699', 'for batch', 13)
('GAN loss 4.1297 ', 'GAN acc 0.0000', 'Discriminator loss 0.0658', 'Discriminator accuracy 0.9844', 'Total loss: 4.1955', 'for batch', 14)
('GAN loss 3.8217 ', 'GAN acc 0.0000', 'Discriminator loss 0.0613', 'Discriminator accuracy 0.9805', 'Total loss: 3.8830', 'for batch', 15)
('GAN loss 3.5079 ', 'GAN acc 0.0000', 'Discriminator loss 0.0718', 'Discriminator accuracy 0.9844', 'Total loss: 3.5797', 'for batch', 16)
('GAN loss 3.2300 ', 'GAN acc 0.0000', 'Discriminator loss 0.0848', 'Discriminator accuracy 0.9805', 'Total loss: 3.3148', 'for batch', 17)
('GAN loss 3.3401 ', 'GAN acc 0.0000', 'Discriminator loss 0.0559', 'Discriminator accuracy 0.9902', 'Total loss: 3.3961', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97461659)
('DISCRIMINATOR_Imagem FAKE=', 0.048438568)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.197677')
----------------------------------
('Epoch', 15, 'of', 50)
('Number of batches', 19)
('GAN loss 3.4760 ', 'GAN acc 0.0000', 'Discriminator loss 0.0694', 'Discriminator accuracy 0.9863', 'Total loss: 3.5454', 'for batch', 0)
('GAN loss 3.7949 ', 'GAN acc 0.0000', 'Discriminator loss 0.0956', 'Discriminator accuracy 0.9766', 'Total loss: 3.8906', 'for batch', 1)
('GAN loss 4.1409 ', 'GAN acc 0.0000', 'Discriminator loss 0.0610', 'Discriminator accuracy 0.9863', 'Total loss: 4.2019', 'for batch', 2)
('GAN loss 4.0821 ', 'GAN acc 0.0000', 'Discriminator loss 0.0519', 'Discriminator accuracy 0.9902', 'Total loss: 4.1340', 'for batch', 3)
('GAN loss 4.0702 ', 'GAN acc 0.0000', 'Discriminator loss 0.0435', 'Discriminator accuracy 0.9863', 'Total loss: 4.1136', 'for batch', 4)
('GAN loss 3.9056 ', 'GAN acc 0.0000', 'Discriminator loss 0.0574', 'Discriminator accuracy 0.9883', 'Total loss: 3.9630', 'for batch', 5)
('GAN loss 3.6816 ', 'GAN acc 0.0000', 'Discriminator loss 0.1025', 'Discriminator accuracy 0.9785', 'Total loss: 3.7840', 'for batch', 6)
('GAN loss 7.2988 ', 'GAN acc 0.0000', 'Discriminator loss 0.1158', 'Discriminator accuracy 0.9746', 'Total loss: 7.4147', 'for batch', 7)
('GAN loss 4.8810 ', 'GAN acc 0.0000', 'Discriminator loss 0.0439', 'Discriminator accuracy 0.9883', 'Total loss: 4.9249', 'for batch', 8)
('GAN loss 4.7971 ', 'GAN acc 0.0000', 'Discriminator loss 0.0618', 'Discriminator accuracy 0.9844', 'Total loss: 4.8589', 'for batch', 9)
('GAN loss 4.2692 ', 'GAN acc 0.0000', 'Discriminator loss 0.0826', 'Discriminator accuracy 0.9766', 'Total loss: 4.3519', 'for batch', 10)
('GAN loss 3.8162 ', 'GAN acc 0.0000', 'Discriminator loss 0.0590', 'Discriminator accuracy 0.9785', 'Total loss: 3.8752', 'for batch', 11)
('GAN loss 3.4267 ', 'GAN acc 0.0000', 'Discriminator loss 0.0642', 'Discriminator accuracy 0.9805', 'Total loss: 3.4908', 'for batch', 12)
('GAN loss 3.2325 ', 'GAN acc 0.0000', 'Discriminator loss 0.0892', 'Discriminator accuracy 0.9824', 'Total loss: 3.3217', 'for batch', 13)
('GAN loss 3.6245 ', 'GAN acc 0.0039', 'Discriminator loss 0.1143', 'Discriminator accuracy 0.9648', 'Total loss: 3.7387', 'for batch', 14)
('GAN loss 9.2610 ', 'GAN acc 0.0000', 'Discriminator loss 0.3452', 'Discriminator accuracy 0.8691', 'Total loss: 9.6061', 'for batch', 15)
('GAN loss 6.6549 ', 'GAN acc 0.0000', 'Discriminator loss 0.2447', 'Discriminator accuracy 0.9492', 'Total loss: 6.8995', 'for batch', 16)
('GAN loss 4.9625 ', 'GAN acc 0.0000', 'Discriminator loss 0.4591', 'Discriminator accuracy 0.9238', 'Total loss: 5.4217', 'for batch', 17)
('GAN loss 3.7987 ', 'GAN acc 0.0000', 'Discriminator loss 0.3015', 'Discriminator accuracy 0.9434', 'Total loss: 4.1002', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.95032483)
('DISCRIMINATOR_Imagem FAKE=', 0.0230531)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.697877')
----------------------------------
('Epoch', 16, 'of', 50)
('Number of batches', 19)
('GAN loss 3.0931 ', 'GAN acc 0.0000', 'Discriminator loss 0.1192', 'Discriminator accuracy 0.9688', 'Total loss: 3.2123', 'for batch', 0)
('GAN loss 2.7349 ', 'GAN acc 0.0000', 'Discriminator loss 0.1025', 'Discriminator accuracy 0.9727', 'Total loss: 2.8373', 'for batch', 1)
('GAN loss 2.6770 ', 'GAN acc 0.0000', 'Discriminator loss 0.0912', 'Discriminator accuracy 0.9785', 'Total loss: 2.7682', 'for batch', 2)
('GAN loss 2.8475 ', 'GAN acc 0.0000', 'Discriminator loss 0.0694', 'Discriminator accuracy 0.9863', 'Total loss: 2.9169', 'for batch', 3)
('GAN loss 3.0403 ', 'GAN acc 0.0000', 'Discriminator loss 0.0607', 'Discriminator accuracy 0.9863', 'Total loss: 3.1010', 'for batch', 4)
('GAN loss 3.2761 ', 'GAN acc 0.0000', 'Discriminator loss 0.0591', 'Discriminator accuracy 0.9863', 'Total loss: 3.3352', 'for batch', 5)
('GAN loss 3.3664 ', 'GAN acc 0.0000', 'Discriminator loss 0.0895', 'Discriminator accuracy 0.9785', 'Total loss: 3.4559', 'for batch', 6)
('GAN loss 3.4577 ', 'GAN acc 0.0000', 'Discriminator loss 0.0599', 'Discriminator accuracy 0.9824', 'Total loss: 3.5176', 'for batch', 7)
('GAN loss 3.5450 ', 'GAN acc 0.0000', 'Discriminator loss 0.0335', 'Discriminator accuracy 0.9922', 'Total loss: 3.5785', 'for batch', 8)
('GAN loss 3.6418 ', 'GAN acc 0.0000', 'Discriminator loss 0.0470', 'Discriminator accuracy 0.9883', 'Total loss: 3.6888', 'for batch', 9)
('GAN loss 3.7384 ', 'GAN acc 0.0000', 'Discriminator loss 0.0411', 'Discriminator accuracy 0.9902', 'Total loss: 3.7795', 'for batch', 10)
('GAN loss 3.7333 ', 'GAN acc 0.0000', 'Discriminator loss 0.0466', 'Discriminator accuracy 0.9863', 'Total loss: 3.7799', 'for batch', 11)
('GAN loss 3.7212 ', 'GAN acc 0.0000', 'Discriminator loss 0.0544', 'Discriminator accuracy 0.9824', 'Total loss: 3.7755', 'for batch', 12)
('GAN loss 3.7127 ', 'GAN acc 0.0000', 'Discriminator loss 0.0693', 'Discriminator accuracy 0.9844', 'Total loss: 3.7821', 'for batch', 13)
('GAN loss 3.7028 ', 'GAN acc 0.0000', 'Discriminator loss 0.0486', 'Discriminator accuracy 0.9883', 'Total loss: 3.7514', 'for batch', 14)
('GAN loss 3.7030 ', 'GAN acc 0.0000', 'Discriminator loss 0.0417', 'Discriminator accuracy 0.9922', 'Total loss: 3.7447', 'for batch', 15)
('GAN loss 4.2447 ', 'GAN acc 0.0000', 'Discriminator loss 0.0585', 'Discriminator accuracy 0.9883', 'Total loss: 4.3033', 'for batch', 16)
('GAN loss 3.9646 ', 'GAN acc 0.0000', 'Discriminator loss 0.0652', 'Discriminator accuracy 0.9844', 'Total loss: 4.0298', 'for batch', 17)
('GAN loss 3.8864 ', 'GAN acc 0.0000', 'Discriminator loss 0.0417', 'Discriminator accuracy 0.9922', 'Total loss: 3.9281', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97513282)
('DISCRIMINATOR_Imagem FAKE=', 0.01998714)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.190362')
----------------------------------
('Epoch', 17, 'of', 50)
('Number of batches', 19)
('GAN loss 3.8960 ', 'GAN acc 0.0000', 'Discriminator loss 0.0508', 'Discriminator accuracy 0.9902', 'Total loss: 3.9468', 'for batch', 0)
('GAN loss 3.7886 ', 'GAN acc 0.0000', 'Discriminator loss 0.0709', 'Discriminator accuracy 0.9805', 'Total loss: 3.8595', 'for batch', 1)
('GAN loss 3.7129 ', 'GAN acc 0.0000', 'Discriminator loss 0.0500', 'Discriminator accuracy 0.9883', 'Total loss: 3.7629', 'for batch', 2)
('GAN loss 3.7294 ', 'GAN acc 0.0000', 'Discriminator loss 0.0398', 'Discriminator accuracy 0.9902', 'Total loss: 3.7692', 'for batch', 3)
('GAN loss 3.7604 ', 'GAN acc 0.0000', 'Discriminator loss 0.0323', 'Discriminator accuracy 0.9941', 'Total loss: 3.7927', 'for batch', 4)
('GAN loss 3.7730 ', 'GAN acc 0.0000', 'Discriminator loss 0.0452', 'Discriminator accuracy 0.9902', 'Total loss: 3.8182', 'for batch', 5)
('GAN loss 3.7592 ', 'GAN acc 0.0000', 'Discriminator loss 0.0712', 'Discriminator accuracy 0.9824', 'Total loss: 3.8304', 'for batch', 6)
('GAN loss 3.7340 ', 'GAN acc 0.0000', 'Discriminator loss 0.0521', 'Discriminator accuracy 0.9883', 'Total loss: 3.7861', 'for batch', 7)
('GAN loss 3.7974 ', 'GAN acc 0.0000', 'Discriminator loss 0.0263', 'Discriminator accuracy 0.9961', 'Total loss: 3.8237', 'for batch', 8)
('GAN loss 3.9990 ', 'GAN acc 0.0000', 'Discriminator loss 0.0399', 'Discriminator accuracy 0.9922', 'Total loss: 4.0389', 'for batch', 9)
('GAN loss 4.0790 ', 'GAN acc 0.0000', 'Discriminator loss 0.0337', 'Discriminator accuracy 0.9922', 'Total loss: 4.1126', 'for batch', 10)
('GAN loss 4.1009 ', 'GAN acc 0.0000', 'Discriminator loss 0.0375', 'Discriminator accuracy 0.9922', 'Total loss: 4.1384', 'for batch', 11)
('GAN loss 4.0397 ', 'GAN acc 0.0000', 'Discriminator loss 0.0483', 'Discriminator accuracy 0.9863', 'Total loss: 4.0879', 'for batch', 12)
('GAN loss 4.1594 ', 'GAN acc 0.0000', 'Discriminator loss 0.0637', 'Discriminator accuracy 0.9844', 'Total loss: 4.2231', 'for batch', 13)
('GAN loss 3.9529 ', 'GAN acc 0.0000', 'Discriminator loss 0.0473', 'Discriminator accuracy 0.9883', 'Total loss: 4.0003', 'for batch', 14)
('GAN loss 4.0557 ', 'GAN acc 0.0000', 'Discriminator loss 0.0394', 'Discriminator accuracy 0.9941', 'Total loss: 4.0951', 'for batch', 15)
('GAN loss 4.0546 ', 'GAN acc 0.0000', 'Discriminator loss 0.0628', 'Discriminator accuracy 0.9883', 'Total loss: 4.1174', 'for batch', 16)
('GAN loss 4.1624 ', 'GAN acc 0.0000', 'Discriminator loss 0.0629', 'Discriminator accuracy 0.9863', 'Total loss: 4.2253', 'for batch', 17)
('GAN loss 4.1288 ', 'GAN acc 0.0000', 'Discriminator loss 0.0391', 'Discriminator accuracy 0.9941', 'Total loss: 4.1679', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97630197)
('DISCRIMINATOR_Imagem FAKE=', 0.020681078)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.700080')
----------------------------------
('Epoch', 18, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0888 ', 'GAN acc 0.0000', 'Discriminator loss 0.0555', 'Discriminator accuracy 0.9902', 'Total loss: 4.1444', 'for batch', 0)
('GAN loss 3.9398 ', 'GAN acc 0.0000', 'Discriminator loss 0.0732', 'Discriminator accuracy 0.9805', 'Total loss: 4.0130', 'for batch', 1)
('GAN loss 3.7875 ', 'GAN acc 0.0000', 'Discriminator loss 0.0535', 'Discriminator accuracy 0.9883', 'Total loss: 3.8410', 'for batch', 2)
('GAN loss 3.8600 ', 'GAN acc 0.0000', 'Discriminator loss 0.0489', 'Discriminator accuracy 0.9902', 'Total loss: 3.9089', 'for batch', 3)
('GAN loss 3.8222 ', 'GAN acc 0.0000', 'Discriminator loss 0.0371', 'Discriminator accuracy 0.9922', 'Total loss: 3.8593', 'for batch', 4)
('GAN loss 3.8366 ', 'GAN acc 0.0000', 'Discriminator loss 0.0523', 'Discriminator accuracy 0.9922', 'Total loss: 3.8889', 'for batch', 5)
('GAN loss 3.7773 ', 'GAN acc 0.0000', 'Discriminator loss 0.0853', 'Discriminator accuracy 0.9805', 'Total loss: 3.8626', 'for batch', 6)
('GAN loss 3.7977 ', 'GAN acc 0.0000', 'Discriminator loss 0.0811', 'Discriminator accuracy 0.9824', 'Total loss: 3.8788', 'for batch', 7)
('GAN loss 4.0255 ', 'GAN acc 0.0000', 'Discriminator loss 0.0308', 'Discriminator accuracy 0.9941', 'Total loss: 4.0564', 'for batch', 8)
('GAN loss 4.8556 ', 'GAN acc 0.0000', 'Discriminator loss 0.0435', 'Discriminator accuracy 0.9902', 'Total loss: 4.8991', 'for batch', 9)
('GAN loss 3.7124 ', 'GAN acc 0.0000', 'Discriminator loss 0.0518', 'Discriminator accuracy 0.9902', 'Total loss: 3.7641', 'for batch', 10)
('GAN loss 3.7856 ', 'GAN acc 0.0000', 'Discriminator loss 0.0503', 'Discriminator accuracy 0.9883', 'Total loss: 3.8359', 'for batch', 11)
('GAN loss 4.1080 ', 'GAN acc 0.0000', 'Discriminator loss 0.0637', 'Discriminator accuracy 0.9824', 'Total loss: 4.1716', 'for batch', 12)
('GAN loss 3.4463 ', 'GAN acc 0.0000', 'Discriminator loss 0.0779', 'Discriminator accuracy 0.9805', 'Total loss: 3.5242', 'for batch', 13)
('GAN loss 3.6768 ', 'GAN acc 0.0000', 'Discriminator loss 0.0622', 'Discriminator accuracy 0.9863', 'Total loss: 3.7390', 'for batch', 14)
('GAN loss 4.1832 ', 'GAN acc 0.0000', 'Discriminator loss 0.0413', 'Discriminator accuracy 0.9922', 'Total loss: 4.2245', 'for batch', 15)
('GAN loss 4.1399 ', 'GAN acc 0.0000', 'Discriminator loss 0.0605', 'Discriminator accuracy 0.9883', 'Total loss: 4.2004', 'for batch', 16)
('GAN loss 3.9933 ', 'GAN acc 0.0000', 'Discriminator loss 0.0705', 'Discriminator accuracy 0.9824', 'Total loss: 4.0638', 'for batch', 17)
('GAN loss 4.2157 ', 'GAN acc 0.0039', 'Discriminator loss 0.0599', 'Discriminator accuracy 0.9844', 'Total loss: 4.2756', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97232503)
('DISCRIMINATOR_Imagem FAKE=', 0.038766418)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.174291')
----------------------------------
('Epoch', 19, 'of', 50)
('Number of batches', 19)
('GAN loss 4.4529 ', 'GAN acc 0.0078', 'Discriminator loss 0.0700', 'Discriminator accuracy 0.9824', 'Total loss: 4.5229', 'for batch', 0)
('GAN loss 4.3968 ', 'GAN acc 0.0000', 'Discriminator loss 0.0912', 'Discriminator accuracy 0.9727', 'Total loss: 4.4880', 'for batch', 1)
('GAN loss 4.2945 ', 'GAN acc 0.0000', 'Discriminator loss 0.0628', 'Discriminator accuracy 0.9844', 'Total loss: 4.3572', 'for batch', 2)
('GAN loss 4.2076 ', 'GAN acc 0.0000', 'Discriminator loss 0.0610', 'Discriminator accuracy 0.9883', 'Total loss: 4.2686', 'for batch', 3)
('GAN loss 4.2181 ', 'GAN acc 0.0039', 'Discriminator loss 0.0471', 'Discriminator accuracy 0.9883', 'Total loss: 4.2652', 'for batch', 4)
('GAN loss 4.2214 ', 'GAN acc 0.0039', 'Discriminator loss 0.0535', 'Discriminator accuracy 0.9902', 'Total loss: 4.2749', 'for batch', 5)
('GAN loss 4.0181 ', 'GAN acc 0.0000', 'Discriminator loss 0.0903', 'Discriminator accuracy 0.9785', 'Total loss: 4.1084', 'for batch', 6)
('GAN loss 4.0050 ', 'GAN acc 0.0078', 'Discriminator loss 0.0797', 'Discriminator accuracy 0.9746', 'Total loss: 4.0847', 'for batch', 7)
('GAN loss 4.1137 ', 'GAN acc 0.0039', 'Discriminator loss 0.0299', 'Discriminator accuracy 0.9922', 'Total loss: 4.1437', 'for batch', 8)
('GAN loss 4.2639 ', 'GAN acc 0.0000', 'Discriminator loss 0.0529', 'Discriminator accuracy 0.9883', 'Total loss: 4.3168', 'for batch', 9)
('GAN loss 4.0421 ', 'GAN acc 0.0000', 'Discriminator loss 0.0442', 'Discriminator accuracy 0.9902', 'Total loss: 4.0863', 'for batch', 10)
('GAN loss 3.8167 ', 'GAN acc 0.0000', 'Discriminator loss 0.0483', 'Discriminator accuracy 0.9863', 'Total loss: 3.8650', 'for batch', 11)
('GAN loss 3.5299 ', 'GAN acc 0.0000', 'Discriminator loss 0.0748', 'Discriminator accuracy 0.9824', 'Total loss: 3.6047', 'for batch', 12)
('GAN loss 3.8603 ', 'GAN acc 0.0000', 'Discriminator loss 0.0837', 'Discriminator accuracy 0.9805', 'Total loss: 3.9440', 'for batch', 13)
('GAN loss 4.6677 ', 'GAN acc 0.0000', 'Discriminator loss 0.0552', 'Discriminator accuracy 0.9863', 'Total loss: 4.7229', 'for batch', 14)
('GAN loss 3.4202 ', 'GAN acc 0.0000', 'Discriminator loss 0.0661', 'Discriminator accuracy 0.9902', 'Total loss: 3.4863', 'for batch', 15)
('GAN loss 4.2665 ', 'GAN acc 0.0000', 'Discriminator loss 0.0618', 'Discriminator accuracy 0.9883', 'Total loss: 4.3283', 'for batch', 16)
('GAN loss 3.6339 ', 'GAN acc 0.0000', 'Discriminator loss 0.0807', 'Discriminator accuracy 0.9766', 'Total loss: 3.7147', 'for batch', 17)
('GAN loss 5.4306 ', 'GAN acc 0.0000', 'Discriminator loss 0.0396', 'Discriminator accuracy 0.9902', 'Total loss: 5.4702', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97207975)
('DISCRIMINATOR_Imagem FAKE=', 0.040919121)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.745101')
----------------------------------
('Epoch', 20, 'of', 50)
('Number of batches', 19)
('GAN loss 3.8503 ', 'GAN acc 0.0000', 'Discriminator loss 0.0608', 'Discriminator accuracy 0.9844', 'Total loss: 3.9111', 'for batch', 0)
('GAN loss 3.5138 ', 'GAN acc 0.0039', 'Discriminator loss 0.0846', 'Discriminator accuracy 0.9785', 'Total loss: 3.5985', 'for batch', 1)
('GAN loss 3.6569 ', 'GAN acc 0.0078', 'Discriminator loss 0.0727', 'Discriminator accuracy 0.9844', 'Total loss: 3.7296', 'for batch', 2)
('GAN loss 3.8030 ', 'GAN acc 0.0000', 'Discriminator loss 0.0569', 'Discriminator accuracy 0.9902', 'Total loss: 3.8599', 'for batch', 3)
('GAN loss 3.8155 ', 'GAN acc 0.0000', 'Discriminator loss 0.0538', 'Discriminator accuracy 0.9863', 'Total loss: 3.8693', 'for batch', 4)
('GAN loss 3.8943 ', 'GAN acc 0.0039', 'Discriminator loss 0.0510', 'Discriminator accuracy 0.9922', 'Total loss: 3.9453', 'for batch', 5)
('GAN loss 3.7339 ', 'GAN acc 0.0000', 'Discriminator loss 0.0945', 'Discriminator accuracy 0.9766', 'Total loss: 3.8284', 'for batch', 6)
('GAN loss 3.5744 ', 'GAN acc 0.0000', 'Discriminator loss 0.0705', 'Discriminator accuracy 0.9824', 'Total loss: 3.6449', 'for batch', 7)
('GAN loss 3.5486 ', 'GAN acc 0.0000', 'Discriminator loss 0.0383', 'Discriminator accuracy 0.9941', 'Total loss: 3.5868', 'for batch', 8)
('GAN loss 3.5822 ', 'GAN acc 0.0000', 'Discriminator loss 0.0591', 'Discriminator accuracy 0.9883', 'Total loss: 3.6413', 'for batch', 9)
('GAN loss 3.7144 ', 'GAN acc 0.0000', 'Discriminator loss 0.0604', 'Discriminator accuracy 0.9883', 'Total loss: 3.7747', 'for batch', 10)
('GAN loss 3.8337 ', 'GAN acc 0.0000', 'Discriminator loss 0.0574', 'Discriminator accuracy 0.9844', 'Total loss: 3.8911', 'for batch', 11)
('GAN loss 3.8015 ', 'GAN acc 0.0000', 'Discriminator loss 0.0720', 'Discriminator accuracy 0.9824', 'Total loss: 3.8735', 'for batch', 12)
('GAN loss 4.7024 ', 'GAN acc 0.0000', 'Discriminator loss 0.0926', 'Discriminator accuracy 0.9805', 'Total loss: 4.7950', 'for batch', 13)
('GAN loss 3.5682 ', 'GAN acc 0.0000', 'Discriminator loss 0.0680', 'Discriminator accuracy 0.9863', 'Total loss: 3.6362', 'for batch', 14)
('GAN loss 3.7582 ', 'GAN acc 0.0000', 'Discriminator loss 0.0448', 'Discriminator accuracy 0.9902', 'Total loss: 3.8031', 'for batch', 15)
('GAN loss 3.8600 ', 'GAN acc 0.0000', 'Discriminator loss 0.0629', 'Discriminator accuracy 0.9883', 'Total loss: 3.9230', 'for batch', 16)
('GAN loss 3.5282 ', 'GAN acc 0.0000', 'Discriminator loss 0.0746', 'Discriminator accuracy 0.9824', 'Total loss: 3.6028', 'for batch', 17)
('GAN loss 3.5244 ', 'GAN acc 0.0000', 'Discriminator loss 0.0560', 'Discriminator accuracy 0.9863', 'Total loss: 3.5805', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97266114)
('DISCRIMINATOR_Imagem FAKE=', 0.091940828)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.229364')
----------------------------------
('Epoch', 21, 'of', 50)
('Number of batches', 19)
('GAN loss 3.3859 ', 'GAN acc 0.0000', 'Discriminator loss 0.0840', 'Discriminator accuracy 0.9844', 'Total loss: 3.4699', 'for batch', 0)
('GAN loss 3.4484 ', 'GAN acc 0.0000', 'Discriminator loss 0.0972', 'Discriminator accuracy 0.9766', 'Total loss: 3.5456', 'for batch', 1)
('GAN loss 3.5981 ', 'GAN acc 0.0000', 'Discriminator loss 0.0780', 'Discriminator accuracy 0.9805', 'Total loss: 3.6761', 'for batch', 2)
('GAN loss 3.8297 ', 'GAN acc 0.0000', 'Discriminator loss 0.0664', 'Discriminator accuracy 0.9902', 'Total loss: 3.8961', 'for batch', 3)
('GAN loss 4.1575 ', 'GAN acc 0.0000', 'Discriminator loss 0.0568', 'Discriminator accuracy 0.9863', 'Total loss: 4.2143', 'for batch', 4)
('GAN loss 3.4834 ', 'GAN acc 0.0000', 'Discriminator loss 0.0639', 'Discriminator accuracy 0.9844', 'Total loss: 3.5472', 'for batch', 5)
('GAN loss 3.3283 ', 'GAN acc 0.0000', 'Discriminator loss 0.1107', 'Discriminator accuracy 0.9766', 'Total loss: 3.4390', 'for batch', 6)
('GAN loss 3.2572 ', 'GAN acc 0.0000', 'Discriminator loss 0.0961', 'Discriminator accuracy 0.9824', 'Total loss: 3.3533', 'for batch', 7)
('GAN loss 3.4825 ', 'GAN acc 0.0000', 'Discriminator loss 0.0462', 'Discriminator accuracy 0.9883', 'Total loss: 3.5287', 'for batch', 8)
('GAN loss 3.9622 ', 'GAN acc 0.0000', 'Discriminator loss 0.0562', 'Discriminator accuracy 0.9902', 'Total loss: 4.0184', 'for batch', 9)
('GAN loss 3.4284 ', 'GAN acc 0.0000', 'Discriminator loss 0.0623', 'Discriminator accuracy 0.9883', 'Total loss: 3.4907', 'for batch', 10)
('GAN loss 3.9361 ', 'GAN acc 0.0000', 'Discriminator loss 0.0455', 'Discriminator accuracy 0.9844', 'Total loss: 3.9816', 'for batch', 11)
('GAN loss 3.3119 ', 'GAN acc 0.0000', 'Discriminator loss 0.0770', 'Discriminator accuracy 0.9805', 'Total loss: 3.3889', 'for batch', 12)
('GAN loss 3.4358 ', 'GAN acc 0.0000', 'Discriminator loss 0.0941', 'Discriminator accuracy 0.9805', 'Total loss: 3.5298', 'for batch', 13)
('GAN loss 3.2746 ', 'GAN acc 0.0000', 'Discriminator loss 0.0750', 'Discriminator accuracy 0.9863', 'Total loss: 3.3495', 'for batch', 14)
('GAN loss 3.5855 ', 'GAN acc 0.0000', 'Discriminator loss 0.0670', 'Discriminator accuracy 0.9863', 'Total loss: 3.6525', 'for batch', 15)
('GAN loss 3.8991 ', 'GAN acc 0.0000', 'Discriminator loss 0.0743', 'Discriminator accuracy 0.9863', 'Total loss: 3.9734', 'for batch', 16)
('GAN loss 3.9045 ', 'GAN acc 0.0000', 'Discriminator loss 0.1010', 'Discriminator accuracy 0.9746', 'Total loss: 4.0054', 'for batch', 17)
('GAN loss 3.8693 ', 'GAN acc 0.0000', 'Discriminator loss 0.0617', 'Discriminator accuracy 0.9844', 'Total loss: 3.9310', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96800351)
('DISCRIMINATOR_Imagem FAKE=', 0.034139466)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.203426')
----------------------------------
('Epoch', 22, 'of', 50)
('Number of batches', 19)
('GAN loss 3.5198 ', 'GAN acc 0.0000', 'Discriminator loss 0.0672', 'Discriminator accuracy 0.9824', 'Total loss: 3.5870', 'for batch', 0)
('GAN loss 3.2029 ', 'GAN acc 0.0000', 'Discriminator loss 0.0903', 'Discriminator accuracy 0.9785', 'Total loss: 3.2932', 'for batch', 1)
('GAN loss 3.1291 ', 'GAN acc 0.0000', 'Discriminator loss 0.0770', 'Discriminator accuracy 0.9824', 'Total loss: 3.2061', 'for batch', 2)
('GAN loss 3.4798 ', 'GAN acc 0.0000', 'Discriminator loss 0.0718', 'Discriminator accuracy 0.9902', 'Total loss: 3.5517', 'for batch', 3)
('GAN loss 3.8596 ', 'GAN acc 0.0000', 'Discriminator loss 0.0494', 'Discriminator accuracy 0.9883', 'Total loss: 3.9090', 'for batch', 4)
('GAN loss 3.7375 ', 'GAN acc 0.0000', 'Discriminator loss 0.0559', 'Discriminator accuracy 0.9902', 'Total loss: 3.7933', 'for batch', 5)
('GAN loss 3.5451 ', 'GAN acc 0.0000', 'Discriminator loss 0.1150', 'Discriminator accuracy 0.9785', 'Total loss: 3.6601', 'for batch', 6)
('GAN loss 3.3637 ', 'GAN acc 0.0000', 'Discriminator loss 0.0858', 'Discriminator accuracy 0.9805', 'Total loss: 3.4495', 'for batch', 7)
('GAN loss 3.6961 ', 'GAN acc 0.0000', 'Discriminator loss 0.0356', 'Discriminator accuracy 0.9961', 'Total loss: 3.7317', 'for batch', 8)
('GAN loss 3.7579 ', 'GAN acc 0.0000', 'Discriminator loss 0.0512', 'Discriminator accuracy 0.9883', 'Total loss: 3.8092', 'for batch', 9)
('GAN loss 3.6278 ', 'GAN acc 0.0000', 'Discriminator loss 0.0536', 'Discriminator accuracy 0.9883', 'Total loss: 3.6813', 'for batch', 10)
('GAN loss 3.6080 ', 'GAN acc 0.0000', 'Discriminator loss 0.0428', 'Discriminator accuracy 0.9902', 'Total loss: 3.6508', 'for batch', 11)
('GAN loss 3.4439 ', 'GAN acc 0.0000', 'Discriminator loss 0.0706', 'Discriminator accuracy 0.9824', 'Total loss: 3.5145', 'for batch', 12)
('GAN loss 3.3290 ', 'GAN acc 0.0000', 'Discriminator loss 0.1020', 'Discriminator accuracy 0.9805', 'Total loss: 3.4310', 'for batch', 13)
('GAN loss 3.4902 ', 'GAN acc 0.0000', 'Discriminator loss 0.0615', 'Discriminator accuracy 0.9863', 'Total loss: 3.5518', 'for batch', 14)
('GAN loss 3.5158 ', 'GAN acc 0.0000', 'Discriminator loss 0.0578', 'Discriminator accuracy 0.9883', 'Total loss: 3.5736', 'for batch', 15)
('GAN loss 3.7034 ', 'GAN acc 0.0000', 'Discriminator loss 0.0677', 'Discriminator accuracy 0.9883', 'Total loss: 3.7712', 'for batch', 16)
('GAN loss 3.7292 ', 'GAN acc 0.0000', 'Discriminator loss 0.0846', 'Discriminator accuracy 0.9785', 'Total loss: 3.8138', 'for batch', 17)
('GAN loss 3.6651 ', 'GAN acc 0.0000', 'Discriminator loss 0.0528', 'Discriminator accuracy 0.9883', 'Total loss: 3.7179', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97089934)
('DISCRIMINATOR_Imagem FAKE=', 0.055100724)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.739854')
----------------------------------
('Epoch', 23, 'of', 50)
('Number of batches', 19)
('GAN loss 3.6668 ', 'GAN acc 0.0000', 'Discriminator loss 0.0745', 'Discriminator accuracy 0.9844', 'Total loss: 3.7414', 'for batch', 0)
('GAN loss 3.5057 ', 'GAN acc 0.0000', 'Discriminator loss 0.0843', 'Discriminator accuracy 0.9766', 'Total loss: 3.5900', 'for batch', 1)
('GAN loss 3.4983 ', 'GAN acc 0.0000', 'Discriminator loss 0.0664', 'Discriminator accuracy 0.9863', 'Total loss: 3.5646', 'for batch', 2)
('GAN loss 3.4902 ', 'GAN acc 0.0000', 'Discriminator loss 0.0678', 'Discriminator accuracy 0.9863', 'Total loss: 3.5580', 'for batch', 3)
('GAN loss 3.5519 ', 'GAN acc 0.0000', 'Discriminator loss 0.0508', 'Discriminator accuracy 0.9883', 'Total loss: 3.6026', 'for batch', 4)
('GAN loss 3.6199 ', 'GAN acc 0.0000', 'Discriminator loss 0.0581', 'Discriminator accuracy 0.9863', 'Total loss: 3.6780', 'for batch', 5)
('GAN loss 3.4670 ', 'GAN acc 0.0000', 'Discriminator loss 0.1062', 'Discriminator accuracy 0.9785', 'Total loss: 3.5732', 'for batch', 6)
('GAN loss 3.3642 ', 'GAN acc 0.0000', 'Discriminator loss 0.0771', 'Discriminator accuracy 0.9805', 'Total loss: 3.4413', 'for batch', 7)
('GAN loss 3.6326 ', 'GAN acc 0.0000', 'Discriminator loss 0.0374', 'Discriminator accuracy 0.9961', 'Total loss: 3.6700', 'for batch', 8)
('GAN loss 3.8731 ', 'GAN acc 0.0000', 'Discriminator loss 0.0537', 'Discriminator accuracy 0.9883', 'Total loss: 3.9268', 'for batch', 9)
('GAN loss 3.8480 ', 'GAN acc 0.0000', 'Discriminator loss 0.0538', 'Discriminator accuracy 0.9883', 'Total loss: 3.9017', 'for batch', 10)
('GAN loss 3.7117 ', 'GAN acc 0.0000', 'Discriminator loss 0.0454', 'Discriminator accuracy 0.9863', 'Total loss: 3.7571', 'for batch', 11)
('GAN loss 3.5402 ', 'GAN acc 0.0000', 'Discriminator loss 0.0729', 'Discriminator accuracy 0.9844', 'Total loss: 3.6130', 'for batch', 12)
('GAN loss 3.4536 ', 'GAN acc 0.0000', 'Discriminator loss 0.0955', 'Discriminator accuracy 0.9824', 'Total loss: 3.5491', 'for batch', 13)
('GAN loss 3.4101 ', 'GAN acc 0.0000', 'Discriminator loss 0.0572', 'Discriminator accuracy 0.9863', 'Total loss: 3.4673', 'for batch', 14)
('GAN loss 3.5657 ', 'GAN acc 0.0000', 'Discriminator loss 0.0514', 'Discriminator accuracy 0.9902', 'Total loss: 3.6171', 'for batch', 15)
('GAN loss 3.6022 ', 'GAN acc 0.0000', 'Discriminator loss 0.0618', 'Discriminator accuracy 0.9863', 'Total loss: 3.6640', 'for batch', 16)
('GAN loss 3.5113 ', 'GAN acc 0.0000', 'Discriminator loss 0.0787', 'Discriminator accuracy 0.9805', 'Total loss: 3.5900', 'for batch', 17)
('GAN loss 3.5614 ', 'GAN acc 0.0000', 'Discriminator loss 0.0478', 'Discriminator accuracy 0.9902', 'Total loss: 3.6092', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97442824)
('DISCRIMINATOR_Imagem FAKE=', 0.035109133)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.190390')
----------------------------------
('Epoch', 24, 'of', 50)
('Number of batches', 19)
('GAN loss 3.4295 ', 'GAN acc 0.0000', 'Discriminator loss 0.0593', 'Discriminator accuracy 0.9824', 'Total loss: 3.4887', 'for batch', 0)
('GAN loss 3.2506 ', 'GAN acc 0.0000', 'Discriminator loss 0.0738', 'Discriminator accuracy 0.9805', 'Total loss: 3.3245', 'for batch', 1)
('GAN loss 4.0411 ', 'GAN acc 0.0000', 'Discriminator loss 0.0725', 'Discriminator accuracy 0.9883', 'Total loss: 4.1136', 'for batch', 2)
('GAN loss 4.4492 ', 'GAN acc 0.0000', 'Discriminator loss 0.0564', 'Discriminator accuracy 0.9883', 'Total loss: 4.5056', 'for batch', 3)
('GAN loss 4.3839 ', 'GAN acc 0.0000', 'Discriminator loss 0.0546', 'Discriminator accuracy 0.9883', 'Total loss: 4.4385', 'for batch', 4)
('GAN loss 4.1899 ', 'GAN acc 0.0000', 'Discriminator loss 0.0488', 'Discriminator accuracy 0.9902', 'Total loss: 4.2387', 'for batch', 5)
('GAN loss 3.7631 ', 'GAN acc 0.0000', 'Discriminator loss 0.0903', 'Discriminator accuracy 0.9766', 'Total loss: 3.8534', 'for batch', 6)
('GAN loss 3.4066 ', 'GAN acc 0.0000', 'Discriminator loss 0.0696', 'Discriminator accuracy 0.9824', 'Total loss: 3.4762', 'for batch', 7)
('GAN loss 3.9325 ', 'GAN acc 0.0000', 'Discriminator loss 0.0313', 'Discriminator accuracy 0.9961', 'Total loss: 3.9637', 'for batch', 8)
('GAN loss 4.2418 ', 'GAN acc 0.0000', 'Discriminator loss 0.0401', 'Discriminator accuracy 0.9922', 'Total loss: 4.2819', 'for batch', 9)
('GAN loss 4.3302 ', 'GAN acc 0.0000', 'Discriminator loss 0.0420', 'Discriminator accuracy 0.9902', 'Total loss: 4.3723', 'for batch', 10)
('GAN loss 4.1534 ', 'GAN acc 0.0000', 'Discriminator loss 0.0393', 'Discriminator accuracy 0.9922', 'Total loss: 4.1926', 'for batch', 11)
('GAN loss 3.8614 ', 'GAN acc 0.0000', 'Discriminator loss 0.0502', 'Discriminator accuracy 0.9844', 'Total loss: 3.9115', 'for batch', 12)
('GAN loss 3.9032 ', 'GAN acc 0.0000', 'Discriminator loss 0.0533', 'Discriminator accuracy 0.9863', 'Total loss: 3.9565', 'for batch', 13)
('GAN loss 3.9672 ', 'GAN acc 0.0000', 'Discriminator loss 0.0575', 'Discriminator accuracy 0.9883', 'Total loss: 4.0247', 'for batch', 14)
('GAN loss 5.6310 ', 'GAN acc 0.0000', 'Discriminator loss 0.1035', 'Discriminator accuracy 0.9688', 'Total loss: 5.7345', 'for batch', 15)
('GAN loss 5.7859 ', 'GAN acc 0.0000', 'Discriminator loss 0.0779', 'Discriminator accuracy 0.9863', 'Total loss: 5.8638', 'for batch', 16)
('GAN loss 5.3274 ', 'GAN acc 0.0000', 'Discriminator loss 0.1139', 'Discriminator accuracy 0.9727', 'Total loss: 5.4413', 'for batch', 17)
('GAN loss 4.6673 ', 'GAN acc 0.0000', 'Discriminator loss 0.0553', 'Discriminator accuracy 0.9844', 'Total loss: 4.7226', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96780109)
('DISCRIMINATOR_Imagem FAKE=', 0.023312716)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.744686')
----------------------------------
('Epoch', 25, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1230 ', 'GAN acc 0.0000', 'Discriminator loss 0.0760', 'Discriminator accuracy 0.9824', 'Total loss: 4.1991', 'for batch', 0)
('GAN loss 3.6161 ', 'GAN acc 0.0000', 'Discriminator loss 0.0949', 'Discriminator accuracy 0.9785', 'Total loss: 3.7110', 'for batch', 1)
('GAN loss 3.3338 ', 'GAN acc 0.0000', 'Discriminator loss 0.0813', 'Discriminator accuracy 0.9824', 'Total loss: 3.4151', 'for batch', 2)
('GAN loss 3.5904 ', 'GAN acc 0.0039', 'Discriminator loss 0.0664', 'Discriminator accuracy 0.9883', 'Total loss: 3.6568', 'for batch', 3)
('GAN loss 3.7516 ', 'GAN acc 0.0000', 'Discriminator loss 0.0546', 'Discriminator accuracy 0.9902', 'Total loss: 3.8062', 'for batch', 4)
('GAN loss 3.7213 ', 'GAN acc 0.0000', 'Discriminator loss 0.0562', 'Discriminator accuracy 0.9883', 'Total loss: 3.7776', 'for batch', 5)
('GAN loss 3.4206 ', 'GAN acc 0.0039', 'Discriminator loss 0.0962', 'Discriminator accuracy 0.9707', 'Total loss: 3.5168', 'for batch', 6)
('GAN loss 3.1991 ', 'GAN acc 0.0000', 'Discriminator loss 0.0713', 'Discriminator accuracy 0.9824', 'Total loss: 3.2704', 'for batch', 7)
('GAN loss 3.4862 ', 'GAN acc 0.0000', 'Discriminator loss 0.0435', 'Discriminator accuracy 0.9922', 'Total loss: 3.5297', 'for batch', 8)
('GAN loss 3.7429 ', 'GAN acc 0.0000', 'Discriminator loss 0.0607', 'Discriminator accuracy 0.9902', 'Total loss: 3.8036', 'for batch', 9)
('GAN loss 3.7871 ', 'GAN acc 0.0000', 'Discriminator loss 0.0462', 'Discriminator accuracy 0.9844', 'Total loss: 3.8333', 'for batch', 10)
('GAN loss 3.6971 ', 'GAN acc 0.0000', 'Discriminator loss 0.0501', 'Discriminator accuracy 0.9844', 'Total loss: 3.7472', 'for batch', 11)
('GAN loss 3.4874 ', 'GAN acc 0.0000', 'Discriminator loss 0.0638', 'Discriminator accuracy 0.9844', 'Total loss: 3.5512', 'for batch', 12)
('GAN loss 3.2966 ', 'GAN acc 0.0000', 'Discriminator loss 0.1014', 'Discriminator accuracy 0.9824', 'Total loss: 3.3980', 'for batch', 13)
('GAN loss 3.4780 ', 'GAN acc 0.0000', 'Discriminator loss 0.0599', 'Discriminator accuracy 0.9883', 'Total loss: 3.5378', 'for batch', 14)
('GAN loss 3.6611 ', 'GAN acc 0.0000', 'Discriminator loss 0.0527', 'Discriminator accuracy 0.9883', 'Total loss: 3.7138', 'for batch', 15)
('GAN loss 3.7958 ', 'GAN acc 0.0000', 'Discriminator loss 0.0648', 'Discriminator accuracy 0.9863', 'Total loss: 3.8606', 'for batch', 16)
('GAN loss 3.5747 ', 'GAN acc 0.0000', 'Discriminator loss 0.0886', 'Discriminator accuracy 0.9785', 'Total loss: 3.6633', 'for batch', 17)
('GAN loss 3.4984 ', 'GAN acc 0.0000', 'Discriminator loss 0.0472', 'Discriminator accuracy 0.9902', 'Total loss: 3.5456', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97439235)
('DISCRIMINATOR_Imagem FAKE=', 0.036238108)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.229514')
----------------------------------
('Epoch', 26, 'of', 50)
('Number of batches', 19)
('GAN loss 3.4728 ', 'GAN acc 0.0000', 'Discriminator loss 0.0647', 'Discriminator accuracy 0.9844', 'Total loss: 3.5376', 'for batch', 0)
('GAN loss 3.3535 ', 'GAN acc 0.0000', 'Discriminator loss 0.0842', 'Discriminator accuracy 0.9805', 'Total loss: 3.4378', 'for batch', 1)
('GAN loss 3.4351 ', 'GAN acc 0.0000', 'Discriminator loss 0.0724', 'Discriminator accuracy 0.9805', 'Total loss: 3.5075', 'for batch', 2)
('GAN loss 3.7503 ', 'GAN acc 0.0000', 'Discriminator loss 0.0577', 'Discriminator accuracy 0.9883', 'Total loss: 3.8080', 'for batch', 3)
('GAN loss 3.8588 ', 'GAN acc 0.0000', 'Discriminator loss 0.0473', 'Discriminator accuracy 0.9883', 'Total loss: 3.9060', 'for batch', 4)
('GAN loss 3.8529 ', 'GAN acc 0.0000', 'Discriminator loss 0.0607', 'Discriminator accuracy 0.9863', 'Total loss: 3.9136', 'for batch', 5)
('GAN loss 4.0410 ', 'GAN acc 0.0039', 'Discriminator loss 0.1089', 'Discriminator accuracy 0.9766', 'Total loss: 4.1499', 'for batch', 6)
('GAN loss 4.3545 ', 'GAN acc 0.0000', 'Discriminator loss 0.0887', 'Discriminator accuracy 0.9746', 'Total loss: 4.4431', 'for batch', 7)
('GAN loss 4.2365 ', 'GAN acc 0.0000', 'Discriminator loss 0.0277', 'Discriminator accuracy 0.9922', 'Total loss: 4.2642', 'for batch', 8)
('GAN loss 4.0243 ', 'GAN acc 0.0000', 'Discriminator loss 0.0559', 'Discriminator accuracy 0.9902', 'Total loss: 4.0802', 'for batch', 9)
('GAN loss 3.8046 ', 'GAN acc 0.0000', 'Discriminator loss 0.0465', 'Discriminator accuracy 0.9883', 'Total loss: 3.8511', 'for batch', 10)
('GAN loss 3.5132 ', 'GAN acc 0.0000', 'Discriminator loss 0.0482', 'Discriminator accuracy 0.9863', 'Total loss: 3.5614', 'for batch', 11)
('GAN loss 3.4388 ', 'GAN acc 0.0000', 'Discriminator loss 0.0659', 'Discriminator accuracy 0.9844', 'Total loss: 3.5047', 'for batch', 12)
('GAN loss 3.6988 ', 'GAN acc 0.0000', 'Discriminator loss 0.0939', 'Discriminator accuracy 0.9844', 'Total loss: 3.7927', 'for batch', 13)
('GAN loss 3.9225 ', 'GAN acc 0.0000', 'Discriminator loss 0.0572', 'Discriminator accuracy 0.9883', 'Total loss: 3.9797', 'for batch', 14)
('GAN loss 4.0330 ', 'GAN acc 0.0000', 'Discriminator loss 0.0540', 'Discriminator accuracy 0.9883', 'Total loss: 4.0869', 'for batch', 15)
('GAN loss 3.9595 ', 'GAN acc 0.0000', 'Discriminator loss 0.0708', 'Discriminator accuracy 0.9844', 'Total loss: 4.0303', 'for batch', 16)
('GAN loss 3.7112 ', 'GAN acc 0.0000', 'Discriminator loss 0.0784', 'Discriminator accuracy 0.9805', 'Total loss: 3.7896', 'for batch', 17)
('GAN loss 3.6623 ', 'GAN acc 0.0000', 'Discriminator loss 0.0432', 'Discriminator accuracy 0.9922', 'Total loss: 3.7055', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97626406)
('DISCRIMINATOR_Imagem FAKE=', 0.048806731)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.731429')
----------------------------------
('Epoch', 27, 'of', 50)
('Number of batches', 19)
('GAN loss 3.6478 ', 'GAN acc 0.0000', 'Discriminator loss 0.0636', 'Discriminator accuracy 0.9844', 'Total loss: 3.7114', 'for batch', 0)
('GAN loss 3.7762 ', 'GAN acc 0.0000', 'Discriminator loss 0.0909', 'Discriminator accuracy 0.9785', 'Total loss: 3.8671', 'for batch', 1)
('GAN loss 3.8481 ', 'GAN acc 0.0000', 'Discriminator loss 0.0687', 'Discriminator accuracy 0.9863', 'Total loss: 3.9168', 'for batch', 2)
('GAN loss 3.8926 ', 'GAN acc 0.0000', 'Discriminator loss 0.0564', 'Discriminator accuracy 0.9883', 'Total loss: 3.9490', 'for batch', 3)
('GAN loss 3.7400 ', 'GAN acc 0.0000', 'Discriminator loss 0.0507', 'Discriminator accuracy 0.9863', 'Total loss: 3.7907', 'for batch', 4)
('GAN loss 3.6255 ', 'GAN acc 0.0000', 'Discriminator loss 0.0518', 'Discriminator accuracy 0.9883', 'Total loss: 3.6774', 'for batch', 5)
('GAN loss 3.3567 ', 'GAN acc 0.0000', 'Discriminator loss 0.0909', 'Discriminator accuracy 0.9805', 'Total loss: 3.4476', 'for batch', 6)
('GAN loss 3.2873 ', 'GAN acc 0.0000', 'Discriminator loss 0.0706', 'Discriminator accuracy 0.9824', 'Total loss: 3.3579', 'for batch', 7)
('GAN loss 3.6865 ', 'GAN acc 0.0000', 'Discriminator loss 0.0313', 'Discriminator accuracy 0.9961', 'Total loss: 3.7179', 'for batch', 8)
('GAN loss 3.9090 ', 'GAN acc 0.0000', 'Discriminator loss 0.0438', 'Discriminator accuracy 0.9902', 'Total loss: 3.9529', 'for batch', 9)
('GAN loss 3.8521 ', 'GAN acc 0.0000', 'Discriminator loss 0.0463', 'Discriminator accuracy 0.9863', 'Total loss: 3.8984', 'for batch', 10)
('GAN loss 3.7397 ', 'GAN acc 0.0000', 'Discriminator loss 0.0445', 'Discriminator accuracy 0.9902', 'Total loss: 3.7842', 'for batch', 11)
('GAN loss 3.6364 ', 'GAN acc 0.0000', 'Discriminator loss 0.0619', 'Discriminator accuracy 0.9844', 'Total loss: 3.6984', 'for batch', 12)
('GAN loss 3.5046 ', 'GAN acc 0.0000', 'Discriminator loss 0.0867', 'Discriminator accuracy 0.9844', 'Total loss: 3.5913', 'for batch', 13)
('GAN loss 3.5815 ', 'GAN acc 0.0000', 'Discriminator loss 0.0526', 'Discriminator accuracy 0.9883', 'Total loss: 3.6341', 'for batch', 14)
('GAN loss 3.7359 ', 'GAN acc 0.0000', 'Discriminator loss 0.0399', 'Discriminator accuracy 0.9922', 'Total loss: 3.7758', 'for batch', 15)
('GAN loss 3.8025 ', 'GAN acc 0.0000', 'Discriminator loss 0.0593', 'Discriminator accuracy 0.9883', 'Total loss: 3.8618', 'for batch', 16)
('GAN loss 3.6328 ', 'GAN acc 0.0000', 'Discriminator loss 0.0662', 'Discriminator accuracy 0.9844', 'Total loss: 3.6989', 'for batch', 17)
('GAN loss 3.6262 ', 'GAN acc 0.0000', 'Discriminator loss 0.0448', 'Discriminator accuracy 0.9883', 'Total loss: 3.6710', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97663057)
('DISCRIMINATOR_Imagem FAKE=', 0.032474529)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.202861')
----------------------------------
('Epoch', 28, 'of', 50)
('Number of batches', 19)
('GAN loss 3.8252 ', 'GAN acc 0.0000', 'Discriminator loss 0.0604', 'Discriminator accuracy 0.9863', 'Total loss: 3.8856', 'for batch', 0)
('GAN loss 3.6753 ', 'GAN acc 0.0000', 'Discriminator loss 0.0778', 'Discriminator accuracy 0.9805', 'Total loss: 3.7531', 'for batch', 1)
('GAN loss 3.6795 ', 'GAN acc 0.0000', 'Discriminator loss 0.0612', 'Discriminator accuracy 0.9863', 'Total loss: 3.7407', 'for batch', 2)
('GAN loss 3.9317 ', 'GAN acc 0.0000', 'Discriminator loss 0.0544', 'Discriminator accuracy 0.9883', 'Total loss: 3.9861', 'for batch', 3)
('GAN loss 4.1348 ', 'GAN acc 0.0000', 'Discriminator loss 0.0346', 'Discriminator accuracy 0.9902', 'Total loss: 4.1694', 'for batch', 4)
('GAN loss 4.2645 ', 'GAN acc 0.0000', 'Discriminator loss 0.0523', 'Discriminator accuracy 0.9902', 'Total loss: 4.3168', 'for batch', 5)
('GAN loss 4.0668 ', 'GAN acc 0.0000', 'Discriminator loss 0.0772', 'Discriminator accuracy 0.9805', 'Total loss: 4.1441', 'for batch', 6)
('GAN loss 3.8781 ', 'GAN acc 0.0000', 'Discriminator loss 0.0689', 'Discriminator accuracy 0.9805', 'Total loss: 3.9469', 'for batch', 7)
('GAN loss 4.1525 ', 'GAN acc 0.0000', 'Discriminator loss 0.0242', 'Discriminator accuracy 0.9961', 'Total loss: 4.1766', 'for batch', 8)
('GAN loss 4.3948 ', 'GAN acc 0.0000', 'Discriminator loss 0.0397', 'Discriminator accuracy 0.9922', 'Total loss: 4.4344', 'for batch', 9)
('GAN loss 4.2605 ', 'GAN acc 0.0000', 'Discriminator loss 0.0440', 'Discriminator accuracy 0.9902', 'Total loss: 4.3046', 'for batch', 10)
('GAN loss 4.1073 ', 'GAN acc 0.0000', 'Discriminator loss 0.0343', 'Discriminator accuracy 0.9941', 'Total loss: 4.1416', 'for batch', 11)
('GAN loss 3.8585 ', 'GAN acc 0.0000', 'Discriminator loss 0.0617', 'Discriminator accuracy 0.9844', 'Total loss: 3.9201', 'for batch', 12)
('GAN loss 3.6961 ', 'GAN acc 0.0000', 'Discriminator loss 0.0707', 'Discriminator accuracy 0.9844', 'Total loss: 3.7668', 'for batch', 13)
('GAN loss 3.7654 ', 'GAN acc 0.0000', 'Discriminator loss 0.0471', 'Discriminator accuracy 0.9883', 'Total loss: 3.8125', 'for batch', 14)
('GAN loss 3.8931 ', 'GAN acc 0.0000', 'Discriminator loss 0.0399', 'Discriminator accuracy 0.9902', 'Total loss: 3.9331', 'for batch', 15)
('GAN loss 3.9233 ', 'GAN acc 0.0000', 'Discriminator loss 0.0599', 'Discriminator accuracy 0.9883', 'Total loss: 3.9831', 'for batch', 16)
('GAN loss 3.6743 ', 'GAN acc 0.0000', 'Discriminator loss 0.0661', 'Discriminator accuracy 0.9824', 'Total loss: 3.7404', 'for batch', 17)
('GAN loss 3.8244 ', 'GAN acc 0.0000', 'Discriminator loss 0.0378', 'Discriminator accuracy 0.9922', 'Total loss: 3.8622', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97969329)
('DISCRIMINATOR_Imagem FAKE=', 0.023475418)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.724062')
----------------------------------
('Epoch', 29, 'of', 50)
('Number of batches', 19)
('GAN loss 3.7481 ', 'GAN acc 0.0000', 'Discriminator loss 0.0535', 'Discriminator accuracy 0.9883', 'Total loss: 3.8015', 'for batch', 0)
('GAN loss 3.5605 ', 'GAN acc 0.0000', 'Discriminator loss 0.0626', 'Discriminator accuracy 0.9844', 'Total loss: 3.6231', 'for batch', 1)
('GAN loss 3.9196 ', 'GAN acc 0.0000', 'Discriminator loss 0.0566', 'Discriminator accuracy 0.9883', 'Total loss: 3.9762', 'for batch', 2)
('GAN loss 4.2001 ', 'GAN acc 0.0000', 'Discriminator loss 0.0499', 'Discriminator accuracy 0.9902', 'Total loss: 4.2499', 'for batch', 3)
('GAN loss 4.4310 ', 'GAN acc 0.0000', 'Discriminator loss 0.0349', 'Discriminator accuracy 0.9922', 'Total loss: 4.4659', 'for batch', 4)
('GAN loss 4.4119 ', 'GAN acc 0.0000', 'Discriminator loss 0.0444', 'Discriminator accuracy 0.9922', 'Total loss: 4.4563', 'for batch', 5)
('GAN loss 4.2291 ', 'GAN acc 0.0000', 'Discriminator loss 0.0689', 'Discriminator accuracy 0.9863', 'Total loss: 4.2979', 'for batch', 6)
('GAN loss 6.1918 ', 'GAN acc 0.0000', 'Discriminator loss 0.1560', 'Discriminator accuracy 0.9355', 'Total loss: 6.3479', 'for batch', 7)
('GAN loss 6.0939 ', 'GAN acc 0.0000', 'Discriminator loss 0.0431', 'Discriminator accuracy 0.9902', 'Total loss: 6.1370', 'for batch', 8)
('GAN loss 5.7627 ', 'GAN acc 0.0000', 'Discriminator loss 0.0791', 'Discriminator accuracy 0.9844', 'Total loss: 5.8418', 'for batch', 9)
('GAN loss 5.1787 ', 'GAN acc 0.0000', 'Discriminator loss 0.0837', 'Discriminator accuracy 0.9805', 'Total loss: 5.2624', 'for batch', 10)
('GAN loss 4.4020 ', 'GAN acc 0.0000', 'Discriminator loss 0.0863', 'Discriminator accuracy 0.9727', 'Total loss: 4.4883', 'for batch', 11)
('GAN loss 3.7799 ', 'GAN acc 0.0000', 'Discriminator loss 0.0681', 'Discriminator accuracy 0.9844', 'Total loss: 3.8480', 'for batch', 12)
('GAN loss 3.3715 ', 'GAN acc 0.0000', 'Discriminator loss 0.0825', 'Discriminator accuracy 0.9844', 'Total loss: 3.4540', 'for batch', 13)
('GAN loss 3.2298 ', 'GAN acc 0.0000', 'Discriminator loss 0.0525', 'Discriminator accuracy 0.9883', 'Total loss: 3.2823', 'for batch', 14)
('GAN loss 3.3263 ', 'GAN acc 0.0000', 'Discriminator loss 0.0482', 'Discriminator accuracy 0.9902', 'Total loss: 3.3745', 'for batch', 15)
('GAN loss 3.4709 ', 'GAN acc 0.0000', 'Discriminator loss 0.0598', 'Discriminator accuracy 0.9883', 'Total loss: 3.5308', 'for batch', 16)
('GAN loss 3.4001 ', 'GAN acc 0.0000', 'Discriminator loss 0.0687', 'Discriminator accuracy 0.9824', 'Total loss: 3.4688', 'for batch', 17)
('GAN loss 3.4200 ', 'GAN acc 0.0000', 'Discriminator loss 0.0404', 'Discriminator accuracy 0.9902', 'Total loss: 3.4604', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97762299)
('DISCRIMINATOR_Imagem FAKE=', 0.04651982)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.214957')
----------------------------------
('Epoch', 30, 'of', 50)
('Number of batches', 19)
('GAN loss 3.2939 ', 'GAN acc 0.0000', 'Discriminator loss 0.0627', 'Discriminator accuracy 0.9844', 'Total loss: 3.3566', 'for batch', 0)
('GAN loss 3.1827 ', 'GAN acc 0.0000', 'Discriminator loss 0.0634', 'Discriminator accuracy 0.9844', 'Total loss: 3.2461', 'for batch', 1)
('GAN loss 3.4508 ', 'GAN acc 0.0000', 'Discriminator loss 0.0663', 'Discriminator accuracy 0.9863', 'Total loss: 3.5170', 'for batch', 2)
('GAN loss 3.6896 ', 'GAN acc 0.0000', 'Discriminator loss 0.0520', 'Discriminator accuracy 0.9883', 'Total loss: 3.7415', 'for batch', 3)
('GAN loss 3.7963 ', 'GAN acc 0.0000', 'Discriminator loss 0.0422', 'Discriminator accuracy 0.9883', 'Total loss: 3.8384', 'for batch', 4)
('GAN loss 3.7188 ', 'GAN acc 0.0000', 'Discriminator loss 0.0548', 'Discriminator accuracy 0.9883', 'Total loss: 3.7736', 'for batch', 5)
('GAN loss 3.5735 ', 'GAN acc 0.0000', 'Discriminator loss 0.0792', 'Discriminator accuracy 0.9766', 'Total loss: 3.6527', 'for batch', 6)
('GAN loss 3.5968 ', 'GAN acc 0.0000', 'Discriminator loss 0.0649', 'Discriminator accuracy 0.9863', 'Total loss: 3.6617', 'for batch', 7)
('GAN loss 4.0262 ', 'GAN acc 0.0000', 'Discriminator loss 0.0280', 'Discriminator accuracy 0.9961', 'Total loss: 4.0541', 'for batch', 8)
('GAN loss 4.2406 ', 'GAN acc 0.0000', 'Discriminator loss 0.0461', 'Discriminator accuracy 0.9902', 'Total loss: 4.2866', 'for batch', 9)
('GAN loss 4.2702 ', 'GAN acc 0.0000', 'Discriminator loss 0.0301', 'Discriminator accuracy 0.9922', 'Total loss: 4.3002', 'for batch', 10)
('GAN loss 4.1738 ', 'GAN acc 0.0000', 'Discriminator loss 0.0354', 'Discriminator accuracy 0.9902', 'Total loss: 4.2092', 'for batch', 11)
('GAN loss 3.7597 ', 'GAN acc 0.0000', 'Discriminator loss 0.0565', 'Discriminator accuracy 0.9844', 'Total loss: 3.8162', 'for batch', 12)
('GAN loss 4.2322 ', 'GAN acc 0.0000', 'Discriminator loss 0.0875', 'Discriminator accuracy 0.9844', 'Total loss: 4.3198', 'for batch', 13)
('GAN loss 4.3673 ', 'GAN acc 0.0000', 'Discriminator loss 0.0495', 'Discriminator accuracy 0.9883', 'Total loss: 4.4168', 'for batch', 14)
('GAN loss 4.4207 ', 'GAN acc 0.0000', 'Discriminator loss 0.0389', 'Discriminator accuracy 0.9922', 'Total loss: 4.4596', 'for batch', 15)
('GAN loss 4.3138 ', 'GAN acc 0.0000', 'Discriminator loss 0.0596', 'Discriminator accuracy 0.9883', 'Total loss: 4.3733', 'for batch', 16)
('GAN loss 4.1176 ', 'GAN acc 0.0000', 'Discriminator loss 0.0646', 'Discriminator accuracy 0.9863', 'Total loss: 4.1822', 'for batch', 17)
('GAN loss 4.0426 ', 'GAN acc 0.0000', 'Discriminator loss 0.0352', 'Discriminator accuracy 0.9941', 'Total loss: 4.0778', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9806397)
('DISCRIMINATOR_Imagem FAKE=', 0.016939171)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.709484')
----------------------------------
('Epoch', 31, 'of', 50)
('Number of batches', 19)
('GAN loss 3.9717 ', 'GAN acc 0.0000', 'Discriminator loss 0.0505', 'Discriminator accuracy 0.9902', 'Total loss: 4.0222', 'for batch', 0)
('GAN loss 3.7338 ', 'GAN acc 0.0000', 'Discriminator loss 0.0600', 'Discriminator accuracy 0.9863', 'Total loss: 3.7937', 'for batch', 1)
('GAN loss 3.7534 ', 'GAN acc 0.0000', 'Discriminator loss 0.0503', 'Discriminator accuracy 0.9902', 'Total loss: 3.8037', 'for batch', 2)
('GAN loss 3.9317 ', 'GAN acc 0.0000', 'Discriminator loss 0.0369', 'Discriminator accuracy 0.9922', 'Total loss: 3.9686', 'for batch', 3)
('GAN loss 4.1465 ', 'GAN acc 0.0000', 'Discriminator loss 0.0319', 'Discriminator accuracy 0.9941', 'Total loss: 4.1783', 'for batch', 4)
('GAN loss 4.2734 ', 'GAN acc 0.0000', 'Discriminator loss 0.0419', 'Discriminator accuracy 0.9902', 'Total loss: 4.3152', 'for batch', 5)
('GAN loss 4.1886 ', 'GAN acc 0.0000', 'Discriminator loss 0.0556', 'Discriminator accuracy 0.9844', 'Total loss: 4.2442', 'for batch', 6)
('GAN loss 4.7070 ', 'GAN acc 0.0039', 'Discriminator loss 0.0818', 'Discriminator accuracy 0.9805', 'Total loss: 4.7888', 'for batch', 7)
('GAN loss 8.7441 ', 'GAN acc 0.0000', 'Discriminator loss 0.1373', 'Discriminator accuracy 0.9434', 'Total loss: 8.8814', 'for batch', 8)
('GAN loss 7.8156 ', 'GAN acc 0.0000', 'Discriminator loss 0.0585', 'Discriminator accuracy 0.9883', 'Total loss: 7.8741', 'for batch', 9)
('GAN loss 7.2759 ', 'GAN acc 0.0000', 'Discriminator loss 0.0977', 'Discriminator accuracy 0.9785', 'Total loss: 7.3736', 'for batch', 10)
('GAN loss 6.5540 ', 'GAN acc 0.0000', 'Discriminator loss 0.1034', 'Discriminator accuracy 0.9746', 'Total loss: 6.6574', 'for batch', 11)
('GAN loss 5.7319 ', 'GAN acc 0.0000', 'Discriminator loss 0.1025', 'Discriminator accuracy 0.9766', 'Total loss: 5.8345', 'for batch', 12)
('GAN loss 5.0432 ', 'GAN acc 0.0000', 'Discriminator loss 0.0772', 'Discriminator accuracy 0.9785', 'Total loss: 5.1204', 'for batch', 13)
('GAN loss 4.5080 ', 'GAN acc 0.0000', 'Discriminator loss 0.0577', 'Discriminator accuracy 0.9863', 'Total loss: 4.5657', 'for batch', 14)
('GAN loss 4.1482 ', 'GAN acc 0.0000', 'Discriminator loss 0.0396', 'Discriminator accuracy 0.9883', 'Total loss: 4.1878', 'for batch', 15)
('GAN loss 3.9660 ', 'GAN acc 0.0000', 'Discriminator loss 0.0558', 'Discriminator accuracy 0.9883', 'Total loss: 4.0218', 'for batch', 16)
('GAN loss 3.7452 ', 'GAN acc 0.0000', 'Discriminator loss 0.0586', 'Discriminator accuracy 0.9863', 'Total loss: 3.8038', 'for batch', 17)
('GAN loss 3.7013 ', 'GAN acc 0.0000', 'Discriminator loss 0.0349', 'Discriminator accuracy 0.9941', 'Total loss: 3.7362', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97969586)
('DISCRIMINATOR_Imagem FAKE=', 0.025873249)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.158938')
----------------------------------
('Epoch', 32, 'of', 50)
('Number of batches', 19)
('GAN loss 3.7103 ', 'GAN acc 0.0000', 'Discriminator loss 0.0501', 'Discriminator accuracy 0.9902', 'Total loss: 3.7604', 'for batch', 0)
('GAN loss 3.5945 ', 'GAN acc 0.0000', 'Discriminator loss 0.0612', 'Discriminator accuracy 0.9844', 'Total loss: 3.6557', 'for batch', 1)
('GAN loss 3.4968 ', 'GAN acc 0.0000', 'Discriminator loss 0.0535', 'Discriminator accuracy 0.9902', 'Total loss: 3.5503', 'for batch', 2)
('GAN loss 4.3100 ', 'GAN acc 0.0000', 'Discriminator loss 0.1304', 'Discriminator accuracy 0.9629', 'Total loss: 4.4405', 'for batch', 3)
('GAN loss 5.0054 ', 'GAN acc 0.0000', 'Discriminator loss 0.0658', 'Discriminator accuracy 0.9844', 'Total loss: 5.0712', 'for batch', 4)
('GAN loss 5.1621 ', 'GAN acc 0.0000', 'Discriminator loss 0.0676', 'Discriminator accuracy 0.9844', 'Total loss: 5.2296', 'for batch', 5)
('GAN loss 4.4839 ', 'GAN acc 0.0000', 'Discriminator loss 0.0997', 'Discriminator accuracy 0.9766', 'Total loss: 4.5836', 'for batch', 6)
('GAN loss 4.0470 ', 'GAN acc 0.0000', 'Discriminator loss 0.0841', 'Discriminator accuracy 0.9766', 'Total loss: 4.1311', 'for batch', 7)
('GAN loss 3.8168 ', 'GAN acc 0.0000', 'Discriminator loss 0.0316', 'Discriminator accuracy 0.9902', 'Total loss: 3.8485', 'for batch', 8)
('GAN loss 3.7047 ', 'GAN acc 0.0000', 'Discriminator loss 0.0525', 'Discriminator accuracy 0.9902', 'Total loss: 3.7572', 'for batch', 9)
('GAN loss 3.5443 ', 'GAN acc 0.0000', 'Discriminator loss 0.0509', 'Discriminator accuracy 0.9883', 'Total loss: 3.5952', 'for batch', 10)
('GAN loss 3.5069 ', 'GAN acc 0.0000', 'Discriminator loss 0.0456', 'Discriminator accuracy 0.9863', 'Total loss: 3.5525', 'for batch', 11)
('GAN loss 3.4040 ', 'GAN acc 0.0000', 'Discriminator loss 0.0560', 'Discriminator accuracy 0.9844', 'Total loss: 3.4600', 'for batch', 12)
('GAN loss 3.3579 ', 'GAN acc 0.0000', 'Discriminator loss 0.0797', 'Discriminator accuracy 0.9844', 'Total loss: 3.4376', 'for batch', 13)
('GAN loss 3.3871 ', 'GAN acc 0.0000', 'Discriminator loss 0.0572', 'Discriminator accuracy 0.9883', 'Total loss: 3.4443', 'for batch', 14)
('GAN loss 3.5494 ', 'GAN acc 0.0000', 'Discriminator loss 0.0458', 'Discriminator accuracy 0.9922', 'Total loss: 3.5952', 'for batch', 15)
('GAN loss 3.5749 ', 'GAN acc 0.0000', 'Discriminator loss 0.0607', 'Discriminator accuracy 0.9883', 'Total loss: 3.6356', 'for batch', 16)
('GAN loss 3.6321 ', 'GAN acc 0.0000', 'Discriminator loss 0.0705', 'Discriminator accuracy 0.9863', 'Total loss: 3.7026', 'for batch', 17)
('GAN loss 3.6169 ', 'GAN acc 0.0000', 'Discriminator loss 0.0422', 'Discriminator accuracy 0.9922', 'Total loss: 3.6591', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97825873)
('DISCRIMINATOR_Imagem FAKE=', 0.032469388)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.727441')
----------------------------------
('Epoch', 33, 'of', 50)
('Number of batches', 19)
('GAN loss 3.6096 ', 'GAN acc 0.0000', 'Discriminator loss 0.0561', 'Discriminator accuracy 0.9883', 'Total loss: 3.6657', 'for batch', 0)
('GAN loss 3.5258 ', 'GAN acc 0.0000', 'Discriminator loss 0.0658', 'Discriminator accuracy 0.9844', 'Total loss: 3.5916', 'for batch', 1)
('GAN loss 3.2934 ', 'GAN acc 0.0000', 'Discriminator loss 0.0594', 'Discriminator accuracy 0.9844', 'Total loss: 3.3528', 'for batch', 2)
('GAN loss 3.3144 ', 'GAN acc 0.0000', 'Discriminator loss 0.0443', 'Discriminator accuracy 0.9883', 'Total loss: 3.3587', 'for batch', 3)
('GAN loss 3.4465 ', 'GAN acc 0.0000', 'Discriminator loss 0.0408', 'Discriminator accuracy 0.9922', 'Total loss: 3.4873', 'for batch', 4)
('GAN loss 3.5328 ', 'GAN acc 0.0000', 'Discriminator loss 0.0448', 'Discriminator accuracy 0.9902', 'Total loss: 3.5775', 'for batch', 5)
('GAN loss 3.4450 ', 'GAN acc 0.0000', 'Discriminator loss 0.0636', 'Discriminator accuracy 0.9844', 'Total loss: 3.5087', 'for batch', 6)
('GAN loss 3.4028 ', 'GAN acc 0.0000', 'Discriminator loss 0.0475', 'Discriminator accuracy 0.9883', 'Total loss: 3.4502', 'for batch', 7)
('GAN loss 3.8039 ', 'GAN acc 0.0000', 'Discriminator loss 0.0255', 'Discriminator accuracy 0.9961', 'Total loss: 3.8294', 'for batch', 8)
('GAN loss 3.8981 ', 'GAN acc 0.0000', 'Discriminator loss 0.0384', 'Discriminator accuracy 0.9902', 'Total loss: 3.9365', 'for batch', 9)
('GAN loss 4.0199 ', 'GAN acc 0.0000', 'Discriminator loss 0.0280', 'Discriminator accuracy 0.9941', 'Total loss: 4.0478', 'for batch', 10)
('GAN loss 3.9989 ', 'GAN acc 0.0000', 'Discriminator loss 0.0282', 'Discriminator accuracy 0.9922', 'Total loss: 4.0270', 'for batch', 11)
('GAN loss 3.9594 ', 'GAN acc 0.0000', 'Discriminator loss 0.0419', 'Discriminator accuracy 0.9902', 'Total loss: 4.0014', 'for batch', 12)
('GAN loss 4.1307 ', 'GAN acc 0.0000', 'Discriminator loss 0.0668', 'Discriminator accuracy 0.9844', 'Total loss: 4.1975', 'for batch', 13)
('GAN loss 4.3262 ', 'GAN acc 0.0000', 'Discriminator loss 0.0456', 'Discriminator accuracy 0.9883', 'Total loss: 4.3718', 'for batch', 14)
('GAN loss 4.5980 ', 'GAN acc 0.0000', 'Discriminator loss 0.0351', 'Discriminator accuracy 0.9922', 'Total loss: 4.6331', 'for batch', 15)
('GAN loss 4.5273 ', 'GAN acc 0.0000', 'Discriminator loss 0.0592', 'Discriminator accuracy 0.9883', 'Total loss: 4.5865', 'for batch', 16)
('GAN loss 4.2465 ', 'GAN acc 0.0000', 'Discriminator loss 0.0699', 'Discriminator accuracy 0.9863', 'Total loss: 4.3164', 'for batch', 17)
('GAN loss 4.1173 ', 'GAN acc 0.0000', 'Discriminator loss 0.0353', 'Discriminator accuracy 0.9922', 'Total loss: 4.1526', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98173338)
('DISCRIMINATOR_Imagem FAKE=', 0.015969582)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.191537')
----------------------------------
('Epoch', 34, 'of', 50)
('Number of batches', 19)
('GAN loss 3.9814 ', 'GAN acc 0.0000', 'Discriminator loss 0.0496', 'Discriminator accuracy 0.9902', 'Total loss: 4.0310', 'for batch', 0)
('GAN loss 3.7210 ', 'GAN acc 0.0000', 'Discriminator loss 0.0680', 'Discriminator accuracy 0.9844', 'Total loss: 3.7890', 'for batch', 1)
('GAN loss 4.2645 ', 'GAN acc 0.0000', 'Discriminator loss 0.0669', 'Discriminator accuracy 0.9844', 'Total loss: 4.3313', 'for batch', 2)
('GAN loss 5.8290 ', 'GAN acc 0.0000', 'Discriminator loss 0.1840', 'Discriminator accuracy 0.9121', 'Total loss: 6.0130', 'for batch', 3)
('GAN loss 6.3787 ', 'GAN acc 0.0000', 'Discriminator loss 0.0841', 'Discriminator accuracy 0.9824', 'Total loss: 6.4628', 'for batch', 4)
('GAN loss 6.2221 ', 'GAN acc 0.0000', 'Discriminator loss 0.0992', 'Discriminator accuracy 0.9766', 'Total loss: 6.3213', 'for batch', 5)
('GAN loss 5.4788 ', 'GAN acc 0.0000', 'Discriminator loss 0.1451', 'Discriminator accuracy 0.9688', 'Total loss: 5.6239', 'for batch', 6)
('GAN loss 4.6378 ', 'GAN acc 0.0000', 'Discriminator loss 0.1163', 'Discriminator accuracy 0.9766', 'Total loss: 4.7541', 'for batch', 7)
('GAN loss 4.3154 ', 'GAN acc 0.0000', 'Discriminator loss 0.0391', 'Discriminator accuracy 0.9902', 'Total loss: 4.3545', 'for batch', 8)
('GAN loss 4.0248 ', 'GAN acc 0.0000', 'Discriminator loss 0.0576', 'Discriminator accuracy 0.9883', 'Total loss: 4.0825', 'for batch', 9)
('GAN loss 3.8371 ', 'GAN acc 0.0000', 'Discriminator loss 0.0531', 'Discriminator accuracy 0.9902', 'Total loss: 3.8902', 'for batch', 10)
('GAN loss 3.8042 ', 'GAN acc 0.0000', 'Discriminator loss 0.0436', 'Discriminator accuracy 0.9902', 'Total loss: 3.8478', 'for batch', 11)
('GAN loss 3.6045 ', 'GAN acc 0.0000', 'Discriminator loss 0.0681', 'Discriminator accuracy 0.9805', 'Total loss: 3.6726', 'for batch', 12)
('GAN loss 3.5601 ', 'GAN acc 0.0000', 'Discriminator loss 0.0695', 'Discriminator accuracy 0.9844', 'Total loss: 3.6296', 'for batch', 13)
('GAN loss 3.4768 ', 'GAN acc 0.0000', 'Discriminator loss 0.0592', 'Discriminator accuracy 0.9863', 'Total loss: 3.5360', 'for batch', 14)
('GAN loss 3.4997 ', 'GAN acc 0.0000', 'Discriminator loss 0.0431', 'Discriminator accuracy 0.9922', 'Total loss: 3.5428', 'for batch', 15)
('GAN loss 3.5293 ', 'GAN acc 0.0000', 'Discriminator loss 0.0596', 'Discriminator accuracy 0.9883', 'Total loss: 3.5889', 'for batch', 16)
('GAN loss 3.4313 ', 'GAN acc 0.0000', 'Discriminator loss 0.0621', 'Discriminator accuracy 0.9844', 'Total loss: 3.4934', 'for batch', 17)
('GAN loss 3.4703 ', 'GAN acc 0.0000', 'Discriminator loss 0.0377', 'Discriminator accuracy 0.9922', 'Total loss: 3.5081', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97933)
('DISCRIMINATOR_Imagem FAKE=', 0.038110428)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.716955')
----------------------------------
('Epoch', 35, 'of', 50)
('Number of batches', 19)
('GAN loss 3.3495 ', 'GAN acc 0.0000', 'Discriminator loss 0.0526', 'Discriminator accuracy 0.9844', 'Total loss: 3.4021', 'for batch', 0)
('GAN loss 3.5843 ', 'GAN acc 0.0000', 'Discriminator loss 0.0666', 'Discriminator accuracy 0.9863', 'Total loss: 3.6510', 'for batch', 1)
('GAN loss 4.2595 ', 'GAN acc 0.0000', 'Discriminator loss 0.0649', 'Discriminator accuracy 0.9883', 'Total loss: 4.3245', 'for batch', 2)
('GAN loss 4.6507 ', 'GAN acc 0.0000', 'Discriminator loss 0.0507', 'Discriminator accuracy 0.9902', 'Total loss: 4.7014', 'for batch', 3)
('GAN loss 4.7674 ', 'GAN acc 0.0000', 'Discriminator loss 0.0367', 'Discriminator accuracy 0.9902', 'Total loss: 4.8041', 'for batch', 4)
('GAN loss 4.7635 ', 'GAN acc 0.0000', 'Discriminator loss 0.0416', 'Discriminator accuracy 0.9922', 'Total loss: 4.8050', 'for batch', 5)
('GAN loss 4.6017 ', 'GAN acc 0.0000', 'Discriminator loss 0.0666', 'Discriminator accuracy 0.9863', 'Total loss: 4.6683', 'for batch', 6)
('GAN loss 4.3756 ', 'GAN acc 0.0000', 'Discriminator loss 0.0675', 'Discriminator accuracy 0.9824', 'Total loss: 4.4431', 'for batch', 7)
('GAN loss 4.2760 ', 'GAN acc 0.0000', 'Discriminator loss 0.0198', 'Discriminator accuracy 0.9941', 'Total loss: 4.2959', 'for batch', 8)
('GAN loss 4.1938 ', 'GAN acc 0.0000', 'Discriminator loss 0.0395', 'Discriminator accuracy 0.9902', 'Total loss: 4.2333', 'for batch', 9)
('GAN loss 4.1376 ', 'GAN acc 0.0000', 'Discriminator loss 0.0413', 'Discriminator accuracy 0.9902', 'Total loss: 4.1789', 'for batch', 10)
('GAN loss 4.1346 ', 'GAN acc 0.0000', 'Discriminator loss 0.0272', 'Discriminator accuracy 0.9941', 'Total loss: 4.1619', 'for batch', 11)
('GAN loss 4.0043 ', 'GAN acc 0.0000', 'Discriminator loss 0.0482', 'Discriminator accuracy 0.9883', 'Total loss: 4.0526', 'for batch', 12)
('GAN loss 3.8963 ', 'GAN acc 0.0000', 'Discriminator loss 0.0512', 'Discriminator accuracy 0.9883', 'Total loss: 3.9475', 'for batch', 13)
('GAN loss 5.3220 ', 'GAN acc 0.0000', 'Discriminator loss 0.1822', 'Discriminator accuracy 0.9277', 'Total loss: 5.5042', 'for batch', 14)
('GAN loss 5.7598 ', 'GAN acc 0.0000', 'Discriminator loss 0.0618', 'Discriminator accuracy 0.9863', 'Total loss: 5.8216', 'for batch', 15)
('GAN loss 6.0067 ', 'GAN acc 0.0000', 'Discriminator loss 0.0887', 'Discriminator accuracy 0.9805', 'Total loss: 6.0954', 'for batch', 16)
('GAN loss 5.6519 ', 'GAN acc 0.0000', 'Discriminator loss 0.1240', 'Discriminator accuracy 0.9746', 'Total loss: 5.7759', 'for batch', 17)
('GAN loss 4.8822 ', 'GAN acc 0.0000', 'Discriminator loss 0.0721', 'Discriminator accuracy 0.9785', 'Total loss: 4.9543', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.95951694)
('DISCRIMINATOR_Imagem FAKE=', 0.015762068)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.208124')
----------------------------------
('Epoch', 36, 'of', 50)
('Number of batches', 19)
('GAN loss 4.4224 ', 'GAN acc 0.0000', 'Discriminator loss 0.0858', 'Discriminator accuracy 0.9805', 'Total loss: 4.5082', 'for batch', 0)
('GAN loss 3.9778 ', 'GAN acc 0.0000', 'Discriminator loss 0.1085', 'Discriminator accuracy 0.9727', 'Total loss: 4.0864', 'for batch', 1)
('GAN loss 3.6621 ', 'GAN acc 0.0000', 'Discriminator loss 0.0690', 'Discriminator accuracy 0.9824', 'Total loss: 3.7310', 'for batch', 2)
('GAN loss 3.5359 ', 'GAN acc 0.0000', 'Discriminator loss 0.0532', 'Discriminator accuracy 0.9883', 'Total loss: 3.5890', 'for batch', 3)
('GAN loss 3.4957 ', 'GAN acc 0.0000', 'Discriminator loss 0.0488', 'Discriminator accuracy 0.9883', 'Total loss: 3.5445', 'for batch', 4)
('GAN loss 3.5215 ', 'GAN acc 0.0000', 'Discriminator loss 0.0535', 'Discriminator accuracy 0.9883', 'Total loss: 3.5750', 'for batch', 5)
('GAN loss 3.5472 ', 'GAN acc 0.0000', 'Discriminator loss 0.0720', 'Discriminator accuracy 0.9824', 'Total loss: 3.6192', 'for batch', 6)
('GAN loss 3.5231 ', 'GAN acc 0.0000', 'Discriminator loss 0.0658', 'Discriminator accuracy 0.9844', 'Total loss: 3.5889', 'for batch', 7)
('GAN loss 3.5836 ', 'GAN acc 0.0000', 'Discriminator loss 0.0328', 'Discriminator accuracy 0.9941', 'Total loss: 3.6164', 'for batch', 8)
('GAN loss 3.6281 ', 'GAN acc 0.0000', 'Discriminator loss 0.0493', 'Discriminator accuracy 0.9902', 'Total loss: 3.6773', 'for batch', 9)
('GAN loss 3.6664 ', 'GAN acc 0.0000', 'Discriminator loss 0.0410', 'Discriminator accuracy 0.9883', 'Total loss: 3.7074', 'for batch', 10)
('GAN loss 3.6891 ', 'GAN acc 0.0000', 'Discriminator loss 0.0399', 'Discriminator accuracy 0.9922', 'Total loss: 3.7290', 'for batch', 11)
('GAN loss 3.6554 ', 'GAN acc 0.0000', 'Discriminator loss 0.0524', 'Discriminator accuracy 0.9844', 'Total loss: 3.7078', 'for batch', 12)
('GAN loss 3.6288 ', 'GAN acc 0.0000', 'Discriminator loss 0.0755', 'Discriminator accuracy 0.9844', 'Total loss: 3.7044', 'for batch', 13)
('GAN loss 3.5778 ', 'GAN acc 0.0000', 'Discriminator loss 0.0517', 'Discriminator accuracy 0.9883', 'Total loss: 3.6295', 'for batch', 14)
('GAN loss 3.5980 ', 'GAN acc 0.0000', 'Discriminator loss 0.0393', 'Discriminator accuracy 0.9922', 'Total loss: 3.6372', 'for batch', 15)
('GAN loss 3.6079 ', 'GAN acc 0.0000', 'Discriminator loss 0.0552', 'Discriminator accuracy 0.9883', 'Total loss: 3.6631', 'for batch', 16)
('GAN loss 3.5945 ', 'GAN acc 0.0000', 'Discriminator loss 0.0648', 'Discriminator accuracy 0.9844', 'Total loss: 3.6593', 'for batch', 17)
('GAN loss 3.6133 ', 'GAN acc 0.0000', 'Discriminator loss 0.0385', 'Discriminator accuracy 0.9922', 'Total loss: 3.6518', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98024559)
('DISCRIMINATOR_Imagem FAKE=', 0.029299876)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.715641')
----------------------------------
('Epoch', 37, 'of', 50)
('Number of batches', 19)
('GAN loss 3.6181 ', 'GAN acc 0.0000', 'Discriminator loss 0.0547', 'Discriminator accuracy 0.9863', 'Total loss: 3.6728', 'for batch', 0)
('GAN loss 3.5387 ', 'GAN acc 0.0000', 'Discriminator loss 0.0590', 'Discriminator accuracy 0.9863', 'Total loss: 3.5977', 'for batch', 1)
('GAN loss 3.5017 ', 'GAN acc 0.0000', 'Discriminator loss 0.0455', 'Discriminator accuracy 0.9902', 'Total loss: 3.5472', 'for batch', 2)
('GAN loss 3.5227 ', 'GAN acc 0.0000', 'Discriminator loss 0.0417', 'Discriminator accuracy 0.9902', 'Total loss: 3.5644', 'for batch', 3)
('GAN loss 3.5632 ', 'GAN acc 0.0000', 'Discriminator loss 0.0330', 'Discriminator accuracy 0.9922', 'Total loss: 3.5962', 'for batch', 4)
('GAN loss 3.6330 ', 'GAN acc 0.0000', 'Discriminator loss 0.0508', 'Discriminator accuracy 0.9902', 'Total loss: 3.6838', 'for batch', 5)
('GAN loss 3.9025 ', 'GAN acc 0.0000', 'Discriminator loss 0.0690', 'Discriminator accuracy 0.9844', 'Total loss: 3.9715', 'for batch', 6)
('GAN loss 4.0063 ', 'GAN acc 0.0000', 'Discriminator loss 0.0628', 'Discriminator accuracy 0.9824', 'Total loss: 4.0691', 'for batch', 7)
('GAN loss 4.1542 ', 'GAN acc 0.0000', 'Discriminator loss 0.0191', 'Discriminator accuracy 0.9961', 'Total loss: 4.1734', 'for batch', 8)
('GAN loss 4.2323 ', 'GAN acc 0.0000', 'Discriminator loss 0.0364', 'Discriminator accuracy 0.9922', 'Total loss: 4.2687', 'for batch', 9)
('GAN loss 4.2380 ', 'GAN acc 0.0000', 'Discriminator loss 0.0282', 'Discriminator accuracy 0.9941', 'Total loss: 4.2662', 'for batch', 10)
('GAN loss 4.1902 ', 'GAN acc 0.0000', 'Discriminator loss 0.0313', 'Discriminator accuracy 0.9902', 'Total loss: 4.2215', 'for batch', 11)
('GAN loss 4.1011 ', 'GAN acc 0.0000', 'Discriminator loss 0.0422', 'Discriminator accuracy 0.9863', 'Total loss: 4.1432', 'for batch', 12)
('GAN loss 4.0100 ', 'GAN acc 0.0000', 'Discriminator loss 0.0609', 'Discriminator accuracy 0.9863', 'Total loss: 4.0709', 'for batch', 13)
('GAN loss 3.9321 ', 'GAN acc 0.0000', 'Discriminator loss 0.0449', 'Discriminator accuracy 0.9883', 'Total loss: 3.9770', 'for batch', 14)
('GAN loss 4.0241 ', 'GAN acc 0.0000', 'Discriminator loss 0.0357', 'Discriminator accuracy 0.9941', 'Total loss: 4.0598', 'for batch', 15)
('GAN loss 4.0046 ', 'GAN acc 0.0000', 'Discriminator loss 0.0606', 'Discriminator accuracy 0.9883', 'Total loss: 4.0652', 'for batch', 16)
('GAN loss 4.2211 ', 'GAN acc 0.0000', 'Discriminator loss 0.0691', 'Discriminator accuracy 0.9863', 'Total loss: 4.2902', 'for batch', 17)
('GAN loss 4.5905 ', 'GAN acc 0.0000', 'Discriminator loss 0.0386', 'Discriminator accuracy 0.9941', 'Total loss: 4.6290', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98049986)
('DISCRIMINATOR_Imagem FAKE=', 0.012717491)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.179029')
----------------------------------
('Epoch', 38, 'of', 50)
('Number of batches', 19)
('GAN loss 4.6389 ', 'GAN acc 0.0000', 'Discriminator loss 0.0543', 'Discriminator accuracy 0.9902', 'Total loss: 4.6931', 'for batch', 0)
('GAN loss 4.4197 ', 'GAN acc 0.0000', 'Discriminator loss 0.0652', 'Discriminator accuracy 0.9844', 'Total loss: 4.4848', 'for batch', 1)
('GAN loss 4.1647 ', 'GAN acc 0.0000', 'Discriminator loss 0.0493', 'Discriminator accuracy 0.9883', 'Total loss: 4.2140', 'for batch', 2)
('GAN loss 4.0424 ', 'GAN acc 0.0000', 'Discriminator loss 0.0438', 'Discriminator accuracy 0.9902', 'Total loss: 4.0862', 'for batch', 3)
('GAN loss 4.0661 ', 'GAN acc 0.0000', 'Discriminator loss 0.0285', 'Discriminator accuracy 0.9941', 'Total loss: 4.0946', 'for batch', 4)
('GAN loss 4.0722 ', 'GAN acc 0.0000', 'Discriminator loss 0.0437', 'Discriminator accuracy 0.9922', 'Total loss: 4.1159', 'for batch', 5)
('GAN loss 4.1201 ', 'GAN acc 0.0000', 'Discriminator loss 0.0527', 'Discriminator accuracy 0.9883', 'Total loss: 4.1729', 'for batch', 6)
('GAN loss 3.9870 ', 'GAN acc 0.0000', 'Discriminator loss 0.0545', 'Discriminator accuracy 0.9883', 'Total loss: 4.0415', 'for batch', 7)
('GAN loss 4.1803 ', 'GAN acc 0.0000', 'Discriminator loss 0.0206', 'Discriminator accuracy 0.9980', 'Total loss: 4.2009', 'for batch', 8)
('GAN loss 4.2651 ', 'GAN acc 0.0000', 'Discriminator loss 0.0400', 'Discriminator accuracy 0.9922', 'Total loss: 4.3051', 'for batch', 9)
('GAN loss 4.3057 ', 'GAN acc 0.0000', 'Discriminator loss 0.0296', 'Discriminator accuracy 0.9941', 'Total loss: 4.3353', 'for batch', 10)
('GAN loss 4.3665 ', 'GAN acc 0.0000', 'Discriminator loss 0.0323', 'Discriminator accuracy 0.9941', 'Total loss: 4.3988', 'for batch', 11)
('GAN loss 4.3451 ', 'GAN acc 0.0000', 'Discriminator loss 0.0466', 'Discriminator accuracy 0.9883', 'Total loss: 4.3917', 'for batch', 12)
('GAN loss 4.3629 ', 'GAN acc 0.0000', 'Discriminator loss 0.0556', 'Discriminator accuracy 0.9863', 'Total loss: 4.4186', 'for batch', 13)
('GAN loss 4.3768 ', 'GAN acc 0.0000', 'Discriminator loss 0.0521', 'Discriminator accuracy 0.9883', 'Total loss: 4.4289', 'for batch', 14)
('GAN loss 4.3872 ', 'GAN acc 0.0000', 'Discriminator loss 0.0474', 'Discriminator accuracy 0.9922', 'Total loss: 4.4346', 'for batch', 15)
('GAN loss 4.3292 ', 'GAN acc 0.0000', 'Discriminator loss 0.0667', 'Discriminator accuracy 0.9883', 'Total loss: 4.3959', 'for batch', 16)
('GAN loss 4.1630 ', 'GAN acc 0.0000', 'Discriminator loss 0.0698', 'Discriminator accuracy 0.9863', 'Total loss: 4.2329', 'for batch', 17)
('GAN loss 3.9084 ', 'GAN acc 0.0000', 'Discriminator loss 0.0458', 'Discriminator accuracy 0.9922', 'Total loss: 3.9542', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97930592)
('DISCRIMINATOR_Imagem FAKE=', 0.053526238)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.738050')
----------------------------------
('Epoch', 39, 'of', 50)
('Number of batches', 19)
('GAN loss 3.9063 ', 'GAN acc 0.0000', 'Discriminator loss 0.0655', 'Discriminator accuracy 0.9863', 'Total loss: 3.9718', 'for batch', 0)
('GAN loss 3.7350 ', 'GAN acc 0.0000', 'Discriminator loss 0.0700', 'Discriminator accuracy 0.9863', 'Total loss: 3.8050', 'for batch', 1)
('GAN loss 3.7147 ', 'GAN acc 0.0000', 'Discriminator loss 0.0556', 'Discriminator accuracy 0.9883', 'Total loss: 3.7703', 'for batch', 2)
('GAN loss 4.2407 ', 'GAN acc 0.0000', 'Discriminator loss 0.0523', 'Discriminator accuracy 0.9902', 'Total loss: 4.2930', 'for batch', 3)
('GAN loss 3.7642 ', 'GAN acc 0.0000', 'Discriminator loss 0.0398', 'Discriminator accuracy 0.9922', 'Total loss: 3.8040', 'for batch', 4)
('GAN loss 3.8609 ', 'GAN acc 0.0000', 'Discriminator loss 0.0456', 'Discriminator accuracy 0.9922', 'Total loss: 3.9066', 'for batch', 5)
('GAN loss 3.9886 ', 'GAN acc 0.0000', 'Discriminator loss 0.0644', 'Discriminator accuracy 0.9863', 'Total loss: 4.0530', 'for batch', 6)
('GAN loss 3.8564 ', 'GAN acc 0.0000', 'Discriminator loss 0.0586', 'Discriminator accuracy 0.9844', 'Total loss: 3.9150', 'for batch', 7)
('GAN loss 3.9825 ', 'GAN acc 0.0000', 'Discriminator loss 0.0220', 'Discriminator accuracy 0.9961', 'Total loss: 4.0045', 'for batch', 8)
('GAN loss 4.0570 ', 'GAN acc 0.0000', 'Discriminator loss 0.0362', 'Discriminator accuracy 0.9922', 'Total loss: 4.0932', 'for batch', 9)
('GAN loss 4.0967 ', 'GAN acc 0.0000', 'Discriminator loss 0.0364', 'Discriminator accuracy 0.9902', 'Total loss: 4.1331', 'for batch', 10)
('GAN loss 4.1395 ', 'GAN acc 0.0000', 'Discriminator loss 0.0266', 'Discriminator accuracy 0.9941', 'Total loss: 4.1661', 'for batch', 11)
('GAN loss 4.1297 ', 'GAN acc 0.0000', 'Discriminator loss 0.0453', 'Discriminator accuracy 0.9883', 'Total loss: 4.1749', 'for batch', 12)
('GAN loss 4.0975 ', 'GAN acc 0.0000', 'Discriminator loss 0.0575', 'Discriminator accuracy 0.9863', 'Total loss: 4.1550', 'for batch', 13)
('GAN loss 4.0527 ', 'GAN acc 0.0000', 'Discriminator loss 0.0413', 'Discriminator accuracy 0.9902', 'Total loss: 4.0940', 'for batch', 14)
('GAN loss 4.0093 ', 'GAN acc 0.0000', 'Discriminator loss 0.0351', 'Discriminator accuracy 0.9941', 'Total loss: 4.0444', 'for batch', 15)
('GAN loss 4.2513 ', 'GAN acc 0.0000', 'Discriminator loss 0.0648', 'Discriminator accuracy 0.9883', 'Total loss: 4.3161', 'for batch', 16)
('GAN loss 4.3930 ', 'GAN acc 0.0000', 'Discriminator loss 0.0505', 'Discriminator accuracy 0.9863', 'Total loss: 4.4435', 'for batch', 17)
('GAN loss 3.7125 ', 'GAN acc 0.0000', 'Discriminator loss 0.0414', 'Discriminator accuracy 0.9922', 'Total loss: 3.7539', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9817788)
('DISCRIMINATOR_Imagem FAKE=', 0.0181676)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.199680')
----------------------------------
('Epoch', 40, 'of', 50)
('Number of batches', 19)
('GAN loss 3.9921 ', 'GAN acc 0.0000', 'Discriminator loss 0.0499', 'Discriminator accuracy 0.9883', 'Total loss: 4.0420', 'for batch', 0)
('GAN loss 3.8389 ', 'GAN acc 0.0000', 'Discriminator loss 0.0552', 'Discriminator accuracy 0.9863', 'Total loss: 3.8941', 'for batch', 1)
('GAN loss 3.8626 ', 'GAN acc 0.0000', 'Discriminator loss 0.0510', 'Discriminator accuracy 0.9902', 'Total loss: 3.9136', 'for batch', 2)
('GAN loss 3.9417 ', 'GAN acc 0.0000', 'Discriminator loss 0.0516', 'Discriminator accuracy 0.9902', 'Total loss: 3.9933', 'for batch', 3)
('GAN loss 4.0642 ', 'GAN acc 0.0000', 'Discriminator loss 0.0372', 'Discriminator accuracy 0.9922', 'Total loss: 4.1015', 'for batch', 4)
('GAN loss 4.2060 ', 'GAN acc 0.0000', 'Discriminator loss 0.0418', 'Discriminator accuracy 0.9922', 'Total loss: 4.2478', 'for batch', 5)
('GAN loss 4.0891 ', 'GAN acc 0.0000', 'Discriminator loss 0.0647', 'Discriminator accuracy 0.9863', 'Total loss: 4.1538', 'for batch', 6)
('GAN loss 4.0461 ', 'GAN acc 0.0000', 'Discriminator loss 0.0624', 'Discriminator accuracy 0.9863', 'Total loss: 4.1085', 'for batch', 7)
('GAN loss 4.1521 ', 'GAN acc 0.0000', 'Discriminator loss 0.0227', 'Discriminator accuracy 0.9941', 'Total loss: 4.1748', 'for batch', 8)
('GAN loss 4.3883 ', 'GAN acc 0.0000', 'Discriminator loss 0.0402', 'Discriminator accuracy 0.9922', 'Total loss: 4.4285', 'for batch', 9)
('GAN loss 4.1111 ', 'GAN acc 0.0000', 'Discriminator loss 0.0436', 'Discriminator accuracy 0.9902', 'Total loss: 4.1547', 'for batch', 10)
('GAN loss 4.2029 ', 'GAN acc 0.0000', 'Discriminator loss 0.0277', 'Discriminator accuracy 0.9941', 'Total loss: 4.2306', 'for batch', 11)
('GAN loss 4.0477 ', 'GAN acc 0.0000', 'Discriminator loss 0.0474', 'Discriminator accuracy 0.9863', 'Total loss: 4.0951', 'for batch', 12)
('GAN loss 4.0784 ', 'GAN acc 0.0000', 'Discriminator loss 0.0524', 'Discriminator accuracy 0.9902', 'Total loss: 4.1309', 'for batch', 13)
('GAN loss 4.3796 ', 'GAN acc 0.0000', 'Discriminator loss 0.0623', 'Discriminator accuracy 0.9863', 'Total loss: 4.4418', 'for batch', 14)
('GAN loss 6.1009 ', 'GAN acc 0.0000', 'Discriminator loss 0.0983', 'Discriminator accuracy 0.9785', 'Total loss: 6.1992', 'for batch', 15)
('GAN loss 6.5738 ', 'GAN acc 0.0039', 'Discriminator loss 0.0738', 'Discriminator accuracy 0.9863', 'Total loss: 6.6476', 'for batch', 16)
('GAN loss 5.7741 ', 'GAN acc 0.0000', 'Discriminator loss 0.1087', 'Discriminator accuracy 0.9805', 'Total loss: 5.8828', 'for batch', 17)
('GAN loss 5.2909 ', 'GAN acc 0.0000', 'Discriminator loss 0.0552', 'Discriminator accuracy 0.9883', 'Total loss: 5.3461', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96698552)
('DISCRIMINATOR_Imagem FAKE=', 0.0062686354)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.747427')
----------------------------------
('Epoch', 41, 'of', 50)
('Number of batches', 19)
('GAN loss 4.7823 ', 'GAN acc 0.0000', 'Discriminator loss 0.0870', 'Discriminator accuracy 0.9824', 'Total loss: 4.8692', 'for batch', 0)
('GAN loss 4.2340 ', 'GAN acc 0.0000', 'Discriminator loss 0.0944', 'Discriminator accuracy 0.9785', 'Total loss: 4.3284', 'for batch', 1)
('GAN loss 3.8854 ', 'GAN acc 0.0000', 'Discriminator loss 0.0622', 'Discriminator accuracy 0.9863', 'Total loss: 3.9476', 'for batch', 2)
('GAN loss 3.6816 ', 'GAN acc 0.0000', 'Discriminator loss 0.0561', 'Discriminator accuracy 0.9883', 'Total loss: 3.7376', 'for batch', 3)
('GAN loss 3.6020 ', 'GAN acc 0.0000', 'Discriminator loss 0.0425', 'Discriminator accuracy 0.9902', 'Total loss: 3.6445', 'for batch', 4)
('GAN loss 3.6195 ', 'GAN acc 0.0000', 'Discriminator loss 0.0436', 'Discriminator accuracy 0.9902', 'Total loss: 3.6631', 'for batch', 5)
('GAN loss 3.6132 ', 'GAN acc 0.0000', 'Discriminator loss 0.0644', 'Discriminator accuracy 0.9844', 'Total loss: 3.6776', 'for batch', 6)
('GAN loss 3.4859 ', 'GAN acc 0.0000', 'Discriminator loss 0.0674', 'Discriminator accuracy 0.9824', 'Total loss: 3.5534', 'for batch', 7)
('GAN loss 3.6044 ', 'GAN acc 0.0000', 'Discriminator loss 0.0248', 'Discriminator accuracy 0.9961', 'Total loss: 3.6292', 'for batch', 8)
('GAN loss 3.7004 ', 'GAN acc 0.0000', 'Discriminator loss 0.0422', 'Discriminator accuracy 0.9902', 'Total loss: 3.7426', 'for batch', 9)
('GAN loss 3.6836 ', 'GAN acc 0.0000', 'Discriminator loss 0.0416', 'Discriminator accuracy 0.9902', 'Total loss: 3.7252', 'for batch', 10)
('GAN loss 3.8502 ', 'GAN acc 0.0000', 'Discriminator loss 0.0295', 'Discriminator accuracy 0.9941', 'Total loss: 3.8797', 'for batch', 11)
('GAN loss 3.7881 ', 'GAN acc 0.0000', 'Discriminator loss 0.0465', 'Discriminator accuracy 0.9863', 'Total loss: 3.8346', 'for batch', 12)
('GAN loss 3.8139 ', 'GAN acc 0.0000', 'Discriminator loss 0.0504', 'Discriminator accuracy 0.9863', 'Total loss: 3.8643', 'for batch', 13)
('GAN loss 3.7651 ', 'GAN acc 0.0000', 'Discriminator loss 0.0433', 'Discriminator accuracy 0.9902', 'Total loss: 3.8085', 'for batch', 14)
('GAN loss 3.8394 ', 'GAN acc 0.0000', 'Discriminator loss 0.0348', 'Discriminator accuracy 0.9941', 'Total loss: 3.8742', 'for batch', 15)
('GAN loss 3.8507 ', 'GAN acc 0.0000', 'Discriminator loss 0.0555', 'Discriminator accuracy 0.9883', 'Total loss: 3.9062', 'for batch', 16)
('GAN loss 3.6063 ', 'GAN acc 0.0000', 'Discriminator loss 0.0483', 'Discriminator accuracy 0.9844', 'Total loss: 3.6545', 'for batch', 17)
('GAN loss 3.6394 ', 'GAN acc 0.0000', 'Discriminator loss 0.0307', 'Discriminator accuracy 0.9941', 'Total loss: 3.6701', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98224688)
('DISCRIMINATOR_Imagem FAKE=', 0.029726006)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.204216')
----------------------------------
('Epoch', 42, 'of', 50)
('Number of batches', 19)
('GAN loss 3.4892 ', 'GAN acc 0.0000', 'Discriminator loss 0.0508', 'Discriminator accuracy 0.9863', 'Total loss: 3.5400', 'for batch', 0)
('GAN loss 4.8616 ', 'GAN acc 0.0000', 'Discriminator loss 0.0775', 'Discriminator accuracy 0.9863', 'Total loss: 4.9392', 'for batch', 1)
('GAN loss 5.3681 ', 'GAN acc 0.0000', 'Discriminator loss 0.0540', 'Discriminator accuracy 0.9883', 'Total loss: 5.4221', 'for batch', 2)
('GAN loss 5.4554 ', 'GAN acc 0.0000', 'Discriminator loss 0.0553', 'Discriminator accuracy 0.9902', 'Total loss: 5.5107', 'for batch', 3)
('GAN loss 5.3720 ', 'GAN acc 0.0000', 'Discriminator loss 0.0382', 'Discriminator accuracy 0.9922', 'Total loss: 5.4102', 'for batch', 4)
('GAN loss 5.2191 ', 'GAN acc 0.0000', 'Discriminator loss 0.0445', 'Discriminator accuracy 0.9922', 'Total loss: 5.2635', 'for batch', 5)
('GAN loss 4.9389 ', 'GAN acc 0.0000', 'Discriminator loss 0.0607', 'Discriminator accuracy 0.9863', 'Total loss: 4.9996', 'for batch', 6)
('GAN loss 4.6335 ', 'GAN acc 0.0000', 'Discriminator loss 0.0658', 'Discriminator accuracy 0.9824', 'Total loss: 4.6993', 'for batch', 7)
('GAN loss 4.5008 ', 'GAN acc 0.0000', 'Discriminator loss 0.0174', 'Discriminator accuracy 0.9961', 'Total loss: 4.5183', 'for batch', 8)
('GAN loss 4.4124 ', 'GAN acc 0.0000', 'Discriminator loss 0.0357', 'Discriminator accuracy 0.9922', 'Total loss: 4.4481', 'for batch', 9)
('GAN loss 4.3000 ', 'GAN acc 0.0000', 'Discriminator loss 0.0363', 'Discriminator accuracy 0.9922', 'Total loss: 4.3363', 'for batch', 10)
('GAN loss 4.2773 ', 'GAN acc 0.0000', 'Discriminator loss 0.0257', 'Discriminator accuracy 0.9941', 'Total loss: 4.3030', 'for batch', 11)
('GAN loss 4.2102 ', 'GAN acc 0.0000', 'Discriminator loss 0.0406', 'Discriminator accuracy 0.9883', 'Total loss: 4.2508', 'for batch', 12)
('GAN loss 4.1679 ', 'GAN acc 0.0000', 'Discriminator loss 0.0431', 'Discriminator accuracy 0.9902', 'Total loss: 4.2110', 'for batch', 13)
('GAN loss 4.0890 ', 'GAN acc 0.0000', 'Discriminator loss 0.0405', 'Discriminator accuracy 0.9902', 'Total loss: 4.1295', 'for batch', 14)
('GAN loss 4.0770 ', 'GAN acc 0.0000', 'Discriminator loss 0.0340', 'Discriminator accuracy 0.9941', 'Total loss: 4.1110', 'for batch', 15)
('GAN loss 4.0618 ', 'GAN acc 0.0000', 'Discriminator loss 0.0573', 'Discriminator accuracy 0.9883', 'Total loss: 4.1191', 'for batch', 16)
('GAN loss 3.9577 ', 'GAN acc 0.0000', 'Discriminator loss 0.0491', 'Discriminator accuracy 0.9883', 'Total loss: 4.0068', 'for batch', 17)
('GAN loss 4.0002 ', 'GAN acc 0.0000', 'Discriminator loss 0.0316', 'Discriminator accuracy 0.9941', 'Total loss: 4.0318', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98317295)
('DISCRIMINATOR_Imagem FAKE=', 0.019310653)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.710527')
----------------------------------
('Epoch', 43, 'of', 50)
('Number of batches', 19)
('GAN loss 3.9800 ', 'GAN acc 0.0000', 'Discriminator loss 0.0508', 'Discriminator accuracy 0.9902', 'Total loss: 4.0309', 'for batch', 0)
('GAN loss 3.8775 ', 'GAN acc 0.0000', 'Discriminator loss 0.0513', 'Discriminator accuracy 0.9883', 'Total loss: 3.9288', 'for batch', 1)
('GAN loss 3.8711 ', 'GAN acc 0.0000', 'Discriminator loss 0.0461', 'Discriminator accuracy 0.9902', 'Total loss: 3.9172', 'for batch', 2)
('GAN loss 3.9442 ', 'GAN acc 0.0000', 'Discriminator loss 0.0438', 'Discriminator accuracy 0.9902', 'Total loss: 3.9880', 'for batch', 3)
('GAN loss 4.0375 ', 'GAN acc 0.0000', 'Discriminator loss 0.0260', 'Discriminator accuracy 0.9961', 'Total loss: 4.0634', 'for batch', 4)
('GAN loss 4.1312 ', 'GAN acc 0.0000', 'Discriminator loss 0.0391', 'Discriminator accuracy 0.9922', 'Total loss: 4.1703', 'for batch', 5)
('GAN loss 4.2026 ', 'GAN acc 0.0000', 'Discriminator loss 0.0484', 'Discriminator accuracy 0.9883', 'Total loss: 4.2510', 'for batch', 6)
('GAN loss 4.1089 ', 'GAN acc 0.0000', 'Discriminator loss 0.0475', 'Discriminator accuracy 0.9883', 'Total loss: 4.1564', 'for batch', 7)
('GAN loss 4.2469 ', 'GAN acc 0.0000', 'Discriminator loss 0.0158', 'Discriminator accuracy 0.9980', 'Total loss: 4.2626', 'for batch', 8)
('GAN loss 4.2832 ', 'GAN acc 0.0000', 'Discriminator loss 0.0320', 'Discriminator accuracy 0.9941', 'Total loss: 4.3151', 'for batch', 9)
('GAN loss 4.2768 ', 'GAN acc 0.0000', 'Discriminator loss 0.0300', 'Discriminator accuracy 0.9922', 'Total loss: 4.3067', 'for batch', 10)
('GAN loss 4.3278 ', 'GAN acc 0.0000', 'Discriminator loss 0.0249', 'Discriminator accuracy 0.9961', 'Total loss: 4.3527', 'for batch', 11)
('GAN loss 4.3188 ', 'GAN acc 0.0000', 'Discriminator loss 0.0349', 'Discriminator accuracy 0.9922', 'Total loss: 4.3537', 'for batch', 12)
('GAN loss 4.3143 ', 'GAN acc 0.0000', 'Discriminator loss 0.0394', 'Discriminator accuracy 0.9902', 'Total loss: 4.3538', 'for batch', 13)
('GAN loss 4.2954 ', 'GAN acc 0.0000', 'Discriminator loss 0.0348', 'Discriminator accuracy 0.9922', 'Total loss: 4.3303', 'for batch', 14)
('GAN loss 4.3208 ', 'GAN acc 0.0000', 'Discriminator loss 0.0318', 'Discriminator accuracy 0.9941', 'Total loss: 4.3526', 'for batch', 15)
('GAN loss 4.2621 ', 'GAN acc 0.0000', 'Discriminator loss 0.0561', 'Discriminator accuracy 0.9883', 'Total loss: 4.3181', 'for batch', 16)
('GAN loss 4.1156 ', 'GAN acc 0.0000', 'Discriminator loss 0.0474', 'Discriminator accuracy 0.9883', 'Total loss: 4.1631', 'for batch', 17)
('GAN loss 4.1403 ', 'GAN acc 0.0000', 'Discriminator loss 0.0341', 'Discriminator accuracy 0.9941', 'Total loss: 4.1744', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.9842574)
('DISCRIMINATOR_Imagem FAKE=', 0.016014921)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.208416')
----------------------------------
('Epoch', 44, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1917 ', 'GAN acc 0.0000', 'Discriminator loss 0.0504', 'Discriminator accuracy 0.9902', 'Total loss: 4.2421', 'for batch', 0)
('GAN loss 4.1813 ', 'GAN acc 0.0000', 'Discriminator loss 0.0481', 'Discriminator accuracy 0.9883', 'Total loss: 4.2294', 'for batch', 1)
('GAN loss 4.4227 ', 'GAN acc 0.0000', 'Discriminator loss 0.0442', 'Discriminator accuracy 0.9902', 'Total loss: 4.4670', 'for batch', 2)
('GAN loss 4.4729 ', 'GAN acc 0.0000', 'Discriminator loss 0.0385', 'Discriminator accuracy 0.9902', 'Total loss: 4.5114', 'for batch', 3)
('GAN loss 4.4518 ', 'GAN acc 0.0000', 'Discriminator loss 0.0234', 'Discriminator accuracy 0.9961', 'Total loss: 4.4752', 'for batch', 4)
('GAN loss 4.3075 ', 'GAN acc 0.0000', 'Discriminator loss 0.0381', 'Discriminator accuracy 0.9922', 'Total loss: 4.3455', 'for batch', 5)
('GAN loss 4.2237 ', 'GAN acc 0.0000', 'Discriminator loss 0.0474', 'Discriminator accuracy 0.9883', 'Total loss: 4.2711', 'for batch', 6)
('GAN loss 4.0280 ', 'GAN acc 0.0000', 'Discriminator loss 0.0569', 'Discriminator accuracy 0.9883', 'Total loss: 4.0849', 'for batch', 7)
('GAN loss 8.9685 ', 'GAN acc 0.0000', 'Discriminator loss 0.6621', 'Discriminator accuracy 0.8027', 'Total loss: 9.6305', 'for batch', 8)
('GAN loss 8.8399 ', 'GAN acc 0.0000', 'Discriminator loss 0.0939', 'Discriminator accuracy 0.9824', 'Total loss: 8.9338', 'for batch', 9)
('GAN loss 7.3122 ', 'GAN acc 0.0000', 'Discriminator loss 0.4828', 'Discriminator accuracy 0.9199', 'Total loss: 7.7950', 'for batch', 10)
('GAN loss 5.5116 ', 'GAN acc 0.0000', 'Discriminator loss 0.3123', 'Discriminator accuracy 0.9297', 'Total loss: 5.8239', 'for batch', 11)
('GAN loss 4.4104 ', 'GAN acc 0.0000', 'Discriminator loss 0.1298', 'Discriminator accuracy 0.9648', 'Total loss: 4.5402', 'for batch', 12)
('GAN loss 3.7897 ', 'GAN acc 0.0000', 'Discriminator loss 0.0722', 'Discriminator accuracy 0.9766', 'Total loss: 3.8619', 'for batch', 13)
('GAN loss 3.4337 ', 'GAN acc 0.0000', 'Discriminator loss 0.0550', 'Discriminator accuracy 0.9844', 'Total loss: 3.4887', 'for batch', 14)
('GAN loss 2.7472 ', 'GAN acc 0.0000', 'Discriminator loss 0.0699', 'Discriminator accuracy 0.9883', 'Total loss: 2.8171', 'for batch', 15)
('GAN loss 2.5497 ', 'GAN acc 0.0000', 'Discriminator loss 0.1249', 'Discriminator accuracy 0.9824', 'Total loss: 2.6745', 'for batch', 16)
('GAN loss 3.1654 ', 'GAN acc 0.0000', 'Discriminator loss 0.1019', 'Discriminator accuracy 0.9785', 'Total loss: 3.2673', 'for batch', 17)
('GAN loss 3.6290 ', 'GAN acc 0.0000', 'Discriminator loss 0.0674', 'Discriminator accuracy 0.9863', 'Total loss: 3.6963', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.96687734)
('DISCRIMINATOR_Imagem FAKE=', 0.075779803)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.733454')
----------------------------------
('Epoch', 45, 'of', 50)
('Number of batches', 19)
('GAN loss 3.7361 ', 'GAN acc 0.0000', 'Discriminator loss 0.0697', 'Discriminator accuracy 0.9824', 'Total loss: 3.8058', 'for batch', 0)
('GAN loss 3.4354 ', 'GAN acc 0.0000', 'Discriminator loss 0.0899', 'Discriminator accuracy 0.9746', 'Total loss: 3.5253', 'for batch', 1)
('GAN loss 3.2712 ', 'GAN acc 0.0000', 'Discriminator loss 0.0803', 'Discriminator accuracy 0.9766', 'Total loss: 3.3515', 'for batch', 2)
('GAN loss 3.3244 ', 'GAN acc 0.0000', 'Discriminator loss 0.0602', 'Discriminator accuracy 0.9863', 'Total loss: 3.3846', 'for batch', 3)
('GAN loss 3.2590 ', 'GAN acc 0.0000', 'Discriminator loss 0.0656', 'Discriminator accuracy 0.9844', 'Total loss: 3.3246', 'for batch', 4)
('GAN loss 3.2912 ', 'GAN acc 0.0000', 'Discriminator loss 0.0593', 'Discriminator accuracy 0.9883', 'Total loss: 3.3505', 'for batch', 5)
('GAN loss 3.2720 ', 'GAN acc 0.0000', 'Discriminator loss 0.0824', 'Discriminator accuracy 0.9785', 'Total loss: 3.3544', 'for batch', 6)
('GAN loss 3.2762 ', 'GAN acc 0.0000', 'Discriminator loss 0.0671', 'Discriminator accuracy 0.9824', 'Total loss: 3.3433', 'for batch', 7)
('GAN loss 3.3774 ', 'GAN acc 0.0000', 'Discriminator loss 0.0327', 'Discriminator accuracy 0.9961', 'Total loss: 3.4101', 'for batch', 8)
('GAN loss 3.4458 ', 'GAN acc 0.0000', 'Discriminator loss 0.0545', 'Discriminator accuracy 0.9902', 'Total loss: 3.5003', 'for batch', 9)
('GAN loss 3.5149 ', 'GAN acc 0.0000', 'Discriminator loss 0.0419', 'Discriminator accuracy 0.9922', 'Total loss: 3.5568', 'for batch', 10)
('GAN loss 3.5495 ', 'GAN acc 0.0000', 'Discriminator loss 0.0457', 'Discriminator accuracy 0.9844', 'Total loss: 3.5953', 'for batch', 11)
('GAN loss 3.5070 ', 'GAN acc 0.0000', 'Discriminator loss 0.0604', 'Discriminator accuracy 0.9824', 'Total loss: 3.5675', 'for batch', 12)
('GAN loss 3.5253 ', 'GAN acc 0.0000', 'Discriminator loss 0.0779', 'Discriminator accuracy 0.9844', 'Total loss: 3.6032', 'for batch', 13)
('GAN loss 3.5141 ', 'GAN acc 0.0000', 'Discriminator loss 0.0546', 'Discriminator accuracy 0.9883', 'Total loss: 3.5687', 'for batch', 14)
('GAN loss 3.5459 ', 'GAN acc 0.0000', 'Discriminator loss 0.0428', 'Discriminator accuracy 0.9902', 'Total loss: 3.5887', 'for batch', 15)
('GAN loss 3.5808 ', 'GAN acc 0.0000', 'Discriminator loss 0.0606', 'Discriminator accuracy 0.9883', 'Total loss: 3.6413', 'for batch', 16)
('GAN loss 3.5779 ', 'GAN acc 0.0000', 'Discriminator loss 0.0693', 'Discriminator accuracy 0.9844', 'Total loss: 3.6472', 'for batch', 17)
('GAN loss 3.5931 ', 'GAN acc 0.0000', 'Discriminator loss 0.0446', 'Discriminator accuracy 0.9902', 'Total loss: 3.6377', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97729963)
('DISCRIMINATOR_Imagem FAKE=', 0.034114257)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.197083')
----------------------------------
('Epoch', 46, 'of', 50)
('Number of batches', 19)
('GAN loss 3.6202 ', 'GAN acc 0.0000', 'Discriminator loss 0.0571', 'Discriminator accuracy 0.9883', 'Total loss: 3.6773', 'for batch', 0)
('GAN loss 3.5541 ', 'GAN acc 0.0000', 'Discriminator loss 0.0693', 'Discriminator accuracy 0.9844', 'Total loss: 3.6234', 'for batch', 1)
('GAN loss 3.4990 ', 'GAN acc 0.0000', 'Discriminator loss 0.0537', 'Discriminator accuracy 0.9863', 'Total loss: 3.5527', 'for batch', 2)
('GAN loss 3.5106 ', 'GAN acc 0.0000', 'Discriminator loss 0.0485', 'Discriminator accuracy 0.9902', 'Total loss: 3.5591', 'for batch', 3)
('GAN loss 3.5886 ', 'GAN acc 0.0000', 'Discriminator loss 0.0399', 'Discriminator accuracy 0.9941', 'Total loss: 3.6285', 'for batch', 4)
('GAN loss 3.6254 ', 'GAN acc 0.0000', 'Discriminator loss 0.0494', 'Discriminator accuracy 0.9902', 'Total loss: 3.6748', 'for batch', 5)
('GAN loss 3.6076 ', 'GAN acc 0.0000', 'Discriminator loss 0.0641', 'Discriminator accuracy 0.9844', 'Total loss: 3.6717', 'for batch', 6)
('GAN loss 3.5891 ', 'GAN acc 0.0000', 'Discriminator loss 0.0608', 'Discriminator accuracy 0.9883', 'Total loss: 3.6499', 'for batch', 7)
('GAN loss 3.7969 ', 'GAN acc 0.0000', 'Discriminator loss 0.0278', 'Discriminator accuracy 0.9961', 'Total loss: 3.8246', 'for batch', 8)
('GAN loss 3.9908 ', 'GAN acc 0.0000', 'Discriminator loss 0.0464', 'Discriminator accuracy 0.9922', 'Total loss: 4.0372', 'for batch', 9)
('GAN loss 4.0394 ', 'GAN acc 0.0000', 'Discriminator loss 0.0362', 'Discriminator accuracy 0.9941', 'Total loss: 4.0756', 'for batch', 10)
('GAN loss 3.9623 ', 'GAN acc 0.0000', 'Discriminator loss 0.0486', 'Discriminator accuracy 0.9883', 'Total loss: 4.0109', 'for batch', 11)
('GAN loss 4.5031 ', 'GAN acc 0.0000', 'Discriminator loss 0.0798', 'Discriminator accuracy 0.9766', 'Total loss: 4.5829', 'for batch', 12)
('GAN loss 4.5820 ', 'GAN acc 0.0000', 'Discriminator loss 0.1095', 'Discriminator accuracy 0.9805', 'Total loss: 4.6915', 'for batch', 13)
('GAN loss 4.6942 ', 'GAN acc 0.0000', 'Discriminator loss 0.0648', 'Discriminator accuracy 0.9883', 'Total loss: 4.7590', 'for batch', 14)
('GAN loss 4.5506 ', 'GAN acc 0.0000', 'Discriminator loss 0.0549', 'Discriminator accuracy 0.9883', 'Total loss: 4.6055', 'for batch', 15)
('GAN loss 4.5614 ', 'GAN acc 0.0000', 'Discriminator loss 0.0670', 'Discriminator accuracy 0.9863', 'Total loss: 4.6284', 'for batch', 16)
('GAN loss 4.5965 ', 'GAN acc 0.0000', 'Discriminator loss 0.0842', 'Discriminator accuracy 0.9785', 'Total loss: 4.6807', 'for batch', 17)
('GAN loss 4.0234 ', 'GAN acc 0.0000', 'Discriminator loss 0.0458', 'Discriminator accuracy 0.9902', 'Total loss: 4.0691', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97063488)
('DISCRIMINATOR_Imagem FAKE=', 0.016517185)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.750172')
----------------------------------
('Epoch', 47, 'of', 50)
('Number of batches', 19)
('GAN loss 4.0858 ', 'GAN acc 0.0000', 'Discriminator loss 0.0694', 'Discriminator accuracy 0.9824', 'Total loss: 4.1552', 'for batch', 0)
('GAN loss 3.6085 ', 'GAN acc 0.0000', 'Discriminator loss 0.0837', 'Discriminator accuracy 0.9805', 'Total loss: 3.6923', 'for batch', 1)
('GAN loss 3.4844 ', 'GAN acc 0.0000', 'Discriminator loss 0.0649', 'Discriminator accuracy 0.9844', 'Total loss: 3.5493', 'for batch', 2)
('GAN loss 3.5229 ', 'GAN acc 0.0000', 'Discriminator loss 0.0631', 'Discriminator accuracy 0.9883', 'Total loss: 3.5860', 'for batch', 3)
('GAN loss 3.5823 ', 'GAN acc 0.0000', 'Discriminator loss 0.0519', 'Discriminator accuracy 0.9883', 'Total loss: 3.6343', 'for batch', 4)
('GAN loss 3.6044 ', 'GAN acc 0.0000', 'Discriminator loss 0.0531', 'Discriminator accuracy 0.9902', 'Total loss: 3.6575', 'for batch', 5)
('GAN loss 3.6915 ', 'GAN acc 0.0000', 'Discriminator loss 0.0761', 'Discriminator accuracy 0.9824', 'Total loss: 3.7676', 'for batch', 6)
('GAN loss 3.5755 ', 'GAN acc 0.0000', 'Discriminator loss 0.0720', 'Discriminator accuracy 0.9805', 'Total loss: 3.6475', 'for batch', 7)
('GAN loss 3.6739 ', 'GAN acc 0.0000', 'Discriminator loss 0.0253', 'Discriminator accuracy 0.9961', 'Total loss: 3.6992', 'for batch', 8)
('GAN loss 3.7799 ', 'GAN acc 0.0000', 'Discriminator loss 0.0455', 'Discriminator accuracy 0.9883', 'Total loss: 3.8254', 'for batch', 9)
('GAN loss 3.6943 ', 'GAN acc 0.0000', 'Discriminator loss 0.0433', 'Discriminator accuracy 0.9902', 'Total loss: 3.7377', 'for batch', 10)
('GAN loss 3.8285 ', 'GAN acc 0.0000', 'Discriminator loss 0.0343', 'Discriminator accuracy 0.9941', 'Total loss: 3.8628', 'for batch', 11)
('GAN loss 3.8388 ', 'GAN acc 0.0000', 'Discriminator loss 0.0558', 'Discriminator accuracy 0.9844', 'Total loss: 3.8947', 'for batch', 12)
('GAN loss 3.8151 ', 'GAN acc 0.0000', 'Discriminator loss 0.0718', 'Discriminator accuracy 0.9844', 'Total loss: 3.8869', 'for batch', 13)
('GAN loss 3.7836 ', 'GAN acc 0.0000', 'Discriminator loss 0.0501', 'Discriminator accuracy 0.9863', 'Total loss: 3.8337', 'for batch', 14)
('GAN loss 3.7982 ', 'GAN acc 0.0000', 'Discriminator loss 0.0433', 'Discriminator accuracy 0.9902', 'Total loss: 3.8415', 'for batch', 15)
('GAN loss 3.8480 ', 'GAN acc 0.0000', 'Discriminator loss 0.0596', 'Discriminator accuracy 0.9883', 'Total loss: 3.9076', 'for batch', 16)
('GAN loss 3.7637 ', 'GAN acc 0.0000', 'Discriminator loss 0.0664', 'Discriminator accuracy 0.9824', 'Total loss: 3.8301', 'for batch', 17)
('GAN loss 3.8629 ', 'GAN acc 0.0000', 'Discriminator loss 0.0371', 'Discriminator accuracy 0.9922', 'Total loss: 3.8999', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97718346)
('DISCRIMINATOR_Imagem FAKE=', 0.022664594)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.217834')
----------------------------------
('Epoch', 48, 'of', 50)
('Number of batches', 19)
('GAN loss 3.7952 ', 'GAN acc 0.0000', 'Discriminator loss 0.0563', 'Discriminator accuracy 0.9844', 'Total loss: 3.8514', 'for batch', 0)
('GAN loss 3.6492 ', 'GAN acc 0.0000', 'Discriminator loss 0.0619', 'Discriminator accuracy 0.9824', 'Total loss: 3.7111', 'for batch', 1)
('GAN loss 3.6397 ', 'GAN acc 0.0000', 'Discriminator loss 0.0546', 'Discriminator accuracy 0.9883', 'Total loss: 3.6943', 'for batch', 2)
('GAN loss 3.6897 ', 'GAN acc 0.0000', 'Discriminator loss 0.0559', 'Discriminator accuracy 0.9883', 'Total loss: 3.7455', 'for batch', 3)
('GAN loss 3.7761 ', 'GAN acc 0.0000', 'Discriminator loss 0.0397', 'Discriminator accuracy 0.9902', 'Total loss: 3.8157', 'for batch', 4)
('GAN loss 3.9042 ', 'GAN acc 0.0000', 'Discriminator loss 0.0447', 'Discriminator accuracy 0.9902', 'Total loss: 3.9489', 'for batch', 5)
('GAN loss 3.9228 ', 'GAN acc 0.0000', 'Discriminator loss 0.0656', 'Discriminator accuracy 0.9824', 'Total loss: 3.9885', 'for batch', 6)
('GAN loss 3.8132 ', 'GAN acc 0.0000', 'Discriminator loss 0.0626', 'Discriminator accuracy 0.9824', 'Total loss: 3.8758', 'for batch', 7)
('GAN loss 3.8960 ', 'GAN acc 0.0000', 'Discriminator loss 0.0211', 'Discriminator accuracy 0.9980', 'Total loss: 3.9171', 'for batch', 8)
('GAN loss 3.9138 ', 'GAN acc 0.0000', 'Discriminator loss 0.0394', 'Discriminator accuracy 0.9922', 'Total loss: 3.9532', 'for batch', 9)
('GAN loss 3.9275 ', 'GAN acc 0.0000', 'Discriminator loss 0.0409', 'Discriminator accuracy 0.9902', 'Total loss: 3.9684', 'for batch', 10)
('GAN loss 4.0035 ', 'GAN acc 0.0000', 'Discriminator loss 0.0295', 'Discriminator accuracy 0.9941', 'Total loss: 4.0329', 'for batch', 11)
('GAN loss 3.9816 ', 'GAN acc 0.0000', 'Discriminator loss 0.0506', 'Discriminator accuracy 0.9863', 'Total loss: 4.0322', 'for batch', 12)
('GAN loss 3.9727 ', 'GAN acc 0.0000', 'Discriminator loss 0.0565', 'Discriminator accuracy 0.9844', 'Total loss: 4.0292', 'for batch', 13)
('GAN loss 3.9089 ', 'GAN acc 0.0000', 'Discriminator loss 0.0421', 'Discriminator accuracy 0.9922', 'Total loss: 3.9510', 'for batch', 14)
('GAN loss 3.9594 ', 'GAN acc 0.0000', 'Discriminator loss 0.0364', 'Discriminator accuracy 0.9922', 'Total loss: 3.9958', 'for batch', 15)
('GAN loss 4.0562 ', 'GAN acc 0.0000', 'Discriminator loss 0.0596', 'Discriminator accuracy 0.9883', 'Total loss: 4.1158', 'for batch', 16)
('GAN loss 3.9846 ', 'GAN acc 0.0000', 'Discriminator loss 0.0633', 'Discriminator accuracy 0.9844', 'Total loss: 4.0478', 'for batch', 17)
('GAN loss 4.1862 ', 'GAN acc 0.0000', 'Discriminator loss 0.0396', 'Discriminator accuracy 0.9902', 'Total loss: 4.2259', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97770011)
('DISCRIMINATOR_Imagem FAKE=', 0.018547924)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.739854')
----------------------------------
('Epoch', 49, 'of', 50)
('Number of batches', 19)
('GAN loss 4.1309 ', 'GAN acc 0.0000', 'Discriminator loss 0.0580', 'Discriminator accuracy 0.9863', 'Total loss: 4.1889', 'for batch', 0)
('GAN loss 4.0260 ', 'GAN acc 0.0000', 'Discriminator loss 0.0632', 'Discriminator accuracy 0.9844', 'Total loss: 4.0892', 'for batch', 1)
('GAN loss 3.9355 ', 'GAN acc 0.0000', 'Discriminator loss 0.0581', 'Discriminator accuracy 0.9883', 'Total loss: 3.9936', 'for batch', 2)
('GAN loss 3.9753 ', 'GAN acc 0.0000', 'Discriminator loss 0.0549', 'Discriminator accuracy 0.9883', 'Total loss: 4.0302', 'for batch', 3)
('GAN loss 4.2972 ', 'GAN acc 0.0039', 'Discriminator loss 0.0473', 'Discriminator accuracy 0.9922', 'Total loss: 4.3446', 'for batch', 4)
('GAN loss 4.5705 ', 'GAN acc 0.0000', 'Discriminator loss 0.0445', 'Discriminator accuracy 0.9922', 'Total loss: 4.6151', 'for batch', 5)
('GAN loss 4.7536 ', 'GAN acc 0.0000', 'Discriminator loss 0.0680', 'Discriminator accuracy 0.9824', 'Total loss: 4.8217', 'for batch', 6)
('GAN loss 4.4695 ', 'GAN acc 0.0000', 'Discriminator loss 0.0693', 'Discriminator accuracy 0.9805', 'Total loss: 4.5388', 'for batch', 7)
('GAN loss 4.4067 ', 'GAN acc 0.0000', 'Discriminator loss 0.0200', 'Discriminator accuracy 0.9961', 'Total loss: 4.4267', 'for batch', 8)
('GAN loss 4.2837 ', 'GAN acc 0.0000', 'Discriminator loss 0.0369', 'Discriminator accuracy 0.9922', 'Total loss: 4.3205', 'for batch', 9)
('GAN loss 4.1619 ', 'GAN acc 0.0000', 'Discriminator loss 0.0373', 'Discriminator accuracy 0.9902', 'Total loss: 4.1993', 'for batch', 10)
('GAN loss 4.1297 ', 'GAN acc 0.0000', 'Discriminator loss 0.0315', 'Discriminator accuracy 0.9941', 'Total loss: 4.1612', 'for batch', 11)
('GAN loss 4.1153 ', 'GAN acc 0.0039', 'Discriminator loss 0.0490', 'Discriminator accuracy 0.9863', 'Total loss: 4.1642', 'for batch', 12)
('GAN loss 4.0736 ', 'GAN acc 0.0000', 'Discriminator loss 0.0624', 'Discriminator accuracy 0.9844', 'Total loss: 4.1361', 'for batch', 13)
('GAN loss 3.9714 ', 'GAN acc 0.0000', 'Discriminator loss 0.0446', 'Discriminator accuracy 0.9883', 'Total loss: 4.0160', 'for batch', 14)
('GAN loss 4.4098 ', 'GAN acc 0.0039', 'Discriminator loss 0.0457', 'Discriminator accuracy 0.9922', 'Total loss: 4.4555', 'for batch', 15)
('GAN loss 4.1822 ', 'GAN acc 0.0000', 'Discriminator loss 0.0598', 'Discriminator accuracy 0.9883', 'Total loss: 4.2421', 'for batch', 16)
('GAN loss 4.0637 ', 'GAN acc 0.0000', 'Discriminator loss 0.0626', 'Discriminator accuracy 0.9824', 'Total loss: 4.1264', 'for batch', 17)
('GAN loss 4.0510 ', 'GAN acc 0.0000', 'Discriminator loss 0.0342', 'Discriminator accuracy 0.9941', 'Total loss: 4.0852', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.97943097)
('DISCRIMINATOR_Imagem FAKE=', 0.020747272)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:19.200787')
----------------------------------
('Epoch', 50, 'of', 50)
('Number of batches', 19)
('GAN loss 3.9922 ', 'GAN acc 0.0000', 'Discriminator loss 0.0542', 'Discriminator accuracy 0.9883', 'Total loss: 4.0464', 'for batch', 0)
('GAN loss 3.7810 ', 'GAN acc 0.0000', 'Discriminator loss 0.0631', 'Discriminator accuracy 0.9844', 'Total loss: 3.8441', 'for batch', 1)
('GAN loss 3.6780 ', 'GAN acc 0.0000', 'Discriminator loss 0.0546', 'Discriminator accuracy 0.9902', 'Total loss: 3.7325', 'for batch', 2)
('GAN loss 3.7822 ', 'GAN acc 0.0000', 'Discriminator loss 0.0572', 'Discriminator accuracy 0.9902', 'Total loss: 3.8395', 'for batch', 3)
('GAN loss 4.1363 ', 'GAN acc 0.0000', 'Discriminator loss 0.0452', 'Discriminator accuracy 0.9902', 'Total loss: 4.1815', 'for batch', 4)
('GAN loss 4.3455 ', 'GAN acc 0.0000', 'Discriminator loss 0.0441', 'Discriminator accuracy 0.9922', 'Total loss: 4.3895', 'for batch', 5)
('GAN loss 4.2499 ', 'GAN acc 0.0000', 'Discriminator loss 0.0591', 'Discriminator accuracy 0.9844', 'Total loss: 4.3090', 'for batch', 6)
('GAN loss 3.9115 ', 'GAN acc 0.0000', 'Discriminator loss 0.0647', 'Discriminator accuracy 0.9805', 'Total loss: 3.9761', 'for batch', 7)
('GAN loss 3.7513 ', 'GAN acc 0.0000', 'Discriminator loss 0.0214', 'Discriminator accuracy 0.9980', 'Total loss: 3.7727', 'for batch', 8)
('GAN loss 3.7099 ', 'GAN acc 0.0000', 'Discriminator loss 0.0454', 'Discriminator accuracy 0.9902', 'Total loss: 3.7552', 'for batch', 9)
('GAN loss 3.8535 ', 'GAN acc 0.0000', 'Discriminator loss 0.0353', 'Discriminator accuracy 0.9941', 'Total loss: 3.8887', 'for batch', 10)
('GAN loss 4.0417 ', 'GAN acc 0.0000', 'Discriminator loss 0.0286', 'Discriminator accuracy 0.9941', 'Total loss: 4.0703', 'for batch', 11)
('GAN loss 4.0811 ', 'GAN acc 0.0000', 'Discriminator loss 0.0451', 'Discriminator accuracy 0.9863', 'Total loss: 4.1262', 'for batch', 12)
('GAN loss 4.0839 ', 'GAN acc 0.0000', 'Discriminator loss 0.0575', 'Discriminator accuracy 0.9844', 'Total loss: 4.1413', 'for batch', 13)
('GAN loss 4.0808 ', 'GAN acc 0.0000', 'Discriminator loss 0.0407', 'Discriminator accuracy 0.9922', 'Total loss: 4.1216', 'for batch', 14)
('GAN loss 4.0826 ', 'GAN acc 0.0000', 'Discriminator loss 0.0357', 'Discriminator accuracy 0.9922', 'Total loss: 4.1183', 'for batch', 15)
('GAN loss 4.0819 ', 'GAN acc 0.0000', 'Discriminator loss 0.0569', 'Discriminator accuracy 0.9883', 'Total loss: 4.1387', 'for batch', 16)
('GAN loss 3.9915 ', 'GAN acc 0.0000', 'Discriminator loss 0.0584', 'Discriminator accuracy 0.9863', 'Total loss: 4.0498', 'for batch', 17)
('GAN loss 4.0121 ', 'GAN acc 0.0000', 'Discriminator loss 0.0337', 'Discriminator accuracy 0.9941', 'Total loss: 4.0458', 'for batch', 18)
('DISCRIMINATOR_Imagem REAL=', 0.98181874)
('DISCRIMINATOR_Imagem FAKE=', 0.018794486)
('Discriminator trained', 0, 'times of', 19, 'batchs')
Saving weights...
Saving sample images...
('Elapsed time in epoch = ', '0:00:18.730914')
----------------------------------
End of training
Saving histograms
----------------------------------
('Total samples = ', 5000, ' Batch size =', 256, ' Epochs = ', 50)
('Generator loss 4.0121 ', 'Discriminator loss 0.0337', 'Total: 4.0458')
----------------------------------
---DISCRIMINATOR---
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_25 (Convolution2D) (None, 32, 16, 16)    608         convolution2d_input_5[0][0]      
____________________________________________________________________________________________________
leakyrelu_25 (LeakyReLU)         (None, 32, 16, 16)    0           convolution2d_25[0][0]           
____________________________________________________________________________________________________
dropout_11 (Dropout)             (None, 32, 16, 16)    0           leakyrelu_25[0][0]               
____________________________________________________________________________________________________
convolution2d_26 (Convolution2D) (None, 64, 8, 8)      18496       dropout_11[0][0]                 
____________________________________________________________________________________________________
leakyrelu_26 (LeakyReLU)         (None, 64, 8, 8)      0           convolution2d_26[0][0]           
____________________________________________________________________________________________________
dropout_12 (Dropout)             (None, 64, 8, 8)      0           leakyrelu_26[0][0]               
____________________________________________________________________________________________________
convolution2d_27 (Convolution2D) (None, 128, 4, 4)     73856       dropout_12[0][0]                 
____________________________________________________________________________________________________
leakyrelu_27 (LeakyReLU)         (None, 128, 4, 4)     0           convolution2d_27[0][0]           
____________________________________________________________________________________________________
dropout_13 (Dropout)             (None, 128, 4, 4)     0           leakyrelu_27[0][0]               
____________________________________________________________________________________________________
convolution2d_28 (Convolution2D) (None, 256, 2, 2)     295168      dropout_13[0][0]                 
____________________________________________________________________________________________________
leakyrelu_28 (LeakyReLU)         (None, 256, 2, 2)     0           convolution2d_28[0][0]           
____________________________________________________________________________________________________
dropout_14 (Dropout)             (None, 256, 2, 2)     0           leakyrelu_28[0][0]               
____________________________________________________________________________________________________
flatten_3 (Flatten)              (None, 1024)          0           dropout_14[0][0]                 
____________________________________________________________________________________________________
dense_5 (Dense)                  (None, 1024)          1049600     flatten_3[0][0]                  
____________________________________________________________________________________________________
leakyrelu_29 (LeakyReLU)         (None, 1024)          0           dense_5[0][0]                    
____________________________________________________________________________________________________
dropout_15 (Dropout)             (None, 1024)          0           leakyrelu_29[0][0]               
____________________________________________________________________________________________________
dense_6 (Dense)                  (None, 1)             1025        dropout_15[0][0]                 
====================================================================================================
Total params: 1438753
____________________________________________________________________________________________________
None
----------------------------------
---GENERATOR---
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
convolution2d_29 (Convolution2D) (None, 32, 32, 32)    320         convolution2d_input_6[0][0]      
____________________________________________________________________________________________________
leakyrelu_30 (LeakyReLU)         (None, 32, 32, 32)    0           convolution2d_29[0][0]           
____________________________________________________________________________________________________
convolution2d_30 (Convolution2D) (None, 64, 32, 32)    18496       leakyrelu_30[0][0]               
____________________________________________________________________________________________________
batchnormalization_13 (BatchNorma(None, 64, 32, 32)    128         convolution2d_30[0][0]           
____________________________________________________________________________________________________
leakyrelu_31 (LeakyReLU)         (None, 64, 32, 32)    0           batchnormalization_13[0][0]      
____________________________________________________________________________________________________
convolution2d_31 (Convolution2D) (None, 128, 32, 32)   73856       leakyrelu_31[0][0]               
____________________________________________________________________________________________________
batchnormalization_14 (BatchNorma(None, 128, 32, 32)   256         convolution2d_31[0][0]           
____________________________________________________________________________________________________
leakyrelu_32 (LeakyReLU)         (None, 128, 32, 32)   0           batchnormalization_14[0][0]      
____________________________________________________________________________________________________
convolution2d_32 (Convolution2D) (None, 256, 32, 32)   295168      leakyrelu_32[0][0]               
____________________________________________________________________________________________________
batchnormalization_15 (BatchNorma(None, 256, 32, 32)   512         convolution2d_32[0][0]           
____________________________________________________________________________________________________
leakyrelu_33 (LeakyReLU)         (None, 256, 32, 32)   0           batchnormalization_15[0][0]      
____________________________________________________________________________________________________
convolution2d_33 (Convolution2D) (None, 128, 32, 32)   295040      leakyrelu_33[0][0]               
____________________________________________________________________________________________________
batchnormalization_16 (BatchNorma(None, 128, 32, 32)   256         convolution2d_33[0][0]           
____________________________________________________________________________________________________
leakyrelu_34 (LeakyReLU)         (None, 128, 32, 32)   0           batchnormalization_16[0][0]      
____________________________________________________________________________________________________
convolution2d_34 (Convolution2D) (None, 64, 32, 32)    73792       leakyrelu_34[0][0]               
____________________________________________________________________________________________________
batchnormalization_17 (BatchNorma(None, 64, 32, 32)    128         convolution2d_34[0][0]           
____________________________________________________________________________________________________
leakyrelu_35 (LeakyReLU)         (None, 64, 32, 32)    0           batchnormalization_17[0][0]      
____________________________________________________________________________________________________
convolution2d_35 (Convolution2D) (None, 32, 32, 32)    18464       leakyrelu_35[0][0]               
____________________________________________________________________________________________________
batchnormalization_18 (BatchNorma(None, 32, 32, 32)    64          convolution2d_35[0][0]           
____________________________________________________________________________________________________
leakyrelu_36 (LeakyReLU)         (None, 32, 32, 32)    0           batchnormalization_18[0][0]      
____________________________________________________________________________________________________
convolution2d_36 (Convolution2D) (None, 2, 32, 32)     578         leakyrelu_36[0][0]               
____________________________________________________________________________________________________
lambda_3 (Lambda)                (None, 2, 32, 32)     0           convolution2d_36[0][0]           
====================================================================================================
Total params: 777058
____________________________________________________________________________________________________
None
----------------------------------
---GAN---
____________________________________________________________________________________________________
Layer (type)                     Output Shape          Param #     Connected to                     
====================================================================================================
sequential_8 (Sequential)        (None, 2, 32, 32)     777058                                       
____________________________________________________________________________________________________
sequential_7 (Sequential)        (None, 1)             0           lambda_3[0][0]                   
====================================================================================================
Total params: 2215811
____________________________________________________________________________________________________
None
